
board_checkout.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00004294  00004328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cab  00802104  00802104  0000442c  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000074d  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005527  00000000  00000000  00004c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d67  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026ec  00000000  00000000  0000af07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  0000d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003291  00000000  00000000  0000db04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ed1  00000000  00000000  00010d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00012c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__vector_14>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_16>
      44:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_17>
      48:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_18>
      4c:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_19>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_79>
     140:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__vector_80>
     144:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__vector_81>
     148:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__vector_82>
     14c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_104>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	11 e2       	ldi	r17, 0x21	; 33
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e4 e9       	ldi	r30, 0x94	; 148
     200:	f2 e4       	ldi	r31, 0x42	; 66
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a4 30       	cpi	r26, 0x04	; 4
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	1d e4       	ldi	r17, 0x4D	; 77
     214:	a4 e0       	ldi	r26, 0x04	; 4
     216:	b1 e2       	ldi	r27, 0x21	; 33
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	af 3a       	cpi	r26, 0xAF	; 175
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 17 01 	call	0x22e	; 0x22e <main>
     226:	0c 94 48 21 	jmp	0x4290	; 0x4290 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <main>:
*/

#include "E-000001-000009_firmware_rev_1_0.h"


int main(void) {
     22e:	cf 92       	push	r12
     230:	ef 92       	push	r14
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	ce 53       	subi	r28, 0x3E	; 62
     240:	d1 40       	sbci	r29, 0x01	; 1
     242:	cd bf       	out	0x3d, r28	; 61
     244:	de bf       	out	0x3e, r29	; 62
	

	uint8_t filterSettings;
	
	// set system clock
	set_32MHz();  // for RC clock
     246:	0e 94 29 16 	call	0x2c52	; 0x2c52 <set_32MHz>
	//set_XOSC32MHz();  // for crystal when installed

	// breakpoint XX - write known values with checksums to FRAM
	// read known values back from FRAM and recalculate checksums
	FRAMWriteKnownsCheck();
     24a:	0e 94 02 14 	call	0x2804	; 0x2804 <FRAMWriteKnownsCheck>
	// checksumADC[0] = checkSumFRAM[0] = 0x35
	// sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 18CC5ED67

	// breakpoint XX - collect sample from all three siesmic channels with
	// checksums on FRAM writes and read back recalculating checksums
	FRAMTest3Channel();
     24e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <FRAMTest3Channel>
	// checksumADC and checkSumFRAM match

	// breakpoint XX - collect sample from Channel 8 (ACC z-axis) with gain of 1 and DCPass enabled
	// configure board resting lies flat with J1 facing up
	FRAMTest1Channel();
     252:	0e 94 ac 12 	call	0x2558	; 0x2558 <FRAMTest1Channel>
	// checksumADC and checkSumFRAM match 


	// breakpoint 1a - collect room temperature
	CO_collectTemp(&BP_1a_avg_mV, &BP_1a_min_mV, &BP_1a_max_mV);
     256:	ce 01       	movw	r24, r28
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	be 01       	movw	r22, r28
     25c:	6d 5f       	subi	r22, 0xFD	; 253
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	ae 01       	movw	r20, r28
     262:	4b 5f       	subi	r20, 0xFB	; 251
     264:	5f 4f       	sbci	r21, 0xFF	; 255
     266:	0e 94 21 15 	call	0x2a42	; 0x2a42 <CO_collectTemp>
	// avg 830mV +/- 25% with min/max +/- 1% of avg 

	// breakpoint 1b - collect body temperature
	CO_collectTemp(&BP_1b_avg_mV, &BP_1b_min_mV, &BP_1b_max_mV);
     26a:	ce 01       	movw	r24, r28
     26c:	07 96       	adiw	r24, 0x07	; 7
     26e:	be 01       	movw	r22, r28
     270:	67 5f       	subi	r22, 0xF7	; 247
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	ae 01       	movw	r20, r28
     276:	45 5f       	subi	r20, 0xF5	; 245
     278:	5f 4f       	sbci	r21, 0xFF	; 255
     27a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <CO_collectTemp>
	// avg should increase from breakpoint 1a
	// min/max +/- 1% of avg

	// breakpoint 2 - collect battery voltage
	CO_collectBatt(&BP_2_avg_mV, &BP_2_min_mV, &BP_2_max_mV);
     27e:	ce 01       	movw	r24, r28
     280:	0d 96       	adiw	r24, 0x0d	; 13
     282:	be 01       	movw	r22, r28
     284:	61 5f       	subi	r22, 0xF1	; 241
     286:	7f 4f       	sbci	r23, 0xFF	; 255
     288:	ae 01       	movw	r20, r28
     28a:	4f 5e       	subi	r20, 0xEF	; 239
     28c:	5f 4f       	sbci	r21, 0xFF	; 255
     28e:	0e 94 12 14 	call	0x2824	; 0x2824 <CO_collectBatt>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     292:	00 00       	nop
	
	//set filter for breakpoint 3	
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 3a - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3a_avg_uV, &BP_3a_min_uV, &BP_3a_max_uV,
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	61 ec       	ldi	r22, 0xC1	; 193
     298:	ae 01       	movw	r20, r28
     29a:	4d 5e       	subi	r20, 0xED	; 237
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	9e 01       	movw	r18, r28
     2a0:	29 5e       	subi	r18, 0xE9	; 233
     2a2:	3f 4f       	sbci	r19, 0xFF	; 255
     2a4:	8e 01       	movw	r16, r28
     2a6:	05 5e       	subi	r16, 0xE5	; 229
     2a8:	1f 4f       	sbci	r17, 0xFF	; 255
     2aa:	ee 24       	eor	r14, r14
     2ac:	7c e0       	ldi	r23, 0x0C	; 12
     2ae:	c7 2e       	mov	r12, r23
     2b0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg 
	
	// breakpoint 3b - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3b_avg_uV, &BP_3b_min_uV, &BP_3b_max_uV,
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	61 ec       	ldi	r22, 0xC1	; 193
     2b8:	ae 01       	movw	r20, r28
     2ba:	41 5e       	subi	r20, 0xE1	; 225
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	9e 01       	movw	r18, r28
     2c0:	2d 5d       	subi	r18, 0xDD	; 221
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	8e 01       	movw	r16, r28
     2c6:	09 5d       	subi	r16, 0xD9	; 217
     2c8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ca:	ee 24       	eor	r14, r14
     2cc:	e3 94       	inc	r14
     2ce:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     2d2:	00 00       	nop

	Ext1Power(TRUE);
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// breakpoint 3c - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3c_avg_uV, &BP_3c_min_uV, &BP_3c_max_uV,
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	61 ec       	ldi	r22, 0xC1	; 193
     2de:	ae 01       	movw	r20, r28
     2e0:	45 5d       	subi	r20, 0xD5	; 213
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	9e 01       	movw	r18, r28
     2e6:	21 5d       	subi	r18, 0xD1	; 209
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	8e 01       	movw	r16, r28
     2ec:	0d 5c       	subi	r16, 0xCD	; 205
     2ee:	1f 4f       	sbci	r17, 0xFF	; 255
     2f0:	ee 24       	eor	r14, r14
     2f2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg 


	// breakpoint 3d - collect sample from Channel 1 (ELEC1/ELEC2) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_3d_avg_uV, &BP_3d_min_uV, &BP_3d_max_uV,
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	61 ec       	ldi	r22, 0xC1	; 193
     2fa:	ae 01       	movw	r20, r28
     2fc:	49 5c       	subi	r20, 0xC9	; 201
     2fe:	5f 4f       	sbci	r21, 0xFF	; 255
     300:	9e 01       	movw	r18, r28
     302:	25 5c       	subi	r18, 0xC5	; 197
     304:	3f 4f       	sbci	r19, 0xFF	; 255
     306:	8e 01       	movw	r16, r28
     308:	01 5c       	subi	r16, 0xC1	; 193
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	ee 24       	eor	r14, r14
     30e:	e3 94       	inc	r14
     310:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     31a:	00 00       	nop

	Ext1Power(TRUE);
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// set filter for breakpoint 4
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 4a - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4a_avg_uV, &BP_4a_min_uV, &BP_4a_max_uV,
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	62 ec       	ldi	r22, 0xC2	; 194
     326:	ae 01       	movw	r20, r28
     328:	4d 5b       	subi	r20, 0xBD	; 189
     32a:	5f 4f       	sbci	r21, 0xFF	; 255
     32c:	9e 01       	movw	r18, r28
     32e:	29 5b       	subi	r18, 0xB9	; 185
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	8e 01       	movw	r16, r28
     334:	05 5b       	subi	r16, 0xB5	; 181
     336:	1f 4f       	sbci	r17, 0xFF	; 255
     338:	ee 24       	eor	r14, r14
     33a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg 

	// breakpoint 4b - collect sample from Channel 2 (ELEC3/ELEC4) with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4b_avg_uV, &BP_4b_min_uV, &BP_4b_max_uV,
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	62 ec       	ldi	r22, 0xC2	; 194
     342:	ae 01       	movw	r20, r28
     344:	41 5b       	subi	r20, 0xB1	; 177
     346:	5f 4f       	sbci	r21, 0xFF	; 255
     348:	9e 01       	movw	r18, r28
     34a:	2d 5a       	subi	r18, 0xAD	; 173
     34c:	3f 4f       	sbci	r19, 0xFF	; 255
     34e:	8e 01       	movw	r16, r28
     350:	09 5a       	subi	r16, 0xA9	; 169
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	ee 24       	eor	r14, r14
     356:	e3 94       	inc	r14
     358:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg 

	Ext1Power(FALSE);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     362:	00 00       	nop

	Ext1Power(TRUE);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// breakpoint 4c - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 1
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4c_avg_uV, &BP_4c_min_uV, &BP_4c_max_uV,
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	62 ec       	ldi	r22, 0xC2	; 194
     36e:	ae 01       	movw	r20, r28
     370:	45 5a       	subi	r20, 0xA5	; 165
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	9e 01       	movw	r18, r28
     376:	21 5a       	subi	r18, 0xA1	; 161
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	8e 01       	movw	r16, r28
     37c:	0d 59       	subi	r16, 0x9D	; 157
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	ee 24       	eor	r14, r14
     382:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 4d - collect sample from Channel 2 (ELEC3/ELEC4) polarity reversed with gain of 2
	CO_collectADC(ADC_CH_2_gc, filterSettings, &BP_4d_avg_uV, &BP_4d_min_uV, &BP_4d_max_uV,
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	62 ec       	ldi	r22, 0xC2	; 194
     38a:	ae 01       	movw	r20, r28
     38c:	49 59       	subi	r20, 0x99	; 153
     38e:	5f 4f       	sbci	r21, 0xFF	; 255
     390:	9e 01       	movw	r18, r28
     392:	25 59       	subi	r18, 0x95	; 149
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	8e 01       	movw	r16, r28
     398:	01 59       	subi	r16, 0x91	; 145
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	ee 24       	eor	r14, r14
     39e:	e3 94       	inc	r14
     3a0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_2_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     3aa:	00 00       	nop

	Ext1Power(TRUE);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// set filter for breakpoint 5
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);
	
	// breakpoint 5 - collect sample from Channel 1 (ELEC1/ELEC2) with gain of 1
	CO_collectADC(ADC_CH_1_gc, filterSettings, &BP_5_avg_uV, &BP_5_min_uV, &BP_5_max_uV,
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	61 ec       	ldi	r22, 0xC1	; 193
     3b6:	ae 01       	movw	r20, r28
     3b8:	4d 58       	subi	r20, 0x8D	; 141
     3ba:	5f 4f       	sbci	r21, 0xFF	; 255
     3bc:	9e 01       	movw	r18, r28
     3be:	29 58       	subi	r18, 0x89	; 137
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
     3c2:	8e 01       	movw	r16, r28
     3c4:	05 58       	subi	r16, 0x85	; 133
     3c6:	1f 4f       	sbci	r17, 0xFF	; 255
     3c8:	ee 24       	eor	r14, r14
     3ca:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     3d4:	00 00       	nop

	Ext1Power(TRUE);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// set filter for breakpoint 6
	filterSettings = (uint8_t) (FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 6a - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_6a_avg_uV, &BP_6a_min_uV, &BP_6a_max_uV,
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	68 ec       	ldi	r22, 0xC8	; 200
     3e0:	ae 01       	movw	r20, r28
     3e2:	41 58       	subi	r20, 0x81	; 129
     3e4:	5f 4f       	sbci	r21, 0xFF	; 255
     3e6:	9e 01       	movw	r18, r28
     3e8:	2d 57       	subi	r18, 0x7D	; 125
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	8e 01       	movw	r16, r28
     3ee:	09 57       	subi	r16, 0x79	; 121
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     3fc:	00 00       	nop

	Ext1Power(TRUE);
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// breakpoint 6b - collect sample from Channel 4 with gain of 1
	CO_collectADC(ADC_CH_4_gc, filterSettings, &BP_6b_avg_uV, &BP_6b_min_uV, &BP_6b_max_uV,
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	68 ec       	ldi	r22, 0xC8	; 200
     408:	ae 01       	movw	r20, r28
     40a:	45 57       	subi	r20, 0x75	; 117
     40c:	5f 4f       	sbci	r21, 0xFF	; 255
     40e:	9e 01       	movw	r18, r28
     410:	21 57       	subi	r18, 0x71	; 113
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	8e 01       	movw	r16, r28
     416:	0d 56       	subi	r16, 0x6D	; 109
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg	

	Ext1Power(FALSE);
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************** SETUP EXTERNAL CIRCUIT BEFORE PROCEEDING **************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     424:	00 00       	nop

	Ext1Power(TRUE);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	// set filter for breakpoint 7
	filterSettings = (uint8_t) (FILTER_CH_1AND5_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 7a - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7a_avg_uV, &BP_7a_min_uV, &BP_7a_max_uV,
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	61 ec       	ldi	r22, 0xC1	; 193
     430:	ae 01       	movw	r20, r28
     432:	49 56       	subi	r20, 0x69	; 105
     434:	5f 4f       	sbci	r21, 0xFF	; 255
     436:	9e 01       	movw	r18, r28
     438:	25 56       	subi	r18, 0x65	; 101
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	8e 01       	movw	r16, r28
     43e:	01 56       	subi	r16, 0x61	; 97
     440:	1f 4f       	sbci	r17, 0xFF	; 255
     442:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 7b - collect sample from Channel 5 with gain of 1
	CO_collectADC(ADC_CH_5_gc, filterSettings, &BP_7b_avg_uV, &BP_7b_min_uV, &BP_7b_max_uV,
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	61 ec       	ldi	r22, 0xC1	; 193
     44a:	ae 01       	movw	r20, r28
     44c:	4d 55       	subi	r20, 0x5D	; 93
     44e:	5f 4f       	sbci	r21, 0xFF	; 255
     450:	9e 01       	movw	r18, r28
     452:	29 55       	subi	r18, 0x59	; 89
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	8e 01       	movw	r16, r28
     458:	05 55       	subi	r16, 0x55	; 85
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	Ext1Power(FALSE);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Ext1Power>

	//**********************************************************************
	//************ TEARDOWN EXTERNAL CIRCUIT BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     466:	00 00       	nop
	// set filter for breakpoint 8
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 8a - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing up
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8a_avg_uV, &BP_8a_min_uV, &BP_8a_max_uV,
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	62 ec       	ldi	r22, 0xC2	; 194
     46c:	ae 01       	movw	r20, r28
     46e:	41 55       	subi	r20, 0x51	; 81
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	9e 01       	movw	r18, r28
     474:	2d 54       	subi	r18, 0x4D	; 77
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	8e 01       	movw	r16, r28
     47a:	09 54       	subi	r16, 0x49	; 73
     47c:	1f 4f       	sbci	r17, 0xFF	; 255
     47e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 8b - collect sample from Channel 6 (ACC x-axis) with gain of 1
	// configure board resting on long edge with J1 facing down
 	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_8b_avg_uV, &BP_8b_min_uV, &BP_8b_max_uV,
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	62 ec       	ldi	r22, 0xC2	; 194
     486:	ae 01       	movw	r20, r28
     488:	45 54       	subi	r20, 0x45	; 69
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	9e 01       	movw	r18, r28
     48e:	21 54       	subi	r18, 0x41	; 65
     490:	3f 4f       	sbci	r19, 0xFF	; 255
     492:	8e 01       	movw	r16, r28
     494:	0d 53       	subi	r16, 0x3D	; 61
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
	// set filter for breakpoint 9
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 9a - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing up
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9a_avg_uV, &BP_9a_min_uV, &BP_9a_max_uV,
     49c:	86 e0       	ldi	r24, 0x06	; 6
     49e:	64 ec       	ldi	r22, 0xC4	; 196
     4a0:	ae 01       	movw	r20, r28
     4a2:	49 53       	subi	r20, 0x39	; 57
     4a4:	5f 4f       	sbci	r21, 0xFF	; 255
     4a6:	9e 01       	movw	r18, r28
     4a8:	25 53       	subi	r18, 0x35	; 53
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	8e 01       	movw	r16, r28
     4ae:	01 53       	subi	r16, 0x31	; 49
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 9b - collect sample from Channel 7 (ACC y-axis) with gain of 1
	// configure board resting vertically short edge with J1 facing down
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_9b_avg_uV, &BP_9b_min_uV, &BP_9b_max_uV,
     4b6:	86 e0       	ldi	r24, 0x06	; 6
     4b8:	64 ec       	ldi	r22, 0xC4	; 196
     4ba:	ae 01       	movw	r20, r28
     4bc:	4d 52       	subi	r20, 0x2D	; 45
     4be:	5f 4f       	sbci	r21, 0xFF	; 255
     4c0:	9e 01       	movw	r18, r28
     4c2:	29 52       	subi	r18, 0x29	; 41
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	8e 01       	movw	r16, r28
     4c8:	05 52       	subi	r16, 0x25	; 37
     4ca:	1f 4f       	sbci	r17, 0xFF	; 255
     4cc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
	// set filter for breakpoint 10
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 10a - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing up
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10a_avg_uV, &BP_10a_min_uV, &BP_10a_max_uV,
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	64 ec       	ldi	r22, 0xC4	; 196
     4d4:	ae 01       	movw	r20, r28
     4d6:	41 52       	subi	r20, 0x21	; 33
     4d8:	5f 4f       	sbci	r21, 0xFF	; 255
     4da:	9e 01       	movw	r18, r28
     4dc:	2d 51       	subi	r18, 0x1D	; 29
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	8e 01       	movw	r16, r28
     4e2:	09 51       	subi	r16, 0x19	; 25
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_1_gc, SPS_4K_gc);
	// avg ??mV +/- 10% with min/max +/- 1% of avg

	// breakpoint 10b - collect sample from Channel 8 (ACC z-axis) with gain of 1
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_10b_avg_uV, &BP_10b_min_uV, &BP_10b_max_uV,
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	64 ec       	ldi	r22, 0xC4	; 196
     4ee:	ae 01       	movw	r20, r28
     4f0:	45 51       	subi	r20, 0x15	; 21
     4f2:	5f 4f       	sbci	r21, 0xFF	; 255
     4f4:	9e 01       	movw	r18, r28
     4f6:	21 51       	subi	r18, 0x11	; 17
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	8e 01       	movw	r16, r28
     4fc:	0d 50       	subi	r16, 0x0D	; 13
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
	
	//**********************************************************************
	//************ SETUP SINE WAVE GENERATOR BEFORE PROCEEDING *************
	//************************ PAST NEXT BREAKPOINT ************************
	//**********************************************************************
	nop();
     504:	00 00       	nop

	// set filter for breakpoint 11
	filterSettings = (uint8_t) (FILTER_CH_2AND6_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 11a - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11a_avg_uV, &BP_11a_min_uV, &BP_11a_max_uV,
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	62 ec       	ldi	r22, 0xC2	; 194
     50a:	ae 01       	movw	r20, r28
     50c:	49 50       	subi	r20, 0x09	; 9
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	9e 01       	movw	r18, r28
     512:	25 50       	subi	r18, 0x05	; 5
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	8e 01       	movw	r16, r28
     518:	01 50       	subi	r16, 0x01	; 1
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	e9 2e       	mov	r14, r25
     520:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11a_delta_uV = BP_11a_max_uV - BP_11a_min_uV;
	BP_11a_diff1_uV = BP_11a_max_uV - BP_11a_avg_uV;
	BP_11a_diff2_uV = BP_11a_avg_uV - BP_11a_min_uV;
	nop();
     524:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 11b - collect sample from Channel 6 (ACC x-axis) with gain of 16
	CO_collectADC(ADC_CH_6_gc, filterSettings, &BP_11b_avg_uV, &BP_11b_min_uV, &BP_11b_max_uV,
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	62 ec       	ldi	r22, 0xC2	; 194
     52a:	ae 01       	movw	r20, r28
     52c:	4d 5f       	subi	r20, 0xFD	; 253
     52e:	5e 4f       	sbci	r21, 0xFE	; 254
     530:	9e 01       	movw	r18, r28
     532:	29 5f       	subi	r18, 0xF9	; 249
     534:	3e 4f       	sbci	r19, 0xFE	; 254
     536:	8e 01       	movw	r16, r28
     538:	05 5f       	subi	r16, 0xF5	; 245
     53a:	1e 4f       	sbci	r17, 0xFE	; 254
     53c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_11b_delta_uV = BP_11b_max_uV - BP_11b_min_uV;
	BP_11b_diff1_uV = BP_11b_max_uV - BP_11b_avg_uV;
	BP_11b_diff2_uV = BP_11b_avg_uV - BP_11b_min_uV;
	nop();
     540:	00 00       	nop

	// set filter for breakpoint 12
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 12a - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12a_avg_uV, &BP_12a_min_uV, &BP_12a_max_uV,
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	64 ec       	ldi	r22, 0xC4	; 196
     546:	ae 01       	movw	r20, r28
     548:	41 5f       	subi	r20, 0xF1	; 241
     54a:	5e 4f       	sbci	r21, 0xFE	; 254
     54c:	9e 01       	movw	r18, r28
     54e:	2d 5e       	subi	r18, 0xED	; 237
     550:	3e 4f       	sbci	r19, 0xFE	; 254
     552:	8e 01       	movw	r16, r28
     554:	09 5e       	subi	r16, 0xE9	; 233
     556:	1e 4f       	sbci	r17, 0xFE	; 254
     558:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12a_delta_uV = BP_12a_max_uV - BP_12a_min_uV;
	BP_12a_diff1_uV = BP_12a_max_uV - BP_12a_avg_uV;
	BP_12a_diff2_uV = BP_12a_avg_uV - BP_12a_min_uV;
	nop();
     55c:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 12b - collect sample from Channel 7 (ACC y-axis) with gain of 16
	CO_collectADC(ADC_CH_7_gc, filterSettings, &BP_12b_avg_uV, &BP_12b_min_uV, &BP_12b_max_uV,
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	64 ec       	ldi	r22, 0xC4	; 196
     562:	ae 01       	movw	r20, r28
     564:	45 5e       	subi	r20, 0xE5	; 229
     566:	5e 4f       	sbci	r21, 0xFE	; 254
     568:	9e 01       	movw	r18, r28
     56a:	21 5e       	subi	r18, 0xE1	; 225
     56c:	3e 4f       	sbci	r19, 0xFE	; 254
     56e:	8e 01       	movw	r16, r28
     570:	0d 5d       	subi	r16, 0xDD	; 221
     572:	1e 4f       	sbci	r17, 0xFE	; 254
     574:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_12b_delta_uV = BP_12b_max_uV - BP_12b_min_uV;
	BP_12b_diff1_uV = BP_12b_max_uV - BP_12b_avg_uV;
	BP_12b_diff2_uV = BP_12b_avg_uV - BP_12b_min_uV;
	nop();
     578:	00 00       	nop
	
	// set filter for breakpoint 13
	filterSettings = (uint8_t) (FILTER_CH_3AND7_bm | FILTER_HP_0_bm | FILTER_LP_600_gc);

	// breakpoint 13a - collect sample from Channel 8 (ACC z-axis) with gain of 16
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13a_avg_uV, &BP_13a_min_uV, &BP_13a_max_uV,
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	64 ec       	ldi	r22, 0xC4	; 196
     57e:	ae 01       	movw	r20, r28
     580:	49 5d       	subi	r20, 0xD9	; 217
     582:	5e 4f       	sbci	r21, 0xFE	; 254
     584:	9e 01       	movw	r18, r28
     586:	25 5d       	subi	r18, 0xD5	; 213
     588:	3e 4f       	sbci	r19, 0xFE	; 254
     58a:	8e 01       	movw	r16, r28
     58c:	01 5d       	subi	r16, 0xD1	; 209
     58e:	1e 4f       	sbci	r17, 0xFE	; 254
     590:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13a_delta_uV = BP_13a_max_uV - BP_13a_min_uV;
	BP_13a_diff1_uV = BP_13a_max_uV - BP_13a_avg_uV;
	BP_13a_diff2_uV = BP_13a_avg_uV - BP_13a_min_uV;
	nop();
     594:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	// breakpoint 13b - collect sample from Channel 8 (ACC z-axis) with gain of 16
	// configure board resting lies flat with J1 facing down
	CO_collectADC(ADC_CH_8_gc, filterSettings, &BP_13b_avg_uV, &BP_13b_min_uV, &BP_13b_max_uV,
     596:	87 e0       	ldi	r24, 0x07	; 7
     598:	64 ec       	ldi	r22, 0xC4	; 196
     59a:	ae 01       	movw	r20, r28
     59c:	4d 5c       	subi	r20, 0xCD	; 205
     59e:	5e 4f       	sbci	r21, 0xFE	; 254
     5a0:	9e 01       	movw	r18, r28
     5a2:	29 5c       	subi	r18, 0xC9	; 201
     5a4:	3e 4f       	sbci	r19, 0xFE	; 254
     5a6:	8e 01       	movw	r16, r28
     5a8:	05 5c       	subi	r16, 0xC5	; 197
     5aa:	1e 4f       	sbci	r17, 0xFE	; 254
     5ac:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CO_collectADC>
			GAIN_16_gc, SPS_4K_gc);
	BP_13b_delta_uV = BP_13b_max_uV - BP_13b_min_uV;
	BP_13b_diff1_uV = BP_13b_max_uV - BP_13b_avg_uV;
	BP_13b_diff2_uV = BP_13b_avg_uV - BP_13b_min_uV;
	nop();
     5b0:	00 00       	nop
	// delta value of ??mV and diff1/diff2 within ??% of each other

	
}
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	c2 5c       	subi	r28, 0xC2	; 194
     5b8:	de 4f       	sbci	r29, 0xFE	; 254
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ef 90       	pop	r14
     5c8:	cf 90       	pop	r12
     5ca:	08 95       	ret

000005cc <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
     5cc:	dc 01       	movw	r26, r24
	if(&ADCA == adc){
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	a0 30       	cpi	r26, 0x00	; 0
     5d2:	b8 07       	cpc	r27, r24
     5d4:	81 f4       	brne	.+32     	; 0x5f6 <ADC_CalibrationValues_Load+0x2a>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
     5dc:	e0 e2       	ldi	r30, 0x20	; 32
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5e2:	10 92 ca 01 	sts	0x01CA, r1
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
	if(&ADCA == adc){
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
     5e6:	1c 96       	adiw	r26, 0x0c	; 12
     5e8:	ec 93       	st	X, r30
     5ea:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     5ec:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
     5f0:	e1 e2       	ldi	r30, 0x21	; 33
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	0f c0       	rjmp	.+30     	; 0x614 <ADC_CalibrationValues_Load+0x48>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
     5fc:	e4 e2       	ldi	r30, 0x24	; 36
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     602:	10 92 ca 01 	sts	0x01CA, r1
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
     606:	1c 96       	adiw	r26, 0x0c	; 12
     608:	ec 93       	st	X, r30
     60a:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     60c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
     610:	e5 e2       	ldi	r30, 0x25	; 37
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     616:	10 92 ca 01 	sts	0x01CA, r1
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
     61a:	1d 96       	adiw	r26, 0x0d	; 13
     61c:	ec 93       	st	X, r30
     61e:	08 95       	ret

00000620 <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
     620:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     626:	24 81       	ldd	r18, Z+4	; 0x04
     628:	35 81       	ldd	r19, Z+5	; 0x05
     62a:	26 1b       	sub	r18, r22
     62c:	31 09       	sbc	r19, r1

	return answer;
}
     62e:	c9 01       	movw	r24, r18
     630:	08 95       	ret

00000632 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
     632:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     638:	24 81       	ldd	r18, Z+4	; 0x04
     63a:	35 81       	ldd	r19, Z+5	; 0x05
     63c:	77 27       	eor	r23, r23
     63e:	67 fd       	sbrc	r22, 7
     640:	70 95       	com	r23
     642:	26 1b       	sub	r18, r22
     644:	37 0b       	sbc	r19, r23

	return answer;
}
     646:	c9 01       	movw	r24, r18
     648:	08 95       	ret

0000064a <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
     64a:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     650:	24 81       	ldd	r18, Z+4	; 0x04
     652:	35 81       	ldd	r19, Z+5	; 0x05
}
     654:	c9 01       	movw	r24, r18
     656:	08 95       	ret

00000658 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
     658:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
     65e:	84 81       	ldd	r24, Z+4	; 0x04
}
     660:	08 95       	ret

00000662 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
     662:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
     668:	85 81       	ldd	r24, Z+5	; 0x05
}
     66a:	08 95       	ret

0000066c <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
     66c:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     66e:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
     670:	14 82       	std	Z+4, r1	; 0x04
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     672:	9a e2       	ldi	r25, 0x2A	; 42
     674:	9a 95       	dec	r25
     676:	f1 f7       	brne	.-4      	; 0x674 <ADC_Wait_8MHz+0x8>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     678:	84 83       	std	Z+4, r24	; 0x04
}
     67a:	08 95       	ret

0000067c <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     67c:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
     67e:	94 81       	ldd	r25, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	84 83       	std	Z+4, r24	; 0x04
     684:	85 e5       	ldi	r24, 0x55	; 85
     686:	8a 95       	dec	r24
     688:	f1 f7       	brne	.-4      	; 0x686 <ADC_Wait_32MHz+0xa>

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
     68a:	94 83       	std	Z+4, r25	; 0x04
}
     68c:	08 95       	ret

0000068e <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     68e:	fb 01       	movw	r30, r22
    if (oversampling)
     690:	44 23       	and	r20, r20
     692:	d9 f0       	breq	.+54     	; 0x6ca <ADC_Offset_Get_Unsigned+0x3c>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     69c:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     69e:	80 81       	ld	r24, Z
     6a0:	80 68       	ori	r24, 0x80	; 128
     6a2:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     6a4:	83 81       	ldd	r24, Z+3	; 0x03
     6a6:	80 ff       	sbrs	r24, 0
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     6aa:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
     6b0:	28 0f       	add	r18, r24
     6b2:	39 1f       	adc	r19, r25
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	44 30       	cpi	r20, 0x04	; 4
     6ba:	51 05       	cpc	r21, r1
     6bc:	81 f7       	brne	.-32     	; 0x69e <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
     6be:	36 95       	lsr	r19
     6c0:	27 95       	ror	r18
     6c2:	36 95       	lsr	r19
     6c4:	27 95       	ror	r18
     6c6:	82 2f       	mov	r24, r18
     6c8:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     6ca:	80 81       	ld	r24, Z
     6cc:	80 68       	ori	r24, 0x80	; 128
     6ce:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     6d0:	83 81       	ldd	r24, Z+3	; 0x03
     6d2:	80 ff       	sbrs	r24, 0
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <ADC_Offset_Get_Unsigned+0x42>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
     6de:	08 95       	ret

000006e0 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
     6e0:	fb 01       	movw	r30, r22
    if (oversampling)
     6e2:	44 23       	and	r20, r20
     6e4:	d9 f0       	breq	.+54     	; 0x71c <ADC_Offset_Get_Signed+0x3c>
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     6ee:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
     6f0:	80 81       	ld	r24, Z
     6f2:	80 68       	ori	r24, 0x80	; 128
     6f4:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
     6f6:	83 81       	ldd	r24, Z+3	; 0x03
     6f8:	80 ff       	sbrs	r24, 0
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     6fc:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     6fe:	84 81       	ldd	r24, Z+4	; 0x04
     700:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
     702:	48 0f       	add	r20, r24
     704:	59 1f       	adc	r21, r25
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	24 30       	cpi	r18, 0x04	; 4
     70c:	31 05       	cpc	r19, r1
     70e:	81 f7       	brne	.-32     	; 0x6f0 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
     710:	ca 01       	movw	r24, r20
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 c1 20 	call	0x4182	; 0x4182 <__divmodhi4>
     71a:	0b c0       	rjmp	.+22     	; 0x732 <ADC_Offset_Get_Signed+0x52>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
     71c:	80 81       	ld	r24, Z
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
     722:	83 81       	ldd	r24, Z+3	; 0x03
     724:	80 ff       	sbrs	r24, 0
     726:	fd cf       	rjmp	.-6      	; 0x722 <ADC_Offset_Get_Signed+0x42>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
     72c:	84 81       	ldd	r24, Z+4	; 0x04
     72e:	95 81       	ldd	r25, Z+5	; 0x05
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
     730:	68 2f       	mov	r22, r24
      
      return offset;
    }
}
     732:	86 2f       	mov	r24, r22
     734:	08 95       	ret

00000736 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     736:	aa ec       	ldi	r26, 0xCA	; 202
     738:	b1 e0       	ldi	r27, 0x01	; 1
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
     73e:	e8 2f       	mov	r30, r24
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     744:	1c 92       	st	X, r1

	return result;
}
     746:	8e 2f       	mov	r24, r30
     748:	08 95       	ret

0000074a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     74a:	0f 93       	push	r16
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	0f 92       	push	r0
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     756:	2f b7       	in	r18, 0x3f	; 63
     758:	29 83       	std	Y+1, r18	; 0x01
     75a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     75c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     75e:	fc 01       	movw	r30, r24
     760:	08 ed       	ldi	r16, 0xD8	; 216
     762:	04 bf       	out	0x34, r16	; 52
     764:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	8f bf       	out	0x3f, r24	; 63
#endif
}
     76a:	0f 90       	pop	r0
     76c:	cf 91       	pop	r28
     76e:	df 91       	pop	r29
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     774:	66 23       	and	r22, r22
     776:	11 f4       	brne	.+4      	; 0x77c <CLKSYS_XOSC_Config+0x8>
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	01 c0       	rjmp	.+2      	; 0x77e <CLKSYS_XOSC_Config+0xa>
     77c:	90 e2       	ldi	r25, 0x20	; 32
     77e:	48 2b       	or	r20, r24
     780:	94 2b       	or	r25, r20
     782:	e0 e5       	ldi	r30, 0x50	; 80
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     788:	08 95       	ret

0000078a <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     78a:	6f 71       	andi	r22, 0x1F	; 31
     78c:	68 2b       	or	r22, r24
     78e:	e0 e5       	ldi	r30, 0x50	; 80
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	65 83       	std	Z+5, r22	; 0x05
}
     794:	08 95       	ret

00000796 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     796:	e0 e5       	ldi	r30, 0x50	; 80
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	20 81       	ld	r18, Z
     79c:	98 2f       	mov	r25, r24
     79e:	90 95       	com	r25
     7a0:	92 23       	and	r25, r18
     7a2:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     7a4:	90 81       	ld	r25, Z
	return clkEnabled;
}
     7a6:	89 23       	and	r24, r25
     7a8:	08 95       	ret

000007aa <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     7aa:	0f 93       	push	r16
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	0f 92       	push	r0
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     7b6:	9f b7       	in	r25, 0x3f	; 63
     7b8:	99 83       	std	Y+1, r25	; 0x01
     7ba:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     7bc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     7be:	68 2b       	or	r22, r24
     7c0:	81 e4       	ldi	r24, 0x41	; 65
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	08 ed       	ldi	r16, 0xD8	; 216
     7c8:	04 bf       	out	0x34, r16	; 52
     7ca:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
     7d0:	0f 90       	pop	r0
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     7da:	0f 93       	push	r16
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	0f 92       	push	r0
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     7e6:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     7ea:	9f b7       	in	r25, 0x3f	; 63
     7ec:	99 83       	std	Y+1, r25	; 0x01
     7ee:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     7f0:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     7f2:	a0 e4       	ldi	r26, 0x40	; 64
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	28 7f       	andi	r18, 0xF8	; 248
     7f8:	28 2b       	or	r18, r24
     7fa:	fd 01       	movw	r30, r26
     7fc:	08 ed       	ldi	r16, 0xD8	; 216
     7fe:	04 bf       	out	0x34, r16	; 52
     800:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     802:	99 81       	ldd	r25, Y+1	; 0x01
     804:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
     806:	9c 91       	ld	r25, X
	return clkCtrl;
}
     808:	89 23       	and	r24, r25
     80a:	0f 90       	pop	r0
     80c:	cf 91       	pop	r28
     80e:	df 91       	pop	r29
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
     814:	e0 e4       	ldi	r30, 0x40	; 64
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	91 7f       	andi	r25, 0xF1	; 241
     81c:	91 60       	ori	r25, 0x01	; 1
     81e:	98 2b       	or	r25, r24
     820:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
     822:	08 95       	ret

00000824 <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
     824:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
     826:	30 91 56 00 	lds	r19, 0x0056
     82a:	66 23       	and	r22, r22
     82c:	11 f0       	breq	.+4      	; 0x832 <CLKSYS_AutoCalibration_Enable+0xe>
     82e:	98 2f       	mov	r25, r24
     830:	01 c0       	rjmp	.+2      	; 0x834 <CLKSYS_AutoCalibration_Enable+0x10>
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	82 2f       	mov	r24, r18
     836:	80 95       	com	r24
     838:	83 23       	and	r24, r19
     83a:	98 2b       	or	r25, r24
     83c:	e0 e5       	ldi	r30, 0x50	; 80
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
     842:	21 30       	cpi	r18, 0x01	; 1
     844:	31 f4       	brne	.+12     	; 0x852 <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
     846:	80 91 68 00 	lds	r24, 0x0068
     84a:	81 60       	ori	r24, 0x01	; 1
     84c:	80 93 68 00 	sts	0x0068, r24
     850:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
     852:	22 30       	cpi	r18, 0x02	; 2
     854:	29 f4       	brne	.+10     	; 0x860 <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     856:	80 91 60 00 	lds	r24, 0x0060
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	80 93 60 00 	sts	0x0060, r24
     860:	08 95       	ret

00000862 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
     862:	0f 93       	push	r16
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	0f 92       	push	r0
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     86e:	8f b7       	in	r24, 0x3f	; 63
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     874:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     876:	23 e0       	ldi	r18, 0x03	; 3
     878:	83 e5       	ldi	r24, 0x53	; 83
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	08 ed       	ldi	r16, 0xD8	; 216
     880:	04 bf       	out	0x34, r16	; 52
     882:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
     888:	0f 90       	pop	r0
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
     892:	0f 93       	push	r16
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	0f 92       	push	r0
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     89e:	8f b7       	in	r24, 0x3f	; 63
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     8a4:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	82 e4       	ldi	r24, 0x42	; 66
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	fc 01       	movw	r30, r24
     8ae:	08 ed       	ldi	r16, 0xD8	; 216
     8b0:	04 bf       	out	0x34, r16	; 52
     8b2:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <portExCS>:
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     8c2:	88 23       	and	r24, r24
     8c4:	29 f0       	breq	.+10     	; 0x8d0 <portExCS+0xe>
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	e0 e0       	ldi	r30, 0x00	; 0
     8ca:	f6 e0       	ldi	r31, 0x06	; 6
     8cc:	86 83       	std	Z+6, r24	; 0x06
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <portExCS+0x16>
	else {
		PORTA.OUTSET = PIN3_bm;
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	e0 e0       	ldi	r30, 0x00	; 0
     8d4:	f6 e0       	ldi	r31, 0x06	; 6
     8d6:	85 83       	std	Z+5, r24	; 0x05
     8d8:	8a e6       	ldi	r24, 0x6A	; 106
     8da:	8a 95       	dec	r24
     8dc:	f1 f7       	brne	.-4      	; 0x8da <portExCS+0x18>
	}
	_delay_us(10);
}
     8de:	08 95       	ret

000008e0 <Ext1Power>:
		
	}
}

void Ext1Power(uint8_t on) {
	if (on) {
     8e0:	88 23       	and	r24, r24
     8e2:	31 f0       	breq	.+12     	; 0x8f0 <Ext1Power+0x10>
		PORTF.DIRSET = PIN5_bm;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f6 e0       	ldi	r31, 0x06	; 6
     8e8:	80 e2       	ldi	r24, 0x20	; 32
     8ea:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN5_bm;
     8ec:	85 83       	std	Z+5, r24	; 0x05
     8ee:	08 95       	ret
		//PortEx_DIRSET(PIN3_bm, PS_BANKB);
		//PortEx_OUTSET(PIN3_bm, PS_BANKB);  //write protect SDHC
		
	} else {
		PORTF.OUTCLR = PIN5_bm;
     8f0:	e0 ea       	ldi	r30, 0xA0	; 160
     8f2:	f6 e0       	ldi	r31, 0x06	; 6
     8f4:	80 e2       	ldi	r24, 0x20	; 32
     8f6:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN5_bm;
     8f8:	82 83       	std	Z+2, r24	; 0x02
     8fa:	08 95       	ret

000008fc <Ext2Power>:
		//PortEx_OUTCLR(PIN3_bm, PS_BANKB);  //no need to write protect SDHC
	}
}

void Ext2Power(uint8_t on) {
	if (on) {
     8fc:	88 23       	and	r24, r24
     8fe:	31 f0       	breq	.+12     	; 0x90c <Ext2Power+0x10>
		PORTF.DIRSET = PIN6_bm;
     900:	e0 ea       	ldi	r30, 0xA0	; 160
     902:	f6 e0       	ldi	r31, 0x06	; 6
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN6_bm;
     908:	85 83       	std	Z+5, r24	; 0x05
     90a:	08 95       	ret
	} else {
		PORTF.OUTCLR = PIN6_bm;
     90c:	e0 ea       	ldi	r30, 0xA0	; 160
     90e:	f6 e0       	ldi	r31, 0x06	; 6
     910:	80 e4       	ldi	r24, 0x40	; 64
     912:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN6_bm;
     914:	82 83       	std	Z+2, r24	; 0x02
     916:	08 95       	ret

00000918 <HVPower>:
	}
}

void HVPower(uint8_t on) {
	if (on) {
     918:	88 23       	and	r24, r24
     91a:	31 f0       	breq	.+12     	; 0x928 <HVPower+0x10>
		PORTF.DIRSET = PIN7_bm;
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
     91e:	f6 e0       	ldi	r31, 0x06	; 6
     920:	80 e8       	ldi	r24, 0x80	; 128
     922:	81 83       	std	Z+1, r24	; 0x01
		PORTF.OUTSET = PIN7_bm;
     924:	85 83       	std	Z+5, r24	; 0x05
     926:	05 c0       	rjmp	.+10     	; 0x932 <HVPower+0x1a>
	} else {
		PORTF.OUTCLR = PIN7_bm;
     928:	e0 ea       	ldi	r30, 0xA0	; 160
     92a:	f6 e0       	ldi	r31, 0x06	; 6
     92c:	80 e8       	ldi	r24, 0x80	; 128
     92e:	86 83       	std	Z+6, r24	; 0x06
		PORTF.DIRCLR = PIN7_bm;
     930:	82 83       	std	Z+2, r24	; 0x02
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     932:	80 e4       	ldi	r24, 0x40	; 64
     934:	9f e1       	ldi	r25, 0x1F	; 31
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <HVPower+0x1e>
	}
	_delay_us(1000);
}
     93a:	08 95       	ret

0000093c <enableADCMUX>:
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
     93c:	88 23       	and	r24, r24
     93e:	31 f0       	breq	.+12     	; 0x94c <enableADCMUX+0x10>
		PORTA.DIRSET = PIN5_bm;
     940:	e0 e0       	ldi	r30, 0x00	; 0
     942:	f6 e0       	ldi	r31, 0x06	; 6
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
     948:	85 83       	std	Z+5, r24	; 0x05
     94a:	08 95       	ret
	} else {
		PORTA.OUTCLR = PIN5_bm;
     94c:	e0 e0       	ldi	r30, 0x00	; 0
     94e:	f6 e0       	ldi	r31, 0x06	; 6
     950:	80 e2       	ldi	r24, 0x20	; 32
     952:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
     954:	82 83       	std	Z+2, r24	; 0x02
     956:	08 95       	ret

00000958 <lowerMuxCS>:
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     958:	88 23       	and	r24, r24
     95a:	29 f0       	breq	.+10     	; 0x966 <lowerMuxCS+0xe>
     95c:	80 e1       	ldi	r24, 0x10	; 16
     95e:	e0 e8       	ldi	r30, 0x80	; 128
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	86 83       	std	Z+6, r24	; 0x06
     964:	08 95       	ret
	else PORTE.OUTSET = PIN4_bm;
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	e0 e8       	ldi	r30, 0x80	; 128
     96a:	f6 e0       	ldi	r31, 0x06	; 6
     96c:	85 83       	std	Z+5, r24	; 0x05
     96e:	08 95       	ret

00000970 <upperMuxCS>:
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     970:	88 23       	and	r24, r24
     972:	29 f0       	breq	.+10     	; 0x97e <upperMuxCS+0xe>
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	e0 e4       	ldi	r30, 0x40	; 64
     978:	f6 e0       	ldi	r31, 0x06	; 6
     97a:	86 83       	std	Z+6, r24	; 0x06
     97c:	08 95       	ret
	else PORTC.OUTSET = PIN1_bm;
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	e0 e4       	ldi	r30, 0x40	; 64
     982:	f6 e0       	ldi	r31, 0x06	; 6
     984:	85 83       	std	Z+5, r24	; 0x05
     986:	08 95       	ret

00000988 <setADCInput>:

/*! \brief Sets input channel to AD7767 via the A0, A1, A2 control lines of ADG758
 */
void setADCInput(uint8_t channel) {
	// set bit A0 to LSB
	if(channel & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     988:	28 2f       	mov	r18, r24
     98a:	80 ff       	sbrs	r24, 0
     98c:	05 c0       	rjmp	.+10     	; 0x998 <setADCInput+0x10>
     98e:	80 e4       	ldi	r24, 0x40	; 64
     990:	e0 e0       	ldi	r30, 0x00	; 0
     992:	f6 e0       	ldi	r31, 0x06	; 6
     994:	85 83       	std	Z+5, r24	; 0x05
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <setADCInput+0x18>
	else {PORTA.OUTCLR = PIN6_bm;}
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	e0 e0       	ldi	r30, 0x00	; 0
     99c:	f6 e0       	ldi	r31, 0x06	; 6
     99e:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1 to second bit
	if(channel & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     9a0:	21 ff       	sbrs	r18, 1
     9a2:	05 c0       	rjmp	.+10     	; 0x9ae <setADCInput+0x26>
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	e0 e2       	ldi	r30, 0x20	; 32
     9a8:	f6 e0       	ldi	r31, 0x06	; 6
     9aa:	85 83       	std	Z+5, r24	; 0x05
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <setADCInput+0x2e>
	else {PORTB.OUTCLR = PIN1_bm;}
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	e0 e2       	ldi	r30, 0x20	; 32
     9b2:	f6 e0       	ldi	r31, 0x06	; 6
     9b4:	86 83       	std	Z+6, r24	; 0x06
	// set bit A3 to third bit
	if(channel & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     9b6:	22 ff       	sbrs	r18, 2
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <setADCInput+0x3c>
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	e0 e2       	ldi	r30, 0x20	; 32
     9be:	f6 e0       	ldi	r31, 0x06	; 6
     9c0:	85 83       	std	Z+5, r24	; 0x05
     9c2:	08 95       	ret
	else {PORTB.OUTCLR = PIN2_bm;}
     9c4:	84 e0       	ldi	r24, 0x04	; 4
     9c6:	e0 e2       	ldi	r30, 0x20	; 32
     9c8:	f6 e0       	ldi	r31, 0x06	; 6
     9ca:	86 83       	std	Z+6, r24	; 0x06
     9cc:	08 95       	ret

000009ce <SPIInit>:
}


void SPIInit(uint8_t mode) {
	// init SPI SS pin
	PORTC.DIRSET = PIN4_bm;
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	b6 e0       	ldi	r27, 0x06	; 6
     9d2:	20 e1       	ldi	r18, 0x10	; 16
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	2c 93       	st	X, r18
     9d8:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
     9da:	98 e3       	ldi	r25, 0x38	; 56
     9dc:	54 96       	adiw	r26, 0x14	; 20
     9de:	9c 93       	st	X, r25
     9e0:	54 97       	sbiw	r26, 0x14	; 20
	PORTC.OUTSET = PIN4_bm;
     9e2:	15 96       	adiw	r26, 0x05	; 5
     9e4:	2c 93       	st	X, r18
     9e6:	15 97       	sbiw	r26, 0x05	; 5

	// init SPI
	SPIC.CTRL =	SPI_PRESCALER |  // set clock speed
     9e8:	81 65       	ori	r24, 0x51	; 81
     9ea:	e0 ec       	ldi	r30, 0xC0	; 192
     9ec:	f8 e0       	ldi	r31, 0x08	; 8
     9ee:	80 83       	st	Z, r24
	            0x00 |  // set data order msb first
	            SPI_MASTER_bm | // set SPI master
	            mode; // set SPI mode

	// disable SPI Interrupts
	SPIC.INTCTRL = SPI_INTLVL_OFF_gc;
     9f0:	11 82       	std	Z+1, r1	; 0x01

 	// set SPI-MOSI and SPI-SCK as output
	PORTC.DIRSET  = PIN5_bm | PIN7_bm;
     9f2:	80 ea       	ldi	r24, 0xA0	; 160
     9f4:	11 96       	adiw	r26, 0x01	; 1
     9f6:	8c 93       	st	X, r24

	
}
     9f8:	08 95       	ret

000009fa <set_filter>:
 *	filterConfig[2]	Channel 3 and 7 mask
 *	filterConfig[3]	Channel 4 and 8 mask
 *  filterConfig[4:6] Low Pass cutoff 000=>infinite, 001=>32kHz, 010=>6kHz, 100=>600Hz
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
*/
void set_filter(uint8_t filterConfig) {
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	48 2f       	mov	r20, r24
	// hack to get ADC to work
	//filterConfig |= 0x0F;

	// boolean flags for upper/lower channels CS
	uint8_t lowerCS = filterConfig & 0x03; 
     a00:	18 2f       	mov	r17, r24
     a02:	13 70       	andi	r17, 0x03	; 3
	uint8_t upperCS = filterConfig & 0x0C;
     a04:	08 2f       	mov	r16, r24
     a06:	0c 70       	andi	r16, 0x0C	; 12

	// update left and right channel status
	if (filterConfig & (BIT0_bm | BIT2_bm)) channelStatus = 
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	c9 01       	movw	r24, r18
     a0e:	85 70       	andi	r24, 0x05	; 5
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	89 2b       	or	r24, r25
     a14:	49 f0       	breq	.+18     	; 0xa28 <set_filter+0x2e>
     a16:	80 91 91 4d 	lds	r24, 0x4D91
     a1a:	94 2f       	mov	r25, r20
     a1c:	92 95       	swap	r25
     a1e:	9f 70       	andi	r25, 0x0F	; 15
     a20:	80 7f       	andi	r24, 0xF0	; 240
     a22:	98 2b       	or	r25, r24
     a24:	90 93 91 4d 	sts	0x4D91, r25
		(0xF0 & channelStatus) | (filterConfig >> 4);  //right
	if (filterConfig & (BIT1_bm | BIT3_bm)) channelStatus =
     a28:	2a 70       	andi	r18, 0x0A	; 10
     a2a:	30 70       	andi	r19, 0x00	; 0
     a2c:	23 2b       	or	r18, r19
     a2e:	39 f0       	breq	.+14     	; 0xa3e <set_filter+0x44>
     a30:	80 91 91 4d 	lds	r24, 0x4D91
     a34:	40 7f       	andi	r20, 0xF0	; 240
     a36:	8f 70       	andi	r24, 0x0F	; 15
     a38:	84 2b       	or	r24, r20
     a3a:	80 93 91 4d 	sts	0x4D91, r24
		(0xF0 & filterConfig) | (0x0F & channelStatus); //left
		
	SPIInit(SPI_MODE_1_gc);
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>

	
	SPIBuffer[0] = channelStatus;
     a44:	80 91 91 4d 	lds	r24, 0x4D91
     a48:	80 93 81 4d 	sts	0x4D81, r24
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
     a4c:	11 23       	and	r17, r17
     a4e:	21 f0       	breq	.+8      	; 0xa58 <set_filter+0x5e>
	}
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
     a50:	80 e1       	ldi	r24, 0x10	; 16
     a52:	e0 e8       	ldi	r30, 0x80	; 128
     a54:	f6 e0       	ldi	r31, 0x06	; 6
     a56:	86 83       	std	Z+6, r24	; 0x06
	
	SPIBuffer[0] = channelStatus;
	
	// enable appropriate chip select
	if (lowerCS) lowerMuxCS(TRUE);
	if (upperCS) upperMuxCS(TRUE);
     a58:	00 23       	and	r16, r16
     a5a:	21 f0       	breq	.+8      	; 0xa64 <set_filter+0x6a>
	if (write) PORTE.OUTCLR = PIN4_bm;
	else PORTE.OUTSET = PIN4_bm;
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	e0 e4       	ldi	r30, 0x40	; 64
     a60:	f6 e0       	ldi	r31, 0x06	; 6
     a62:	86 83       	std	Z+6, r24	; 0x06

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	e0 e4       	ldi	r30, 0x40	; 64
     a68:	f6 e0       	ldi	r31, 0x06	; 6
     a6a:	86 83       	std	Z+6, r24	; 0x06

	// Send all logic high to ensure that the SDO line on the chip is
	// left in high Z state after SPI tranaction.
	// The t-1 SDI transaction is output on the SDO and the pin left in the configuration.
	// of the last bit
	SPIC.DATA = 0xFF;
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	e0 ec       	ldi	r30, 0xC0	; 192
     a70:	f8 e0       	ldi	r31, 0x08	; 8
     a72:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     a74:	80 91 c2 08 	lds	r24, 0x08C2
     a78:	87 ff       	sbrs	r24, 7
     a7a:	fc cf       	rjmp	.-8      	; 0xa74 <set_filter+0x7a>
	SPIBuffer[12] = SPIC.DATA;
     a7c:	80 91 c3 08 	lds	r24, 0x08C3
     a80:	80 93 8d 4d 	sts	0x4D8D, r24

	SPIC.DATA = SPIBuffer[0];
     a84:	80 91 81 4d 	lds	r24, 0x4D81
     a88:	e0 ec       	ldi	r30, 0xC0	; 192
     a8a:	f8 e0       	ldi	r31, 0x08	; 8
     a8c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
     a8e:	80 91 c2 08 	lds	r24, 0x08C2
     a92:	87 ff       	sbrs	r24, 7
     a94:	fc cf       	rjmp	.-8      	; 0xa8e <set_filter+0x94>
	SPIBuffer[12] = SPIC.DATA;
     a96:	80 91 c3 08 	lds	r24, 0x08C3
     a9a:	80 93 8d 4d 	sts	0x4D8D, r24
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
     a9e:	80 e1       	ldi	r24, 0x10	; 16
     aa0:	e0 e4       	ldi	r30, 0x40	; 64
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	85 83       	std	Z+5, r24	; 0x05
	SPIC.DATA = SPIBuffer[0];
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	SPICS(FALSE);

	if (lowerCS) lowerMuxCS(FALSE);
     aa6:	11 23       	and	r17, r17
     aa8:	19 f0       	breq	.+6      	; 0xab0 <set_filter+0xb6>
}

void lowerMuxCS(uint8_t write) {
	// take IO15(PE4) low to enable write
	if (write) PORTE.OUTCLR = PIN4_bm;
	else PORTE.OUTSET = PIN4_bm;
     aaa:	e0 e8       	ldi	r30, 0x80	; 128
     aac:	f6 e0       	ldi	r31, 0x06	; 6
     aae:	85 83       	std	Z+5, r24	; 0x05
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	SPICS(FALSE);

	if (lowerCS) lowerMuxCS(FALSE);
	if (upperCS) upperMuxCS(FALSE);
     ab0:	00 23       	and	r16, r16
     ab2:	21 f0       	breq	.+8      	; 0xabc <set_filter+0xc2>
	else PORTE.OUTSET = PIN4_bm;
}
void upperMuxCS(uint8_t write) {
	// take IO16(PC
	if (write) PORTC.OUTCLR = PIN1_bm;
	else PORTC.OUTSET = PIN1_bm;
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	e0 e4       	ldi	r30, 0x40	; 64
     ab8:	f6 e0       	ldi	r31, 0x06	; 6
     aba:	85 83       	std	Z+5, r24	; 0x05
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     abc:	e0 e4       	ldi	r30, 0x40	; 64
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     ac4:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     ac8:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     aca:	80 eb       	ldi	r24, 0xB0	; 176
     acc:	82 83       	std	Z+2, r24	; 0x02
	SPICS(FALSE);

	if (lowerCS) lowerMuxCS(FALSE);
	if (upperCS) upperMuxCS(FALSE);
	SPIDisable();
}
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <PortEx_OUTCLR>:
	portExCS(FALSE);
	SPIDisable();
}


void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	18 2f       	mov	r17, r24
     ada:	06 2f       	mov	r16, r22
	SPIInit(PS_SPI_MODE);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     ae2:	80 e1       	ldi	r24, 0x10	; 16
     ae4:	e0 e4       	ldi	r30, 0x40	; 64
     ae6:	f6 e0       	ldi	r31, 0x06	; 6
     ae8:	86 83       	std	Z+6, r24	; 0x06
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     aea:	88 e0       	ldi	r24, 0x08	; 8
     aec:	e0 e0       	ldi	r30, 0x00	; 0
     aee:	f6 e0       	ldi	r31, 0x06	; 6
     af0:	86 83       	std	Z+6, r24	; 0x06
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     af2:	8a e6       	ldi	r24, 0x6A	; 106
     af4:	8a 95       	dec	r24
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <PortEx_OUTCLR+0x20>
     af8:	10 95       	com	r17
void PortEx_OUTCLR(uint8_t pins, uint8_t bank) {
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (bankA_OUT & ~pins);
     afa:	00 23       	and	r16, r16
     afc:	31 f0       	breq	.+12     	; 0xb0a <PortEx_OUTCLR+0x36>
     afe:	80 91 0a 21 	lds	r24, 0x210A
     b02:	18 23       	and	r17, r24
     b04:	10 93 0a 21 	sts	0x210A, r17
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <PortEx_OUTCLR+0x40>
	else bankB_DIR = (uint8_t) (bankB_OUT & ~pins);
     b0a:	80 91 92 4d 	lds	r24, 0x4D92
     b0e:	18 23       	and	r17, r24
     b10:	10 93 ae 4d 	sts	0x4DAE, r17
	
	SPIBuffer[0] = PS_WRITE;
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	80 93 81 4d 	sts	0x4D81, r24
	if(bank) {
     b1a:	00 23       	and	r16, r16
     b1c:	31 f0       	breq	.+12     	; 0xb2a <PortEx_OUTCLR+0x56>
		SPIBuffer[1]=PS_OLATA;
     b1e:	84 e1       	ldi	r24, 0x14	; 20
     b20:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = bankA_OUT;
     b24:	80 91 0a 21 	lds	r24, 0x210A
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <PortEx_OUTCLR+0x60>
	} else {
		SPIBuffer[1]=PS_OLATB;
     b2a:	85 e1       	ldi	r24, 0x15	; 21
     b2c:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = bankB_OUT; 
     b30:	80 91 92 4d 	lds	r24, 0x4D92
     b34:	80 93 83 4d 	sts	0x4D83, r24
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     b3c:	a0 ec       	ldi	r26, 0xC0	; 192
     b3e:	b8 e0       	ldi	r27, 0x08	; 8
     b40:	f9 01       	movw	r30, r18
     b42:	ef 57       	subi	r30, 0x7F	; 127
     b44:	f2 4b       	sbci	r31, 0xB2	; 178
     b46:	80 81       	ld	r24, Z
     b48:	13 96       	adiw	r26, 0x03	; 3
     b4a:	8c 93       	st	X, r24
     b4c:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     b4e:	80 91 c2 08 	lds	r24, 0x08C2
     b52:	87 ff       	sbrs	r24, 7
     b54:	fc cf       	rjmp	.-8      	; 0xb4e <PortEx_OUTCLR+0x7a>
		SPIBuffer[12] = SPIC.DATA;
     b56:	80 91 c3 08 	lds	r24, 0x08C3
     b5a:	80 93 8d 4d 	sts	0x4D8D, r24
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     b62:	23 30       	cpi	r18, 0x03	; 3
     b64:	31 05       	cpc	r19, r1
     b66:	61 f7       	brne	.-40     	; 0xb40 <PortEx_OUTCLR+0x6c>
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
     b68:	a0 e4       	ldi	r26, 0x40	; 64
     b6a:	b6 e0       	ldi	r27, 0x06	; 6
     b6c:	90 e1       	ldi	r25, 0x10	; 16
     b6e:	15 96       	adiw	r26, 0x05	; 5
     b70:	9c 93       	st	X, r25
     b72:	15 97       	sbiw	r26, 0x05	; 5


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
	else {
		PORTA.OUTSET = PIN3_bm;
     b74:	88 e0       	ldi	r24, 0x08	; 8
     b76:	e0 e0       	ldi	r30, 0x00	; 0
     b78:	f6 e0       	ldi	r31, 0x06	; 6
     b7a:	85 83       	std	Z+5, r24	; 0x05
     b7c:	8a e6       	ldi	r24, 0x6A	; 106
     b7e:	8a 95       	dec	r24
     b80:	f1 f7       	brne	.-4      	; 0xb7e <PortEx_OUTCLR+0xaa>
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     b82:	15 96       	adiw	r26, 0x05	; 5
     b84:	9c 93       	st	X, r25
     b86:	15 97       	sbiw	r26, 0x05	; 5
	SPIC.CTRL = 0x00;
     b88:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     b8c:	16 96       	adiw	r26, 0x06	; 6
     b8e:	9c 93       	st	X, r25
     b90:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     b92:	80 eb       	ldi	r24, 0xB0	; 176
     b94:	12 96       	adiw	r26, 0x02	; 2
     b96:	8c 93       	st	X, r24
	}

	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <PortEx_OUTSET>:
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}

void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	18 2f       	mov	r17, r24
     ba4:	06 2f       	mov	r16, r22
	SPIInit(PS_SPI_MODE);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f6 e0       	ldi	r31, 0x06	; 6
     bb2:	86 83       	std	Z+6, r24	; 0x06
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	f6 e0       	ldi	r31, 0x06	; 6
     bba:	86 83       	std	Z+6, r24	; 0x06
     bbc:	8a e6       	ldi	r24, 0x6A	; 106
     bbe:	8a 95       	dec	r24
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <PortEx_OUTSET+0x20>
void PortEx_OUTSET(uint8_t pins, uint8_t bank) {
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_OUT = (uint8_t) (pins | bankA_OUT);
     bc2:	00 23       	and	r16, r16
     bc4:	31 f0       	breq	.+12     	; 0xbd2 <PortEx_OUTSET+0x34>
     bc6:	80 91 0a 21 	lds	r24, 0x210A
     bca:	81 2b       	or	r24, r17
     bcc:	80 93 0a 21 	sts	0x210A, r24
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <PortEx_OUTSET+0x3e>
	else bankB_OUT = (uint8_t) (pins | bankB_OUT);
     bd2:	80 91 92 4d 	lds	r24, 0x4D92
     bd6:	81 2b       	or	r24, r17
     bd8:	80 93 92 4d 	sts	0x4D92, r24
	
	SPIBuffer[0] = PS_WRITE;
     bdc:	80 e4       	ldi	r24, 0x40	; 64
     bde:	80 93 81 4d 	sts	0x4D81, r24
	if(bank) {
     be2:	00 23       	and	r16, r16
     be4:	31 f0       	breq	.+12     	; 0xbf2 <PortEx_OUTSET+0x54>
		SPIBuffer[1]=PS_OLATA;
     be6:	84 e1       	ldi	r24, 0x14	; 20
     be8:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = bankA_OUT;
     bec:	80 91 0a 21 	lds	r24, 0x210A
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <PortEx_OUTSET+0x5e>
	} else {
		SPIBuffer[1]=PS_OLATB;
     bf2:	85 e1       	ldi	r24, 0x15	; 21
     bf4:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = bankB_OUT; 
     bf8:	80 91 92 4d 	lds	r24, 0x4D92
     bfc:	80 93 83 4d 	sts	0x4D83, r24
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     c04:	a0 ec       	ldi	r26, 0xC0	; 192
     c06:	b8 e0       	ldi	r27, 0x08	; 8
     c08:	f9 01       	movw	r30, r18
     c0a:	ef 57       	subi	r30, 0x7F	; 127
     c0c:	f2 4b       	sbci	r31, 0xB2	; 178
     c0e:	80 81       	ld	r24, Z
     c10:	13 96       	adiw	r26, 0x03	; 3
     c12:	8c 93       	st	X, r24
     c14:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     c16:	80 91 c2 08 	lds	r24, 0x08C2
     c1a:	87 ff       	sbrs	r24, 7
     c1c:	fc cf       	rjmp	.-8      	; 0xc16 <PortEx_OUTSET+0x78>
		SPIBuffer[12] = SPIC.DATA;
     c1e:	80 91 c3 08 	lds	r24, 0x08C3
     c22:	80 93 8d 4d 	sts	0x4D8D, r24
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		SPIBuffer[1]=PS_OLATB;
		SPIBuffer[2] = bankB_OUT; 
	}

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     c2a:	23 30       	cpi	r18, 0x03	; 3
     c2c:	31 05       	cpc	r19, r1
     c2e:	61 f7       	brne	.-40     	; 0xc08 <PortEx_OUTSET+0x6a>
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
     c30:	a0 e4       	ldi	r26, 0x40	; 64
     c32:	b6 e0       	ldi	r27, 0x06	; 6
     c34:	90 e1       	ldi	r25, 0x10	; 16
     c36:	15 96       	adiw	r26, 0x05	; 5
     c38:	9c 93       	st	X, r25
     c3a:	15 97       	sbiw	r26, 0x05	; 5


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
	else {
		PORTA.OUTSET = PIN3_bm;
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	e0 e0       	ldi	r30, 0x00	; 0
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	85 83       	std	Z+5, r24	; 0x05
     c44:	8a e6       	ldi	r24, 0x6A	; 106
     c46:	8a 95       	dec	r24
     c48:	f1 f7       	brne	.-4      	; 0xc46 <PortEx_OUTSET+0xa8>
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     c4a:	15 96       	adiw	r26, 0x05	; 5
     c4c:	9c 93       	st	X, r25
     c4e:	15 97       	sbiw	r26, 0x05	; 5
	SPIC.CTRL = 0x00;
     c50:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     c54:	16 96       	adiw	r26, 0x06	; 6
     c56:	9c 93       	st	X, r25
     c58:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     c5a:	80 eb       	ldi	r24, 0xB0	; 176
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	8c 93       	st	X, r24
	}

	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <set_ampGain>:
 *							5	AD8231	U22	(VIN 6)
 *							6	AD8231	U23	(VIN 7)
 *							7	AD8231	U24	(VIN 8)
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 */
void set_ampGain(uint8_t channel, uint8_t gainExponent) {
     c66:	1f 93       	push	r17
     c68:	16 2f       	mov	r17, r22
	// set chip select.  note: AD8231 CS is select on low
	PortEx_OUTCLR((1 << channel), PS_BANKA);
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <set_ampGain+0xe>
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	8a 95       	dec	r24
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <set_ampGain+0xa>
     c78:	82 2f       	mov	r24, r18
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	0e 94 6a 05 	call	0xad4	; 0xad4 <PortEx_OUTCLR>
	//setPortEx(~(1 << channel), PS_BANKA);
	// set gain
	// set bit A0
	if(gainExponent & BIT0_bm) {PORTA.OUTSET = PIN6_bm;}
     c80:	10 ff       	sbrs	r17, 0
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <set_ampGain+0x28>
     c84:	80 e4       	ldi	r24, 0x40	; 64
     c86:	e0 e0       	ldi	r30, 0x00	; 0
     c88:	f6 e0       	ldi	r31, 0x06	; 6
     c8a:	85 83       	std	Z+5, r24	; 0x05
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <set_ampGain+0x30>
	else {PORTA.OUTCLR = PIN6_bm;}
     c8e:	80 e4       	ldi	r24, 0x40	; 64
     c90:	e0 e0       	ldi	r30, 0x00	; 0
     c92:	f6 e0       	ldi	r31, 0x06	; 6
     c94:	86 83       	std	Z+6, r24	; 0x06
	// set bit A1
	if(gainExponent & BIT1_bm) {PORTB.OUTSET = PIN1_bm;}
     c96:	11 ff       	sbrs	r17, 1
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <set_ampGain+0x3e>
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	e0 e2       	ldi	r30, 0x20	; 32
     c9e:	f6 e0       	ldi	r31, 0x06	; 6
     ca0:	85 83       	std	Z+5, r24	; 0x05
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <set_ampGain+0x46>
	else {PORTB.OUTCLR = PIN1_bm;}
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	e0 e2       	ldi	r30, 0x20	; 32
     ca8:	f6 e0       	ldi	r31, 0x06	; 6
     caa:	86 83       	std	Z+6, r24	; 0x06
	// set bit A2
	if(gainExponent & BIT2_bm) {PORTB.OUTSET = PIN2_bm;}
     cac:	12 ff       	sbrs	r17, 2
     cae:	05 c0       	rjmp	.+10     	; 0xcba <set_ampGain+0x54>
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	e0 e2       	ldi	r30, 0x20	; 32
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	85 83       	std	Z+5, r24	; 0x05
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <set_ampGain+0x5c>
	else {PORTB.OUTCLR = PIN2_bm;}
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	e0 e2       	ldi	r30, 0x20	; 32
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	86 83       	std	Z+6, r24	; 0x06
     cc2:	8a e0       	ldi	r24, 0x0A	; 10
     cc4:	8a 95       	dec	r24
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <set_ampGain+0x5e>

	_delay_us(1);

	PortEx_OUTSET(0xFF, PS_BANKA);	// write protect all AD8231 amps
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_OUTSET>
	//setPortEx(0xFF, PS_BANKA);

}
     cd0:	1f 91       	pop	r17
     cd2:	08 95       	ret

00000cd4 <PortEx_DIRCLR>:
}

// 1 in bitmap sets the selected pins to input
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	18 2f       	mov	r17, r24
     cda:	06 2f       	mov	r16, r22
	SPIInit(PS_SPI_MODE);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	e0 e4       	ldi	r30, 0x40	; 64
     ce6:	f6 e0       	ldi	r31, 0x06	; 6
     ce8:	86 83       	std	Z+6, r24	; 0x06
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     cea:	88 e0       	ldi	r24, 0x08	; 8
     cec:	e0 e0       	ldi	r30, 0x00	; 0
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	86 83       	std	Z+6, r24	; 0x06
     cf2:	8a e6       	ldi	r24, 0x6A	; 106
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <PortEx_DIRCLR+0x20>
void PortEx_DIRCLR(uint8_t pins, uint8_t bank) {
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins & ~bankA_DIR);
     cf8:	00 23       	and	r16, r16
     cfa:	39 f0       	breq	.+14     	; 0xd0a <PortEx_DIRCLR+0x36>
     cfc:	80 91 90 4d 	lds	r24, 0x4D90
     d00:	80 95       	com	r24
     d02:	81 23       	and	r24, r17
     d04:	80 93 90 4d 	sts	0x4D90, r24
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <PortEx_DIRCLR+0x42>
	else bankB_DIR = (uint8_t) (pins & ~bankB_DIR);
     d0a:	80 91 ae 4d 	lds	r24, 0x4DAE
     d0e:	80 95       	com	r24
     d10:	81 23       	and	r24, r17
     d12:	80 93 ae 4d 	sts	0x4DAE, r24
	
	SPIBuffer[0] = PS_WRITE;
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	80 93 81 4d 	sts	0x4D81, r24
	if(bank) {
     d1c:	00 23       	and	r16, r16
     d1e:	29 f0       	breq	.+10     	; 0xd2a <PortEx_DIRCLR+0x56>
		SPIBuffer[1]=PS_IODIRA;
     d20:	10 92 82 4d 	sts	0x4D82, r1
		SPIBuffer[2] = ~bankA_DIR; 
     d24:	80 91 90 4d 	lds	r24, 0x4D90
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <PortEx_DIRCLR+0x60>
	} else {
		SPIBuffer[1]=PS_IODIRB;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = ~bankB_DIR;
     d30:	80 91 ae 4d 	lds	r24, 0x4DAE
     d34:	80 95       	com	r24
     d36:	80 93 83 4d 	sts	0x4D83, r24
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     d3e:	a0 ec       	ldi	r26, 0xC0	; 192
     d40:	b8 e0       	ldi	r27, 0x08	; 8
     d42:	f9 01       	movw	r30, r18
     d44:	ef 57       	subi	r30, 0x7F	; 127
     d46:	f2 4b       	sbci	r31, 0xB2	; 178
     d48:	80 81       	ld	r24, Z
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     d50:	80 91 c2 08 	lds	r24, 0x08C2
     d54:	87 ff       	sbrs	r24, 7
     d56:	fc cf       	rjmp	.-8      	; 0xd50 <PortEx_DIRCLR+0x7c>
		SPIBuffer[12] = SPIC.DATA;
     d58:	80 91 c3 08 	lds	r24, 0x08C3
     d5c:	80 93 8d 4d 	sts	0x4D8D, r24
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     d64:	23 30       	cpi	r18, 0x03	; 3
     d66:	31 05       	cpc	r19, r1
     d68:	61 f7       	brne	.-40     	; 0xd42 <PortEx_DIRCLR+0x6e>
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
     d6a:	a0 e4       	ldi	r26, 0x40	; 64
     d6c:	b6 e0       	ldi	r27, 0x06	; 6
     d6e:	90 e1       	ldi	r25, 0x10	; 16
     d70:	15 96       	adiw	r26, 0x05	; 5
     d72:	9c 93       	st	X, r25
     d74:	15 97       	sbiw	r26, 0x05	; 5


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
	else {
		PORTA.OUTSET = PIN3_bm;
     d76:	88 e0       	ldi	r24, 0x08	; 8
     d78:	e0 e0       	ldi	r30, 0x00	; 0
     d7a:	f6 e0       	ldi	r31, 0x06	; 6
     d7c:	85 83       	std	Z+5, r24	; 0x05
     d7e:	8a e6       	ldi	r24, 0x6A	; 106
     d80:	8a 95       	dec	r24
     d82:	f1 f7       	brne	.-4      	; 0xd80 <PortEx_DIRCLR+0xac>
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     d84:	15 96       	adiw	r26, 0x05	; 5
     d86:	9c 93       	st	X, r25
     d88:	15 97       	sbiw	r26, 0x05	; 5
	SPIC.CTRL = 0x00;
     d8a:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     d8e:	16 96       	adiw	r26, 0x06	; 6
     d90:	9c 93       	st	X, r25
     d92:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     d94:	80 eb       	ldi	r24, 0xB0	; 176
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8c 93       	st	X, r24
	}

	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();
}
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <PortEx_DIRSET>:
}

// 1 in bitmap sets the selected pins to output
// Port Expander must be powered on (VDC-2)
// all other pins are unaffected
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	18 2f       	mov	r17, r24
     da6:	06 2f       	mov	r16, r22
	SPIInit(PS_SPI_MODE);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     dae:	80 e1       	ldi	r24, 0x10	; 16
     db0:	e0 e4       	ldi	r30, 0x40	; 64
     db2:	f6 e0       	ldi	r31, 0x06	; 6
     db4:	86 83       	std	Z+6, r24	; 0x06
}



void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
     db6:	88 e0       	ldi	r24, 0x08	; 8
     db8:	e0 e0       	ldi	r30, 0x00	; 0
     dba:	f6 e0       	ldi	r31, 0x06	; 6
     dbc:	86 83       	std	Z+6, r24	; 0x06
     dbe:	8a e6       	ldi	r24, 0x6A	; 106
     dc0:	8a 95       	dec	r24
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <PortEx_DIRSET+0x20>
void PortEx_DIRSET(uint8_t pins, uint8_t bank) {
	SPIInit(PS_SPI_MODE);
	SPICS(TRUE);
	portExCS(TRUE);
	
	if(bank) bankA_DIR = (uint8_t) (pins | bankA_DIR);
     dc4:	00 23       	and	r16, r16
     dc6:	31 f0       	breq	.+12     	; 0xdd4 <PortEx_DIRSET+0x34>
     dc8:	80 91 90 4d 	lds	r24, 0x4D90
     dcc:	81 2b       	or	r24, r17
     dce:	80 93 90 4d 	sts	0x4D90, r24
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <PortEx_DIRSET+0x3e>
	else bankB_DIR = (uint8_t) (pins | bankB_DIR);
     dd4:	80 91 ae 4d 	lds	r24, 0x4DAE
     dd8:	81 2b       	or	r24, r17
     dda:	80 93 ae 4d 	sts	0x4DAE, r24
	
	SPIBuffer[0] = PS_WRITE;
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	80 93 81 4d 	sts	0x4D81, r24
	if(bank) {
     de4:	00 23       	and	r16, r16
     de6:	29 f0       	breq	.+10     	; 0xdf2 <PortEx_DIRSET+0x52>
		SPIBuffer[1]=PS_IODIRA;
     de8:	10 92 82 4d 	sts	0x4D82, r1
		SPIBuffer[2] = ~bankA_DIR; 
     dec:	80 91 90 4d 	lds	r24, 0x4D90
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <PortEx_DIRSET+0x5c>
	} else {
		SPIBuffer[1]=PS_IODIRB;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 82 4d 	sts	0x4D82, r24
		SPIBuffer[2] = ~bankB_DIR;
     df8:	80 91 ae 4d 	lds	r24, 0x4DAE
     dfc:	80 95       	com	r24
     dfe:	80 93 83 4d 	sts	0x4D83, r24
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
		SPIC.DATA = SPIBuffer[bufIndex];
     e06:	a0 ec       	ldi	r26, 0xC0	; 192
     e08:	b8 e0       	ldi	r27, 0x08	; 8
     e0a:	f9 01       	movw	r30, r18
     e0c:	ef 57       	subi	r30, 0x7F	; 127
     e0e:	f2 4b       	sbci	r31, 0xB2	; 178
     e10:	80 81       	ld	r24, Z
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	8c 93       	st	X, r24
     e16:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
     e18:	80 91 c2 08 	lds	r24, 0x08C2
     e1c:	87 ff       	sbrs	r24, 7
     e1e:	fc cf       	rjmp	.-8      	; 0xe18 <PortEx_DIRSET+0x78>
		SPIBuffer[12] = SPIC.DATA;
     e20:	80 91 c3 08 	lds	r24, 0x08C3
     e24:	80 93 8d 4d 	sts	0x4D8D, r24
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		SPIBuffer[1]=PS_IODIRB;
		SPIBuffer[2] = ~bankB_DIR;
	}	

	for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
     e2c:	23 30       	cpi	r18, 0x03	; 3
     e2e:	31 05       	cpc	r19, r1
     e30:	61 f7       	brne	.-40     	; 0xe0a <PortEx_DIRSET+0x6a>
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
     e32:	a0 e4       	ldi	r26, 0x40	; 64
     e34:	b6 e0       	ldi	r27, 0x06	; 6
     e36:	90 e1       	ldi	r25, 0x10	; 16
     e38:	15 96       	adiw	r26, 0x05	; 5
     e3a:	9c 93       	st	X, r25
     e3c:	15 97       	sbiw	r26, 0x05	; 5


void portExCS(uint8_t write) {
	if (write) PORTA.OUTCLR = PIN3_bm;
	else {
		PORTA.OUTSET = PIN3_bm;
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	e0 e0       	ldi	r30, 0x00	; 0
     e42:	f6 e0       	ldi	r31, 0x06	; 6
     e44:	85 83       	std	Z+5, r24	; 0x05
     e46:	8a e6       	ldi	r24, 0x6A	; 106
     e48:	8a 95       	dec	r24
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <PortEx_DIRSET+0xa8>
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     e4c:	15 96       	adiw	r26, 0x05	; 5
     e4e:	9c 93       	st	X, r25
     e50:	15 97       	sbiw	r26, 0x05	; 5
	SPIC.CTRL = 0x00;
     e52:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     e56:	16 96       	adiw	r26, 0x06	; 6
     e58:	9c 93       	st	X, r25
     e5a:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     e5c:	80 eb       	ldi	r24, 0xB0	; 176
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	8c 93       	st	X, r24
	SPICS(FALSE);
	portExCS(FALSE);
	SPIDisable();


}
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <ADCPower>:
	portExCS(FALSE);	
	SPIDisable();
}
*/

void ADCPower(uint8_t on) {
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
	if (on) {
     e70:	88 23       	and	r24, r24
     e72:	09 f4       	brne	.+2      	; 0xe76 <ADCPower+0xe>
     e74:	45 c0       	rjmp	.+138    	; 0xf00 <ADCPower+0x98>
		PORTA.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and HV1/HV2 and A0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	76 e0       	ldi	r23, 0x06	; 6
     e7a:	8e ed       	ldi	r24, 0xDE	; 222
     e7c:	db 01       	movw	r26, r22
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	8c 93       	st	X, r24
		PORTB.DIRSET = PIN1_bm| PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	56 e0       	ldi	r21, 0x06	; 6
     e86:	9e e0       	ldi	r25, 0x0E	; 14
     e88:	ea 01       	movw	r28, r20
     e8a:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIRSET = PIN0_bm | PIN1_bm;// VDCA and VDC-2 and MUX-SYNC1
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f6 e0       	ldi	r31, 0x06	; 6
     e90:	03 e0       	ldi	r16, 0x03	; 3
     e92:	01 83       	std	Z+1, r16	; 0x01
		PORTE.DIRSET = PIN4_bm; // MUX-SYNC2
     e94:	20 e8       	ldi	r18, 0x80	; 128
     e96:	36 e0       	ldi	r19, 0x06	; 6
     e98:	10 e1       	ldi	r17, 0x10	; 16
     e9a:	d9 01       	movw	r26, r18
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	1c 93       	st	X, r17
		PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; // DAC LDAC and CS
     ea0:	a0 ea       	ldi	r26, 0xA0	; 160
     ea2:	b6 e0       	ldi	r27, 0x06	; 6
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	9c 93       	st	X, r25
     ea8:	11 97       	sbiw	r26, 0x01	; 1

		// high signal to write protect
		PORTA.OUTSET = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm;; // portEx-CS
     eaa:	8e e9       	ldi	r24, 0x9E	; 158
     eac:	eb 01       	movw	r28, r22
     eae:	8d 83       	std	Y+5, r24	; 0x05
		PORTB.OUTSET = PIN3_bm; // FRAM-CS
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	ea 01       	movw	r28, r20
     eb4:	8d 83       	std	Y+5, r24	; 0x05
		PORTC.OUTSET = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     eb6:	05 83       	std	Z+5, r16	; 0x05
		PORTE.OUTSET = PIN4_bm; // MUX-SYNC2
     eb8:	e9 01       	movw	r28, r18
     eba:	1d 83       	std	Y+5, r17	; 0x05
		PORTF.OUTSET = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     ebc:	15 96       	adiw	r26, 0x05	; 5
     ebe:	9c 93       	st	X, r25
		channelStatus = 0x00; // POR to zeros		
     ec0:	10 92 91 4d 	sts	0x4D91, r1

		// set SPI-MISO as input and pullup
		PORTC.DIRCLR = PIN6_bm;
     ec4:	80 e4       	ldi	r24, 0x40	; 64
     ec6:	82 83       	std	Z+2, r24	; 0x02
		PORTC.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;		
     ec8:	88 e3       	ldi	r24, 0x38	; 56
     eca:	86 8b       	std	Z+22, r24	; 0x16

		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     ecc:	10 92 92 4d 	sts	0x4D92, r1
     ed0:	80 91 92 4d 	lds	r24, 0x4D92
     ed4:	80 93 ae 4d 	sts	0x4DAE, r24
     ed8:	80 91 ae 4d 	lds	r24, 0x4DAE
     edc:	80 93 0a 21 	sts	0x210A, r24
     ee0:	80 91 0a 21 	lds	r24, 0x210A
     ee4:	80 93 90 4d 	sts	0x4D90, r24
		PortEx_DIRSET(0xFF, PS_BANKA);
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 d0 06 	call	0xda0	; 0xda0 <PortEx_DIRSET>
		PortEx_OUTSET(0xFF, PS_BANKA);  //write protect IN-AMP 1 thru 8
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_OUTSET>
		//setPortEx(0xFF, PS_BANKA);
		set_filter(0xFF);  // set filters intitially to ensure data out pulled high
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	0e 94 fd 04 	call	0x9fa	; 0x9fa <set_filter>
     efe:	35 c0       	rjmp	.+106    	; 0xf6a <ADCPower+0x102>

	} else {
		// low signal for low power
		PORTA.OUTCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // portEx-CS and A0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	76 e0       	ldi	r23, 0x06	; 6
     f04:	0e ed       	ldi	r16, 0xDE	; 222
     f06:	fb 01       	movw	r30, r22
     f08:	06 83       	std	Z+6, r16	; 0x06
		PORTB.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm; // FRAM-CS and A1/A2
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	56 e0       	ldi	r21, 0x06	; 6
     f0e:	2e e0       	ldi	r18, 0x0E	; 14
     f10:	da 01       	movw	r26, r20
     f12:	16 96       	adiw	r26, 0x06	; 6
     f14:	2c 93       	st	X, r18
		PORTC.OUTCLR = PIN0_bm | PIN1_bm; // VDCA and VDC-2 on and MUX-SYNC1
     f16:	e0 e4       	ldi	r30, 0x40	; 64
     f18:	f6 e0       	ldi	r31, 0x06	; 6
     f1a:	13 e0       	ldi	r17, 0x03	; 3
     f1c:	16 83       	std	Z+6, r17	; 0x06
		PORTE.OUTCLR = PIN4_bm; // MUX-SYNC2
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	96 e0       	ldi	r25, 0x06	; 6
     f22:	30 e1       	ldi	r19, 0x10	; 16
     f24:	ec 01       	movw	r28, r24
     f26:	3e 83       	std	Y+6, r19	; 0x06
		PORTF.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm;  // ADC-CS and DAC write/latch
     f28:	a0 ea       	ldi	r26, 0xA0	; 160
     f2a:	b6 e0       	ldi	r27, 0x06	; 6
     f2c:	16 96       	adiw	r26, 0x06	; 6
     f2e:	2c 93       	st	X, r18
     f30:	16 97       	sbiw	r26, 0x06	; 6


		PORTA.DIRCLR = PIN1_bm| PIN2_bm | PIN3_bm | PIN4_bm | PIN7_bm | PIN6_bm;
     f32:	eb 01       	movw	r28, r22
     f34:	0a 83       	std	Y+2, r16	; 0x02
		PORTB.DIRCLR = PIN1_bm | PIN2_bm| PIN3_bm;
     f36:	ea 01       	movw	r28, r20
     f38:	2a 83       	std	Y+2, r18	; 0x02
		PORTC.DIRCLR = PIN0_bm | PIN1_bm;
     f3a:	12 83       	std	Z+2, r17	; 0x02
		PORTE.DIRCLR = PIN4_bm;
     f3c:	ec 01       	movw	r28, r24
     f3e:	3a 83       	std	Y+2, r19	; 0x02
		PORTF.DIRCLR = PIN1_bm | PIN2_bm | PIN3_bm;
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	2c 93       	st	X, r18
		
		// set SPI-MISO as input and clear pullup
		PORTC.DIRCLR = PIN6_bm;
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	82 83       	std	Z+2, r24	; 0x02
		PORTC.PIN6CTRL = PORT_OPC_TOTEM_gc;
     f48:	16 8a       	std	Z+22, r1	; 0x16
		
		bankA_DIR = bankA_OUT = bankB_DIR = bankB_OUT = 0x00; // all pins input on reset
     f4a:	10 92 92 4d 	sts	0x4D92, r1
     f4e:	80 91 92 4d 	lds	r24, 0x4D92
     f52:	80 93 ae 4d 	sts	0x4DAE, r24
     f56:	80 91 ae 4d 	lds	r24, 0x4DAE
     f5a:	80 93 0a 21 	sts	0x210A, r24
     f5e:	80 91 0a 21 	lds	r24, 0x210A
     f62:	80 93 90 4d 	sts	0x4D90, r24
		channelStatus = 0x00;
     f66:	10 92 91 4d 	sts	0x4D91, r1
		
	}
}
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <SPICS>:

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     f74:	88 23       	and	r24, r24
     f76:	29 f0       	breq	.+10     	; 0xf82 <SPICS+0xe>
     f78:	80 e1       	ldi	r24, 0x10	; 16
     f7a:	e0 e4       	ldi	r30, 0x40	; 64
     f7c:	f6 e0       	ldi	r31, 0x06	; 6
     f7e:	86 83       	std	Z+6, r24	; 0x06
     f80:	08 95       	ret
	else {
		PORTC.OUTSET = PIN4_bm;
     f82:	80 e1       	ldi	r24, 0x10	; 16
     f84:	e0 e4       	ldi	r30, 0x40	; 64
     f86:	f6 e0       	ldi	r31, 0x06	; 6
     f88:	85 83       	std	Z+5, r24	; 0x05
     f8a:	08 95       	ret

00000f8c <SPIDisable>:
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
     f8c:	e0 e4       	ldi	r30, 0x40	; 64
     f8e:	f6 e0       	ldi	r31, 0x06	; 6
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
     f94:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
     f98:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
     f9a:	80 eb       	ldi	r24, 0xB0	; 176
     f9c:	82 83       	std	Z+2, r24	; 0x02

}
     f9e:	08 95       	ret

00000fa0 <__vector_104>:
	*maxV = (int32_t) (max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
	*minV = (int32_t) (min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);

}

ISR(PORTF_INT0_vect) {
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	0b b6       	in	r0, 0x3b	; 59
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
	// skip first samples because cannot perform recommended reset
	if (discardCount < ADC_DISCARD) {
     fbe:	80 91 7e 3d 	lds	r24, 0x3D7E
     fc2:	87 fd       	sbrc	r24, 7
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <__vector_104+0x32>
		discardCount++;
     fc6:	80 91 7e 3d 	lds	r24, 0x3D7E
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 7e 3d 	sts	0x3D7E, r24
     fd0:	73 c0       	rjmp	.+230    	; 0x10b8 <__vector_104+0x118>

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
     fd2:	80 e1       	ldi	r24, 0x10	; 16
     fd4:	e0 e4       	ldi	r30, 0x40	; 64
     fd6:	f6 e0       	ldi	r31, 0x06	; 6
     fd8:	86 83       	std	Z+6, r24	; 0x06
	if (discardCount < ADC_DISCARD) {
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	e0 ea       	ldi	r30, 0xA0	; 160
     fde:	f6 e0       	ldi	r31, 0x06	; 6
     fe0:	86 83       	std	Z+6, r24	; 0x06
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
     fe6:	a0 ec       	ldi	r26, 0xC0	; 192
     fe8:	b8 e0       	ldi	r27, 0x08	; 8
     fea:	9a ea       	ldi	r25, 0xAA	; 170
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	9c 93       	st	X, r25
     ff0:	13 97       	sbiw	r26, 0x03	; 3
			while(!(SPIC.STATUS & SPI_IF_bm));
     ff2:	80 91 c2 08 	lds	r24, 0x08C2
     ff6:	87 ff       	sbrs	r24, 7
     ff8:	fc cf       	rjmp	.-8      	; 0xff2 <__vector_104+0x52>
			SPIBuffer[bufIndex] = SPIC.DATA;
     ffa:	80 91 c3 08 	lds	r24, 0x08C3
     ffe:	f9 01       	movw	r30, r18
    1000:	ef 57       	subi	r30, 0x7F	; 127
    1002:	f2 4b       	sbci	r31, 0xB2	; 178
    1004:	80 83       	st	Z, r24
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
		discardCount++;
	} else { 
		// collect data from offchip ADC
		SPICS(TRUE); // CS SPI-SS
		PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
		for(uint8_t bufIndex = 0; bufIndex < 3; bufIndex++) {
    100a:	23 30       	cpi	r18, 0x03	; 3
    100c:	31 05       	cpc	r19, r1
    100e:	71 f7       	brne	.-36     	; 0xfec <__vector_104+0x4c>
			SPIC.DATA = 0xAA; // dummy data to start SPI clock
			while(!(SPIC.STATUS & SPI_IF_bm));
			SPIBuffer[bufIndex] = SPIC.DATA;
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	e0 ea       	ldi	r30, 0xA0	; 160
    1014:	f6 e0       	ldi	r31, 0x06	; 6
    1016:	85 83       	std	Z+5, r24	; 0x05
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	e0 e4       	ldi	r30, 0x40	; 64
    101c:	f6 e0       	ldi	r31, 0x06	; 6
    101e:	85 83       	std	Z+5, r24	; 0x05
		}
		PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
		SPICS(FALSE);

		// create 32 bits from SPIBuffer[0:2] with sign extension of SPIBuffer[0][7]
		if(SPIBuffer[0] & BIT7_bm) *(((uint8_t*)&data24Bit[sampleCount]) + 0) = 0xFF; // sign extension if negative
    1020:	80 91 81 4d 	lds	r24, 0x4D81
    1024:	87 ff       	sbrs	r24, 7
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <__vector_104+0xa2>
    1028:	e0 91 8e 4d 	lds	r30, 0x4D8E
    102c:	f0 91 8f 4d 	lds	r31, 0x4D8F
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	e1 58       	subi	r30, 0x81	; 129
    103a:	f2 4c       	sbci	r31, 0xC2	; 194
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	80 83       	st	Z, r24
    1040:	0b c0       	rjmp	.+22     	; 0x1058 <__vector_104+0xb8>
		else *(((uint8_t*)&data24Bit[sampleCount]) + 0) = 0x00;
    1042:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1046:	f0 91 8f 4d 	lds	r31, 0x4D8F
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	e1 58       	subi	r30, 0x81	; 129
    1054:	f2 4c       	sbci	r31, 0xC2	; 194
    1056:	10 82       	st	Z, r1
	
		*(((uint8_t*)&data24Bit[sampleCount]) + 2) = SPIBuffer[0];
    1058:	e0 91 8e 4d 	lds	r30, 0x4D8E
    105c:	f0 91 8f 4d 	lds	r31, 0x4D8F
    1060:	80 91 81 4d 	lds	r24, 0x4D81
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	ef 57       	subi	r30, 0x7F	; 127
    106e:	f2 4c       	sbci	r31, 0xC2	; 194
    1070:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 1) = SPIBuffer[1];
    1072:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1076:	f0 91 8f 4d 	lds	r31, 0x4D8F
    107a:	80 91 82 4d 	lds	r24, 0x4D82
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e0 58       	subi	r30, 0x80	; 128
    1088:	f2 4c       	sbci	r31, 0xC2	; 194
    108a:	80 83       	st	Z, r24
		*(((uint8_t*)&data24Bit[sampleCount]) + 0) = SPIBuffer[2];
    108c:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1090:	f0 91 8f 4d 	lds	r31, 0x4D8F
    1094:	80 91 83 4d 	lds	r24, 0x4D83
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	e1 58       	subi	r30, 0x81	; 129
    10a2:	f2 4c       	sbci	r31, 0xC2	; 194
    10a4:	80 83       	st	Z, r24

		sampleCount++;
    10a6:	80 91 8e 4d 	lds	r24, 0x4D8E
    10aa:	90 91 8f 4d 	lds	r25, 0x4D8F
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	80 93 8e 4d 	sts	0x4D8E, r24
    10b4:	90 93 8f 4d 	sts	0x4D8F, r25
	}
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <ACC_DCPassEnable>:

// Enable DC Pass for acc
// Pull PIO27 high to enable
void ACC_DCPassEnable(uint8_t enable) {
	if (enable) {
    10d6:	88 23       	and	r24, r24
    10d8:	49 f0       	breq	.+18     	; 0x10ec <ACC_DCPassEnable+0x16>
		PortEx_DIRSET(BIT5_bm, PS_BANKB);
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	0e 94 d0 06 	call	0xda0	; 0xda0 <PortEx_DIRSET>
		PortEx_OUTSET(BIT5_bm, PS_BANKB);
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_OUTSET>
    10ea:	08 95       	ret
		//setPortEx(BIT5_bm, PS_BANKB);
	} else {
		PortEx_DIRCLR(BIT5_bm, PS_BANKB);
    10ec:	80 e2       	ldi	r24, 0x20	; 32
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <PortEx_DIRCLR>
    10f4:	08 95       	ret

000010f6 <CO_collectADC>:
 *	filterConfig[7] High Pass cutoff 0=>2Hz, 1=>0Hz 
 *  \param gainExponent		Sets gain to 2^gainExponent[0:2].
 *  \param spsExponent Sets samples per second = 2^spsExponent
*/
void CO_collectADC(uint8_t channel, uint8_t filterConfig, int32_t *avgV,
		int32_t *minV, int32_t *maxV, uint8_t gainExponent, uint8_t spsExponent) {
    10f6:	2f 92       	push	r2
    10f8:	3f 92       	push	r3
    10fa:	4f 92       	push	r4
    10fc:	5f 92       	push	r5
    10fe:	6f 92       	push	r6
    1100:	7f 92       	push	r7
    1102:	8f 92       	push	r8
    1104:	9f 92       	push	r9
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	62 97       	sbiw	r28, 0x12	; 18
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	d8 2e       	mov	r13, r24
    1126:	f6 2e       	mov	r15, r22
    1128:	49 8b       	std	Y+17, r20	; 0x11
    112a:	5a 8b       	std	Y+18, r21	; 0x12
    112c:	29 83       	std	Y+1, r18	; 0x01
    112e:	3a 83       	std	Y+2, r19	; 0x02
    1130:	18 01       	movw	r2, r16
	int64_t min = ADC_MAX;
	int64_t max = -ADC_MAX;
	uint16_t period;
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gainExponent);
    1138:	8d 2d       	mov	r24, r13
    113a:	6e 2d       	mov	r22, r14
    113c:	0e 94 33 06 	call	0xc66	; 0xc66 <set_ampGain>
	set_filter(filterConfig);
    1140:	8f 2d       	mov	r24, r15
    1142:	0e 94 fd 04 	call	0x9fa	; 0x9fa <set_filter>

	// if acc channel then enable DC Pass 
	// it is assumedt that if not using high frequency acc specific function then 
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
    1146:	8d 2d       	mov	r24, r13
    1148:	85 50       	subi	r24, 0x05	; 5
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	18 f4       	brcc	.+6      	; 0x1154 <CO_collectADC+0x5e>
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ACC_DCPassEnable>
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
    1154:	e0 e0       	ldi	r30, 0x00	; 0
    1156:	f6 e0       	ldi	r31, 0x06	; 6
    1158:	10 e2       	ldi	r17, 0x20	; 32
    115a:	11 83       	std	Z+1, r17	; 0x01
		PORTA.OUTSET = PIN5_bm;
    115c:	15 83       	std	Z+5, r17	; 0x05
	// DC Pass is wanted.
	if ((channel == ADC_CH_6_gc) ||	(channel == ADC_CH_7_gc) || 
		(channel == ADC_CH_8_gc)) ACC_DCPassEnable(TRUE);

	enableADCMUX(TRUE);
	setADCInput(channel);
    115e:	8d 2d       	mov	r24, r13
    1160:	0e 94 c4 04 	call	0x988	; 0x988 <setADCInput>
	SPIInit(SPI_MODE_1_gc);
    1164:	84 e0       	ldi	r24, 0x04	; 4
    1166:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    116a:	84 e5       	ldi	r24, 0x54	; 84
    116c:	80 93 c0 08 	sts	0x08C0, r24
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.DIRCLR = PIN0_bm;
    1170:	e0 ea       	ldi	r30, 0xA0	; 160
    1172:	f6 e0       	ldi	r31, 0x06	; 6
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.INT0MASK = PIN0_bm;
    117c:	92 87       	std	Z+10, r25	; 0x0a
	PORTF.INTCTRL = PORT_INT0LVL_LO_gc;
    117e:	91 87       	std	Z+9, r25	; 0x09

	// Configure clock for AD7767 MCLK for desired sample frequency
	// f_samples = f_MCLK / 16
	// f_MCLK = f_peripheral(2^25Hz) / (f_period + 1Hz)
	// Set IO14 (PE5) to output
	PORTE.DIRSET = PIN5_bm;
    1180:	e0 e8       	ldi	r30, 0x80	; 128
    1182:	f6 e0       	ldi	r31, 0x06	; 6
    1184:	11 83       	std	Z+1, r17	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1186:	e0 e4       	ldi	r30, 0x40	; 64
    1188:	fa e0       	ldi	r31, 0x0A	; 10
    118a:	83 e2       	ldi	r24, 0x23	; 35
    118c:	81 83       	std	Z+1, r24	; 0x01
	// set period
	period = (1 << (21 - spsExponent)) - 1;
    118e:	25 e1       	ldi	r18, 0x15	; 21
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	2c 19       	sub	r18, r12
    1194:	31 09       	sbc	r19, r1
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <CO_collectADC+0xaa>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	2a 95       	dec	r18
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <CO_collectADC+0xa6>
    11a4:	01 97       	sbiw	r24, 0x01	; 1
	TCE1.PER = period;
    11a6:	86 a3       	std	Z+38, r24	; 0x26
    11a8:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CCBBUF = period / 2;
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	82 af       	std	Z+58, r24	; 0x3a
    11b0:	93 af       	std	Z+59, r25	; 0x3b
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    11b2:	80 91 40 0a 	lds	r24, 0x0A40
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	80 93 40 0a 	sts	0x0A40, r24
	
	// Enable interrupts.
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
    11be:	80 91 a2 00 	lds	r24, 0x00A2
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	e0 ea       	ldi	r30, 0xA0	; 160
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	82 83       	std	Z+2, r24	; 0x02
	sei();
    11ca:	78 94       	sei

	sampleCount = 0;
    11cc:	10 92 8e 4d 	sts	0x4D8E, r1
    11d0:	10 92 8f 4d 	sts	0x4D8F, r1
	discardCount = 0;
    11d4:	10 92 7e 3d 	sts	0x3D7E, r1
	
	// wait for ADC to collect samples
	while(sampleCount < NUM_SAMPLES);
    11d8:	80 91 8e 4d 	lds	r24, 0x4D8E
    11dc:	90 91 8f 4d 	lds	r25, 0x4D8F
    11e0:	80 50       	subi	r24, 0x00	; 0
    11e2:	94 40       	sbci	r25, 0x04	; 4
    11e4:	c8 f3       	brcs	.-14     	; 0x11d8 <CO_collectADC+0xe2>

	// turn off timer and interupts
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    11e6:	80 91 40 0a 	lds	r24, 0x0A40
    11ea:	80 7f       	andi	r24, 0xF0	; 240
    11ec:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
    11f0:	80 91 a2 00 	lds	r24, 0x00A2
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	e0 ea       	ldi	r30, 0xA0	; 160
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	82 83       	std	Z+2, r24	; 0x02
	cli();
    11fc:	f8 94       	cli
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    11fe:	e0 e4       	ldi	r30, 0x40	; 64
    1200:	f6 e0       	ldi	r31, 0x06	; 6
    1202:	80 e1       	ldi	r24, 0x10	; 16
    1204:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    1206:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    120a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    120c:	80 eb       	ldi	r24, 0xB0	; 176
    120e:	82 83       	std	Z+2, r24	; 0x02
void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
		PORTA.OUTSET = PIN5_bm;
	} else {
		PORTA.OUTCLR = PIN5_bm;
    1210:	e0 e0       	ldi	r30, 0x00	; 0
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    1218:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL &= ~PMIC_LOLVLEN_bm;	
	cli();

	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    1220:	10 92 8e 4d 	sts	0x4D8E, r1
    1224:	10 92 8f 4d 	sts	0x4D8F, r1
    1228:	cc 24       	eor	r12, r12
    122a:	bb 24       	eor	r11, r11
    122c:	aa 24       	eor	r10, r10
    122e:	88 24       	eor	r8, r8
    1230:	77 24       	eor	r7, r7
    1232:	66 24       	eor	r6, r6
    1234:	55 24       	eor	r5, r5
    1236:	dd 24       	eor	r13, r13
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	8a 87       	std	Y+10, r24	; 0x0a
    123c:	8b 87       	std	Y+11, r24	; 0x0b
    123e:	9f e7       	ldi	r25, 0x7F	; 127
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	1d 86       	std	Y+13, r1	; 0x0d
    1244:	1e 86       	std	Y+14, r1	; 0x0e
    1246:	1f 86       	std	Y+15, r1	; 0x0f
    1248:	44 24       	eor	r4, r4
    124a:	18 8a       	std	Y+16, r1	; 0x10
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	eb 83       	std	Y+3, r30	; 0x03
    1250:	1c 82       	std	Y+4, r1	; 0x04
    1252:	f0 e8       	ldi	r31, 0x80	; 128
    1254:	fd 83       	std	Y+5, r31	; 0x05
    1256:	8e 83       	std	Y+6, r24	; 0x06
    1258:	8f 83       	std	Y+7, r24	; 0x07
    125a:	88 87       	std	Y+8, r24	; 0x08
    125c:	89 87       	std	Y+9, r24	; 0x09
    125e:	99 24       	eor	r9, r9
    1260:	9a 94       	dec	r9
    1262:	2d c1       	rjmp	.+602    	; 0x14be <CO_collectADC+0x3c8>
		sum += data24Bit[sampleCount];
    1264:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1268:	f0 91 8f 4d 	lds	r31, 0x4D8F
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e1 58       	subi	r30, 0x81	; 129
    1276:	f2 4c       	sbci	r31, 0xC2	; 194
    1278:	e0 80       	ld	r14, Z
    127a:	f1 80       	ldd	r15, Z+1	; 0x01
    127c:	02 81       	ldd	r16, Z+2	; 0x02
    127e:	13 81       	ldd	r17, Z+3	; 0x03
		if (max < data24Bit[sampleCount]) { max = data24Bit[sampleCount];}
    1280:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1284:	f0 91 8f 4d 	lds	r31, 0x4D8F
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	e1 58       	subi	r30, 0x81	; 129
    1292:	f2 4c       	sbci	r31, 0xC2	; 194
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	a2 81       	ldd	r26, Z+2	; 0x02
    129a:	b3 81       	ldd	r27, Z+3	; 0x03
    129c:	58 2f       	mov	r21, r24
    129e:	49 2f       	mov	r20, r25
    12a0:	3a 2f       	mov	r19, r26
    12a2:	2b 2f       	mov	r18, r27
    12a4:	bb 0f       	add	r27, r27
    12a6:	88 0b       	sbc	r24, r24
    12a8:	98 2f       	mov	r25, r24
    12aa:	dc 01       	movw	r26, r24
    12ac:	98 16       	cp	r9, r24
    12ae:	1c f1       	brlt	.+70     	; 0x12f6 <CO_collectADC+0x200>
    12b0:	89 15       	cp	r24, r9
    12b2:	e9 f5       	brne	.+122    	; 0x132e <CO_collectADC+0x238>
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	89 15       	cp	r24, r9
    12b8:	f0 f0       	brcs	.+60     	; 0x12f6 <CO_collectADC+0x200>
    12ba:	98 16       	cp	r9, r24
    12bc:	c1 f5       	brne	.+112    	; 0x132e <CO_collectADC+0x238>
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	99 15       	cp	r25, r9
    12c2:	c8 f0       	brcs	.+50     	; 0x12f6 <CO_collectADC+0x200>
    12c4:	99 16       	cp	r9, r25
    12c6:	99 f5       	brne	.+102    	; 0x132e <CO_collectADC+0x238>
    12c8:	ef 81       	ldd	r30, Y+7	; 0x07
    12ca:	e9 15       	cp	r30, r9
    12cc:	a0 f0       	brcs	.+40     	; 0x12f6 <CO_collectADC+0x200>
    12ce:	9e 16       	cp	r9, r30
    12d0:	71 f5       	brne	.+92     	; 0x132e <CO_collectADC+0x238>
    12d2:	fe 81       	ldd	r31, Y+6	; 0x06
    12d4:	f2 17       	cp	r31, r18
    12d6:	78 f0       	brcs	.+30     	; 0x12f6 <CO_collectADC+0x200>
    12d8:	2f 17       	cp	r18, r31
    12da:	49 f5       	brne	.+82     	; 0x132e <CO_collectADC+0x238>
    12dc:	2d 81       	ldd	r18, Y+5	; 0x05
    12de:	23 17       	cp	r18, r19
    12e0:	50 f0       	brcs	.+20     	; 0x12f6 <CO_collectADC+0x200>
    12e2:	32 17       	cp	r19, r18
    12e4:	21 f5       	brne	.+72     	; 0x132e <CO_collectADC+0x238>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	84 17       	cp	r24, r20
    12ea:	28 f0       	brcs	.+10     	; 0x12f6 <CO_collectADC+0x200>
    12ec:	48 17       	cp	r20, r24
    12ee:	f9 f4       	brne	.+62     	; 0x132e <CO_collectADC+0x238>
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	95 17       	cp	r25, r21
    12f4:	e0 f4       	brcc	.+56     	; 0x132e <CO_collectADC+0x238>
    12f6:	e0 91 8e 4d 	lds	r30, 0x4D8E
    12fa:	f0 91 8f 4d 	lds	r31, 0x4D8F
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	e1 58       	subi	r30, 0x81	; 129
    1308:	f2 4c       	sbci	r31, 0xC2	; 194
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	a2 81       	ldd	r26, Z+2	; 0x02
    1310:	b3 81       	ldd	r27, Z+3	; 0x03
    1312:	9c 01       	movw	r18, r24
    1314:	ad 01       	movw	r20, r26
    1316:	55 0f       	add	r21, r21
    1318:	22 0b       	sbc	r18, r18
    131a:	32 2f       	mov	r19, r18
    131c:	a9 01       	movw	r20, r18
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	ad 83       	std	Y+5, r26	; 0x05
    1324:	be 83       	std	Y+6, r27	; 0x06
    1326:	2f 83       	std	Y+7, r18	; 0x07
    1328:	28 87       	std	Y+8, r18	; 0x08
    132a:	29 87       	std	Y+9, r18	; 0x09
    132c:	92 2e       	mov	r9, r18
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
    132e:	e0 91 8e 4d 	lds	r30, 0x4D8E
    1332:	f0 91 8f 4d 	lds	r31, 0x4D8F
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	e1 58       	subi	r30, 0x81	; 129
    1340:	f2 4c       	sbci	r31, 0xC2	; 194
    1342:	80 81       	ld	r24, Z
    1344:	91 81       	ldd	r25, Z+1	; 0x01
    1346:	a2 81       	ldd	r26, Z+2	; 0x02
    1348:	b3 81       	ldd	r27, Z+3	; 0x03
    134a:	58 2f       	mov	r21, r24
    134c:	49 2f       	mov	r20, r25
    134e:	3a 2f       	mov	r19, r26
    1350:	2b 2f       	mov	r18, r27
    1352:	bb 0f       	add	r27, r27
    1354:	88 0b       	sbc	r24, r24
    1356:	98 2f       	mov	r25, r24
    1358:	dc 01       	movw	r26, r24
    135a:	e8 89       	ldd	r30, Y+16	; 0x10
    135c:	8e 17       	cp	r24, r30
    135e:	14 f1       	brlt	.+68     	; 0x13a4 <CO_collectADC+0x2ae>
    1360:	e8 17       	cp	r30, r24
    1362:	e1 f5       	brne	.+120    	; 0x13dc <CO_collectADC+0x2e6>
    1364:	e4 15       	cp	r30, r4
    1366:	f0 f0       	brcs	.+60     	; 0x13a4 <CO_collectADC+0x2ae>
    1368:	4e 16       	cp	r4, r30
    136a:	c1 f5       	brne	.+112    	; 0x13dc <CO_collectADC+0x2e6>
    136c:	ff 85       	ldd	r31, Y+15	; 0x0f
    136e:	4f 16       	cp	r4, r31
    1370:	c8 f0       	brcs	.+50     	; 0x13a4 <CO_collectADC+0x2ae>
    1372:	f4 15       	cp	r31, r4
    1374:	99 f5       	brne	.+102    	; 0x13dc <CO_collectADC+0x2e6>
    1376:	8e 85       	ldd	r24, Y+14	; 0x0e
    1378:	f8 17       	cp	r31, r24
    137a:	a0 f0       	brcs	.+40     	; 0x13a4 <CO_collectADC+0x2ae>
    137c:	8f 17       	cp	r24, r31
    137e:	71 f5       	brne	.+92     	; 0x13dc <CO_collectADC+0x2e6>
    1380:	9d 85       	ldd	r25, Y+13	; 0x0d
    1382:	29 17       	cp	r18, r25
    1384:	78 f0       	brcs	.+30     	; 0x13a4 <CO_collectADC+0x2ae>
    1386:	92 17       	cp	r25, r18
    1388:	49 f5       	brne	.+82     	; 0x13dc <CO_collectADC+0x2e6>
    138a:	ec 85       	ldd	r30, Y+12	; 0x0c
    138c:	3e 17       	cp	r19, r30
    138e:	50 f0       	brcs	.+20     	; 0x13a4 <CO_collectADC+0x2ae>
    1390:	e3 17       	cp	r30, r19
    1392:	21 f5       	brne	.+72     	; 0x13dc <CO_collectADC+0x2e6>
    1394:	fb 85       	ldd	r31, Y+11	; 0x0b
    1396:	4f 17       	cp	r20, r31
    1398:	28 f0       	brcs	.+10     	; 0x13a4 <CO_collectADC+0x2ae>
    139a:	f4 17       	cp	r31, r20
    139c:	f9 f4       	brne	.+62     	; 0x13dc <CO_collectADC+0x2e6>
    139e:	2a 85       	ldd	r18, Y+10	; 0x0a
    13a0:	52 17       	cp	r21, r18
    13a2:	e0 f4       	brcc	.+56     	; 0x13dc <CO_collectADC+0x2e6>
    13a4:	e0 91 8e 4d 	lds	r30, 0x4D8E
    13a8:	f0 91 8f 4d 	lds	r31, 0x4D8F
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	e1 58       	subi	r30, 0x81	; 129
    13b6:	f2 4c       	sbci	r31, 0xC2	; 194
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	a2 81       	ldd	r26, Z+2	; 0x02
    13be:	b3 81       	ldd	r27, Z+3	; 0x03
    13c0:	9c 01       	movw	r18, r24
    13c2:	ad 01       	movw	r20, r26
    13c4:	55 0f       	add	r21, r21
    13c6:	22 0b       	sbc	r18, r18
    13c8:	32 2f       	mov	r19, r18
    13ca:	a9 01       	movw	r20, r18
    13cc:	8a 87       	std	Y+10, r24	; 0x0a
    13ce:	9b 87       	std	Y+11, r25	; 0x0b
    13d0:	ac 87       	std	Y+12, r26	; 0x0c
    13d2:	bd 87       	std	Y+13, r27	; 0x0d
    13d4:	2e 87       	std	Y+14, r18	; 0x0e
    13d6:	2f 87       	std	Y+15, r18	; 0x0f
    13d8:	42 2e       	mov	r4, r18
    13da:	28 8b       	std	Y+16, r18	; 0x10
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
		sum += data24Bit[sampleCount];
    13dc:	d8 01       	movw	r26, r16
    13de:	c7 01       	movw	r24, r14
    13e0:	bb 0f       	add	r27, r27
    13e2:	88 0b       	sbc	r24, r24
    13e4:	98 2f       	mov	r25, r24
    13e6:	dc 01       	movw	r26, r24
    13e8:	2f 2d       	mov	r18, r15
    13ea:	50 2f       	mov	r21, r16
    13ec:	61 2f       	mov	r22, r17
    13ee:	98 2f       	mov	r25, r24
    13f0:	f8 2f       	mov	r31, r24
    13f2:	a8 2f       	mov	r26, r24
    13f4:	b8 2f       	mov	r27, r24
    13f6:	ec 2d       	mov	r30, r12
    13f8:	ee 0d       	add	r30, r14
    13fa:	31 e0       	ldi	r19, 0x01	; 1
    13fc:	ec 15       	cp	r30, r12
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <CO_collectADC+0x30c>
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	2b 0d       	add	r18, r11
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	2b 15       	cp	r18, r11
    1408:	08 f0       	brcs	.+2      	; 0x140c <CO_collectADC+0x316>
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	03 2f       	mov	r16, r19
    140e:	02 0f       	add	r16, r18
    1410:	31 e0       	ldi	r19, 0x01	; 1
    1412:	02 17       	cp	r16, r18
    1414:	08 f0       	brcs	.+2      	; 0x1418 <CO_collectADC+0x322>
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	43 2b       	or	r20, r19
    141a:	2a 2d       	mov	r18, r10
    141c:	25 0f       	add	r18, r21
    141e:	51 e0       	ldi	r21, 0x01	; 1
    1420:	2a 15       	cp	r18, r10
    1422:	08 f0       	brcs	.+2      	; 0x1426 <CO_collectADC+0x330>
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	14 2f       	mov	r17, r20
    1428:	12 0f       	add	r17, r18
    142a:	31 e0       	ldi	r19, 0x01	; 1
    142c:	12 17       	cp	r17, r18
    142e:	08 f0       	brcs	.+2      	; 0x1432 <CO_collectADC+0x33c>
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	53 2b       	or	r21, r19
    1434:	28 2d       	mov	r18, r8
    1436:	26 0f       	add	r18, r22
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	28 15       	cp	r18, r8
    143c:	08 f0       	brcs	.+2      	; 0x1440 <CO_collectADC+0x34a>
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	75 2f       	mov	r23, r21
    1442:	72 0f       	add	r23, r18
    1444:	31 e0       	ldi	r19, 0x01	; 1
    1446:	72 17       	cp	r23, r18
    1448:	08 f0       	brcs	.+2      	; 0x144c <CO_collectADC+0x356>
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	43 2b       	or	r20, r19
    144e:	87 2d       	mov	r24, r7
    1450:	89 0f       	add	r24, r25
    1452:	31 e0       	ldi	r19, 0x01	; 1
    1454:	87 15       	cp	r24, r7
    1456:	08 f0       	brcs	.+2      	; 0x145a <CO_collectADC+0x364>
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	64 2f       	mov	r22, r20
    145c:	68 0f       	add	r22, r24
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	68 17       	cp	r22, r24
    1462:	08 f0       	brcs	.+2      	; 0x1466 <CO_collectADC+0x370>
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	32 2b       	or	r19, r18
    1468:	86 2d       	mov	r24, r6
    146a:	8f 0f       	add	r24, r31
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	86 15       	cp	r24, r6
    1470:	08 f0       	brcs	.+2      	; 0x1474 <CO_collectADC+0x37e>
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	53 2f       	mov	r21, r19
    1476:	58 0f       	add	r21, r24
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	58 17       	cp	r21, r24
    147c:	08 f0       	brcs	.+2      	; 0x1480 <CO_collectADC+0x38a>
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	42 2b       	or	r20, r18
    1482:	85 2d       	mov	r24, r5
    1484:	8a 0f       	add	r24, r26
    1486:	31 e0       	ldi	r19, 0x01	; 1
    1488:	85 15       	cp	r24, r5
    148a:	08 f0       	brcs	.+2      	; 0x148e <CO_collectADC+0x398>
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	48 0f       	add	r20, r24
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	48 17       	cp	r20, r24
    1494:	08 f0       	brcs	.+2      	; 0x1498 <CO_collectADC+0x3a2>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	32 2b       	or	r19, r18
    149a:	db 0e       	add	r13, r27
    149c:	ce 2e       	mov	r12, r30
    149e:	b0 2e       	mov	r11, r16
    14a0:	a1 2e       	mov	r10, r17
    14a2:	87 2e       	mov	r8, r23
    14a4:	76 2e       	mov	r7, r22
    14a6:	65 2e       	mov	r6, r21
    14a8:	54 2e       	mov	r5, r20
    14aa:	d3 0e       	add	r13, r19
	SPIDisable();	
	enableADCMUX(FALSE);
	ADCPower(FALSE);

	// collect average, max and min of SP samples
	for (sampleCount = 0; sampleCount < NUM_SAMPLES; sampleCount++) {
    14ac:	80 91 8e 4d 	lds	r24, 0x4D8E
    14b0:	90 91 8f 4d 	lds	r25, 0x4D8F
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	80 93 8e 4d 	sts	0x4D8E, r24
    14ba:	90 93 8f 4d 	sts	0x4D8F, r25
    14be:	80 91 8e 4d 	lds	r24, 0x4D8E
    14c2:	90 91 8f 4d 	lds	r25, 0x4D8F
    14c6:	80 50       	subi	r24, 0x00	; 0
    14c8:	94 40       	sbci	r25, 0x04	; 4
    14ca:	08 f4       	brcc	.+2      	; 0x14ce <CO_collectADC+0x3d8>
    14cc:	cb ce       	rjmp	.-618    	; 0x1264 <CO_collectADC+0x16e>
		if (min > data24Bit[sampleCount]) { min = data24Bit[sampleCount];}
	}
	average = sum / NUM_SAMPLES;

	//convert to uV
	*avgV = (int32_t) (average * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    14ce:	2c 2d       	mov	r18, r12
    14d0:	3b 2d       	mov	r19, r11
    14d2:	4a 2d       	mov	r20, r10
    14d4:	58 2d       	mov	r21, r8
    14d6:	67 2d       	mov	r22, r7
    14d8:	76 2d       	mov	r23, r6
    14da:	85 2d       	mov	r24, r5
    14dc:	9d 2d       	mov	r25, r13
    14de:	d7 fe       	sbrs	r13, 7
    14e0:	30 c0       	rjmp	.+96     	; 0x1542 <CO_collectADC+0x44c>
    14e2:	2c 2d       	mov	r18, r12
    14e4:	21 50       	subi	r18, 0x01	; 1
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	2c 15       	cp	r18, r12
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <CO_collectADC+0x3f8>
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	8b 2d       	mov	r24, r11
    14f0:	8d 5f       	subi	r24, 0xFD	; 253
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	8b 15       	cp	r24, r11
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <CO_collectADC+0x404>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	39 2f       	mov	r19, r25
    14fc:	38 0f       	add	r19, r24
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	38 17       	cp	r19, r24
    1502:	08 f0       	brcs	.+2      	; 0x1506 <CO_collectADC+0x410>
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	49 2b       	or	r20, r25
    1508:	4a 0d       	add	r20, r10
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	4a 15       	cp	r20, r10
    150e:	08 f0       	brcs	.+2      	; 0x1512 <CO_collectADC+0x41c>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	58 2f       	mov	r21, r24
    1514:	58 0d       	add	r21, r8
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	58 15       	cp	r21, r8
    151a:	08 f0       	brcs	.+2      	; 0x151e <CO_collectADC+0x428>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	68 2f       	mov	r22, r24
    1520:	67 0d       	add	r22, r7
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	67 15       	cp	r22, r7
    1526:	08 f0       	brcs	.+2      	; 0x152a <CO_collectADC+0x434>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	78 2f       	mov	r23, r24
    152c:	76 0d       	add	r23, r6
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	76 15       	cp	r23, r6
    1532:	08 f0       	brcs	.+2      	; 0x1536 <CO_collectADC+0x440>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	85 0d       	add	r24, r5
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	85 15       	cp	r24, r5
    153c:	08 f0       	brcs	.+2      	; 0x1540 <CO_collectADC+0x44a>
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9d 0d       	add	r25, r13
    1542:	0a e0       	ldi	r16, 0x0A	; 10
    1544:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__ashrdi3>
    1548:	b0 ea       	ldi	r27, 0xA0	; 160
    154a:	ab 2e       	mov	r10, r27
    154c:	a5 e2       	ldi	r26, 0x25	; 37
    154e:	ba 2e       	mov	r11, r26
    1550:	f6 e2       	ldi	r31, 0x26	; 38
    1552:	cf 2e       	mov	r12, r31
    1554:	dd 24       	eor	r13, r13
    1556:	ee 24       	eor	r14, r14
    1558:	ff 24       	eor	r15, r15
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__muldi3>
    1562:	aa 24       	eor	r10, r10
    1564:	aa 94       	dec	r10
    1566:	bb 24       	eor	r11, r11
    1568:	ba 94       	dec	r11
    156a:	ef e7       	ldi	r30, 0x7F	; 127
    156c:	ce 2e       	mov	r12, r30
    156e:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    1572:	01 e0       	ldi	r16, 0x01	; 1
    1574:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__ashldi3>
    1578:	03 e0       	ldi	r16, 0x03	; 3
    157a:	a0 2e       	mov	r10, r16
    157c:	bb 24       	eor	r11, r11
    157e:	cc 24       	eor	r12, r12
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    1586:	c9 01       	movw	r24, r18
    1588:	ba 01       	movw	r22, r20
    158a:	e9 89       	ldd	r30, Y+17	; 0x11
    158c:	fa 89       	ldd	r31, Y+18	; 0x12
    158e:	20 83       	st	Z, r18
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	42 83       	std	Z+2, r20	; 0x02
    1594:	73 83       	std	Z+3, r23	; 0x03
	*maxV = (int32_t) (max * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	4d 81       	ldd	r20, Y+5	; 0x05
    159c:	5e 81       	ldd	r21, Y+6	; 0x06
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	99 2d       	mov	r25, r9
    15a6:	b0 ea       	ldi	r27, 0xA0	; 160
    15a8:	ab 2e       	mov	r10, r27
    15aa:	a5 e2       	ldi	r26, 0x25	; 37
    15ac:	ba 2e       	mov	r11, r26
    15ae:	f6 e2       	ldi	r31, 0x26	; 38
    15b0:	cf 2e       	mov	r12, r31
    15b2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__muldi3>
    15b6:	aa 24       	eor	r10, r10
    15b8:	aa 94       	dec	r10
    15ba:	bb 24       	eor	r11, r11
    15bc:	ba 94       	dec	r11
    15be:	ef e7       	ldi	r30, 0x7F	; 127
    15c0:	ce 2e       	mov	r12, r30
    15c2:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    15c6:	01 e0       	ldi	r16, 0x01	; 1
    15c8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__ashldi3>
    15cc:	03 e0       	ldi	r16, 0x03	; 3
    15ce:	a0 2e       	mov	r10, r16
    15d0:	bb 24       	eor	r11, r11
    15d2:	cc 24       	eor	r12, r12
    15d4:	00 e0       	ldi	r16, 0x00	; 0
    15d6:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    15da:	c9 01       	movw	r24, r18
    15dc:	ba 01       	movw	r22, r20
    15de:	f1 01       	movw	r30, r2
    15e0:	20 83       	st	Z, r18
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	42 83       	std	Z+2, r20	; 0x02
    15e6:	73 83       	std	Z+3, r23	; 0x03
	*minV = (int32_t) (min * ADC_VREF / ADC_MAX * ADC_DRIVER_GAIN_DENOMINATOR / ADC_DRIVER_GAIN_NUMERATOR);
    15e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    15ee:	5d 85       	ldd	r21, Y+13	; 0x0d
    15f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    15f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    15f4:	84 2d       	mov	r24, r4
    15f6:	98 89       	ldd	r25, Y+16	; 0x10
    15f8:	b0 ea       	ldi	r27, 0xA0	; 160
    15fa:	ab 2e       	mov	r10, r27
    15fc:	a5 e2       	ldi	r26, 0x25	; 37
    15fe:	ba 2e       	mov	r11, r26
    1600:	f6 e2       	ldi	r31, 0x26	; 38
    1602:	cf 2e       	mov	r12, r31
    1604:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__muldi3>
    1608:	aa 24       	eor	r10, r10
    160a:	aa 94       	dec	r10
    160c:	bb 24       	eor	r11, r11
    160e:	ba 94       	dec	r11
    1610:	ef e7       	ldi	r30, 0x7F	; 127
    1612:	ce 2e       	mov	r12, r30
    1614:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    1618:	01 e0       	ldi	r16, 0x01	; 1
    161a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__ashldi3>
    161e:	03 e0       	ldi	r16, 0x03	; 3
    1620:	a0 2e       	mov	r10, r16
    1622:	bb 24       	eor	r11, r11
    1624:	cc 24       	eor	r12, r12
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	0e 94 66 18 	call	0x30cc	; 0x30cc <__divdi3>
    162c:	c9 01       	movw	r24, r18
    162e:	ba 01       	movw	r22, r20
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	20 83       	st	Z, r18
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	42 83       	std	Z+2, r20	; 0x02
    163a:	73 83       	std	Z+3, r23	; 0x03

}
    163c:	62 96       	adiw	r28, 0x12	; 18
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	9f 90       	pop	r9
    1658:	8f 90       	pop	r8
    165a:	7f 90       	pop	r7
    165c:	6f 90       	pop	r6
    165e:	5f 90       	pop	r5
    1660:	4f 90       	pop	r4
    1662:	3f 90       	pop	r3
    1664:	2f 90       	pop	r2
    1666:	08 95       	ret

00001668 <CO_collectSeismic3Channel>:
	}
}

void CO_collectSeismic3Channel(uint8_t filterConfig, uint8_t gain[], uint8_t subsamplesPerSecond,
	uint8_t subsamplesPerChannel, uint8_t DCPassEnable, uint16_t averagingPtA, uint16_t averagingPtB,
	uint16_t averagingPtC, uint16_t averagingPtD) {
    1668:	3f 92       	push	r3
    166a:	4f 92       	push	r4
    166c:	5f 92       	push	r5
    166e:	6f 92       	push	r6
    1670:	7f 92       	push	r7
    1672:	8f 92       	push	r8
    1674:	9f 92       	push	r9
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	18 2f       	mov	r17, r24
    1690:	3b 01       	movw	r6, r22
    1692:	34 2e       	mov	r3, r20
    1694:	42 2e       	mov	r4, r18
	
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
	// Set gains, filters, and input channel	
	set_ampGain(ADC_CH_6_gc, gain[0]);
    169c:	85 e0       	ldi	r24, 0x05	; 5
    169e:	f3 01       	movw	r30, r6
    16a0:	60 81       	ld	r22, Z
    16a2:	0e 94 33 06 	call	0xc66	; 0xc66 <set_ampGain>
	set_ampGain(ADC_CH_7_gc, gain[1]);
    16a6:	86 e0       	ldi	r24, 0x06	; 6
    16a8:	f3 01       	movw	r30, r6
    16aa:	61 81       	ldd	r22, Z+1	; 0x01
    16ac:	0e 94 33 06 	call	0xc66	; 0xc66 <set_ampGain>
	set_ampGain(ADC_CH_8_gc, gain[2]);
    16b0:	87 e0       	ldi	r24, 0x07	; 7
    16b2:	f3 01       	movw	r30, r6
    16b4:	62 81       	ldd	r22, Z+2	; 0x02
    16b6:	0e 94 33 06 	call	0xc66	; 0xc66 <set_ampGain>
	set_filter(filterConfig);
    16ba:	81 2f       	mov	r24, r17
    16bc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    16c0:	80 2f       	mov	r24, r16
    16c2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    16cc:	84 e5       	ldi	r24, 0x54	; 84
    16ce:	80 93 c0 08 	sts	0x08C0, r24
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
    16d2:	e0 e0       	ldi	r30, 0x00	; 0
    16d4:	f6 e0       	ldi	r31, 0x06	; 6
    16d6:	80 e2       	ldi	r24, 0x20	; 32
    16d8:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    16da:	85 83       	std	Z+5, r24	; 0x05
	ACC_DCPassEnable(DCPassEnable);	
	SPIInit(SPI_MODE_1_gc);
	SPIC.CTRL = ADC_SPI_CONFIG_gc;

	enableADCMUX(TRUE);
	setADCInput(ADC_CH_6_gc);
    16dc:	85 e0       	ldi	r24, 0x05	; 5
    16de:	0e 94 c4 04 	call	0x988	; 0x988 <setADCInput>
	

	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    16e2:	e0 ea       	ldi	r30, 0xA0	; 160
    16e4:	f6 e0       	ldi	r31, 0x06	; 6
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	90 8b       	std	Z+16, r25	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	82 83       	std	Z+2, r24	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    16ee:	88 e7       	ldi	r24, 0x78	; 120
    16f0:	80 93 80 01 	sts	0x0180, r24

	// Configure counter for IO13(PF0) events
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    16f4:	e0 e0       	ldi	r30, 0x00	; 0
    16f6:	f8 e0       	ldi	r31, 0x08	; 8
    16f8:	80 ef       	ldi	r24, 0xF0	; 240
    16fa:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CCA = averagingPtA;
    16fc:	e0 a6       	std	Z+40, r14	; 0x28
    16fe:	f1 a6       	std	Z+41, r15	; 0x29
	TCC0.CCB = averagingPtB;
    1700:	c2 a6       	std	Z+42, r12	; 0x2a
    1702:	d3 a6       	std	Z+43, r13	; 0x2b
	TCC0.CCC = averagingPtC;
    1704:	a4 a6       	std	Z+44, r10	; 0x2c
    1706:	b5 a6       	std	Z+45, r11	; 0x2d
	TCC0.CCD = averagingPtD;
    1708:	86 a6       	std	Z+46, r8	; 0x2e
    170a:	97 a6       	std	Z+47, r9	; 0x2f
	TCC0.PER = subsamplesPerChannel - 1;
    170c:	55 24       	eor	r5, r5
    170e:	08 94       	sec
    1710:	41 08       	sbc	r4, r1
    1712:	51 08       	sbc	r5, r1
    1714:	46 a2       	std	Z+38, r4	; 0x26
    1716:	57 a2       	std	Z+39, r5	; 0x27
	TCC0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    1718:	96 83       	std	Z+6, r25	; 0x06
	TCC0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    171e:	80 91 00 08 	lds	r24, 0x0800
    1722:	80 7f       	andi	r24, 0xF0	; 240
    1724:	88 60       	ori	r24, 0x08	; 8
    1726:	80 93 00 08 	sts	0x0800, r24

	FRAMAddress = FR_BASEADD;
    172a:	10 92 7c 3d 	sts	0x3D7C, r1
    172e:	10 92 7d 3d 	sts	0x3D7D, r1
	sampleCount = 0;
    1732:	10 92 8e 4d 	sts	0x4D8E, r1
    1736:	10 92 8f 4d 	sts	0x4D8F, r1
	SPICount = 0;
    173a:	10 92 ad 4d 	sts	0x4DAD, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    173e:	10 92 06 21 	sts	0x2106, r1
    1742:	80 91 06 21 	lds	r24, 0x2106
    1746:	80 93 05 21 	sts	0x2105, r24
    174a:	80 91 05 21 	lds	r24, 0x2105
    174e:	80 93 04 21 	sts	0x2104, r24

	// Enable interrupts.
	PMIC.CTRL |= (PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);
    1752:	80 91 a2 00 	lds	r24, 0x00A2
    1756:	86 60       	ori	r24, 0x06	; 6
    1758:	e0 ea       	ldi	r30, 0xA0	; 160
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	82 83       	std	Z+2, r24	; 0x02
	sei();
    175e:	78 94       	sei

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	e0 e4       	ldi	r30, 0x40	; 64
    1764:	f6 e0       	ldi	r31, 0x06	; 6
    1766:	86 83       	std	Z+6, r24	; 0x06
	sei();

	SPICS(TRUE);

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	e0 e8       	ldi	r30, 0x80	; 128
    176c:	f6 e0       	ldi	r31, 0x06	; 6
    176e:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1770:	e0 e4       	ldi	r30, 0x40	; 64
    1772:	fa e0       	ldi	r31, 0x0A	; 10
    1774:	83 e2       	ldi	r24, 0x23	; 35
    1776:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    1778:	80 e2       	ldi	r24, 0x20	; 32
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	03 2c       	mov	r0, r3
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <CO_collectSeismic3Channel+0x11c>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <CO_collectSeismic3Channel+0x118>
    1788:	86 a3       	std	Z+38, r24	; 0x26
    178a:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    178c:	80 e1       	ldi	r24, 0x10	; 16
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <CO_collectSeismic3Channel+0x12e>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	3a 94       	dec	r3
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <CO_collectSeismic3Channel+0x12a>
    179a:	82 af       	std	Z+58, r24	; 0x3a
    179c:	93 af       	std	Z+59, r25	; 0x3b
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    179e:	80 91 40 0a 	lds	r24, 0x0A40
    17a2:	80 7f       	andi	r24, 0xF0	; 240
    17a4:	81 60       	ori	r24, 0x01	; 1
    17a6:	80 93 40 0a 	sts	0x0A40, r24
	
	
		
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    17aa:	80 91 8e 4d 	lds	r24, 0x4D8E
    17ae:	90 91 8f 4d 	lds	r25, 0x4D8F
    17b2:	83 55       	subi	r24, 0x53	; 83
    17b4:	95 45       	sbci	r25, 0x55	; 85
    17b6:	c8 f3       	brcs	.-14     	; 0x17aa <CO_collectSeismic3Channel+0x142>

	// turn off timer and interupts
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    17b8:	80 91 00 08 	lds	r24, 0x0800
    17bc:	80 7f       	andi	r24, 0xF0	; 240
    17be:	80 93 00 08 	sts	0x0800, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    17c2:	80 91 40 0a 	lds	r24, 0x0A40
    17c6:	80 7f       	andi	r24, 0xF0	; 240
    17c8:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    17cc:	80 91 a2 00 	lds	r24, 0x00A2
    17d0:	89 7f       	andi	r24, 0xF9	; 249
    17d2:	e0 ea       	ldi	r30, 0xA0	; 160
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	82 83       	std	Z+2, r24	; 0x02
	cli();
    17d8:	f8 94       	cli
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
    17da:	e0 e4       	ldi	r30, 0x40	; 64
    17dc:	f6 e0       	ldi	r31, 0x06	; 6
    17de:	80 e1       	ldi	r24, 0x10	; 16
    17e0:	85 83       	std	Z+5, r24	; 0x05
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    17e2:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    17e4:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    17e8:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    17ea:	80 eb       	ldi	r24, 0xB0	; 176
    17ec:	82 83       	std	Z+2, r24	; 0x02
void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
		PORTA.OUTSET = PIN5_bm;
	} else {
		PORTA.OUTCLR = PIN5_bm;
    17ee:	e0 e0       	ldi	r30, 0x00	; 0
    17f0:	f6 e0       	ldi	r31, 0x06	; 6
    17f2:	80 e2       	ldi	r24, 0x20	; 32
    17f4:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    17f6:	82 83       	std	Z+2, r24	; 0x02
	cli();

	SPICS(FALSE);
	SPIDisable();
	enableADCMUX(FALSE);
	ADCPower(FALSE);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	bf 90       	pop	r11
    1810:	af 90       	pop	r10
    1812:	9f 90       	pop	r9
    1814:	8f 90       	pop	r8
    1816:	7f 90       	pop	r7
    1818:	6f 90       	pop	r6
    181a:	5f 90       	pop	r5
    181c:	4f 90       	pop	r4
    181e:	3f 90       	pop	r3
    1820:	08 95       	ret

00001822 <CO_collectSeismic1Channel>:
}

void CO_collectSeismic1Channel(uint8_t channel, uint8_t filterConfig, uint8_t gain,
	uint8_t subsamplesPerSecond, uint8_t subsamplesPerSample, uint8_t DCPassEnable,
	uint16_t averagingPtA, uint16_t averagingPtB, uint16_t averagingPtC,
	uint16_t averagingPtD) {
    1822:	5f 92       	push	r5
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	68 2e       	mov	r6, r24
    1846:	76 2e       	mov	r7, r22
    1848:	f4 2e       	mov	r15, r20
    184a:	52 2e       	mov	r5, r18
				
	// Turn on power to ADC and PortEx
	ADCPower(TRUE);
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
	// Set gains, filters, and input channel	
	// set gain, filters, and ADC input for appropriate VIN
	set_ampGain(channel, gain);
    1852:	86 2d       	mov	r24, r6
    1854:	6f 2d       	mov	r22, r15
    1856:	0e 94 33 06 	call	0xc66	; 0xc66 <set_ampGain>
	set_filter(filterConfig);
    185a:	87 2d       	mov	r24, r7
    185c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <set_filter>
	ACC_DCPassEnable(DCPassEnable);	
    1860:	8e 2d       	mov	r24, r14
    1862:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ACC_DCPassEnable>
	SPIInit(SPI_MODE_1_gc);
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    186c:	84 e5       	ldi	r24, 0x54	; 84
    186e:	80 93 c0 08 	sts	0x08C0, r24
	SPIDisable();
}

void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
    1872:	e0 e0       	ldi	r30, 0x00	; 0
    1874:	f6 e0       	ldi	r31, 0x06	; 6
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	81 83       	std	Z+1, r24	; 0x01
		PORTA.OUTSET = PIN5_bm;
    187a:	85 83       	std	Z+5, r24	; 0x05
	ACC_DCPassEnable(DCPassEnable);	
	SPIInit(SPI_MODE_1_gc);
	SPIC.CTRL = ADC_SPI_CONFIG_gc;

	enableADCMUX(TRUE);
	setADCInput(channel);
    187c:	86 2d       	mov	r24, r6
    187e:	0e 94 c4 04 	call	0x988	; 0x988 <setADCInput>
	
	// Configure IO13 (PF0) to capture ADC DRDY signal
	PORTF.PIN0CTRL = PORT_ISC_FALLING_gc;
    1882:	e0 ea       	ldi	r30, 0xA0	; 160
    1884:	f6 e0       	ldi	r31, 0x06	; 6
    1886:	22 e0       	ldi	r18, 0x02	; 2
    1888:	20 8b       	std	Z+16, r18	; 0x10
	PORTF.DIRCLR = PIN0_bm;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	82 83       	std	Z+2, r24	; 0x02
	
	// Configure IO13(PF0) to drive event channel
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTF_PIN0_gc;
    188e:	88 e7       	ldi	r24, 0x78	; 120
    1890:	80 93 80 01 	sts	0x0180, r24

	// Configure counter for IO13(PF0) events
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
    1894:	e0 e0       	ldi	r30, 0x00	; 0
    1896:	f9 e0       	ldi	r31, 0x09	; 9
    1898:	80 ef       	ldi	r24, 0xF0	; 240
    189a:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CCA = averagingPtA;
    189c:	c0 a6       	std	Z+40, r12	; 0x28
    189e:	d1 a6       	std	Z+41, r13	; 0x29
	TCD0.CCB = averagingPtB;
    18a0:	a2 a6       	std	Z+42, r10	; 0x2a
    18a2:	b3 a6       	std	Z+43, r11	; 0x2b
	TCD0.CCC = averagingPtC;
    18a4:	84 a6       	std	Z+44, r8	; 0x2c
    18a6:	95 a6       	std	Z+45, r9	; 0x2d
	TCD0.CCD = averagingPtD;
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	86 a7       	std	Z+46, r24	; 0x2e
    18ae:	97 a7       	std	Z+47, r25	; 0x2f
	TCD0.PER = subsamplesPerSample - 1;
    18b0:	10 e0       	ldi	r17, 0x00	; 0
    18b2:	01 50       	subi	r16, 0x01	; 1
    18b4:	10 40       	sbci	r17, 0x00	; 0
    18b6:	06 a3       	std	Z+38, r16	; 0x26
    18b8:	17 a3       	std	Z+39, r17	; 0x27
	TCD0.INTCTRLA =  TC_OVFINTLVL_MED_gc;
    18ba:	26 83       	std	Z+6, r18	; 0x06
	TCD0.INTCTRLB = TC_CCAINTLVL_HI_gc | TC_CCBINTLVL_HI_gc | TC_CCCINTLVL_HI_gc | TC_CCDINTLVL_HI_gc;
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	87 83       	std	Z+7, r24	; 0x07
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_EVCH0_gc;
    18c0:	80 91 00 09 	lds	r24, 0x0900
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	88 60       	ori	r24, 0x08	; 8
    18c8:	80 93 00 09 	sts	0x0900, r24

	FRAMAddress = FR_BASEADD;
    18cc:	10 92 7c 3d 	sts	0x3D7C, r1
    18d0:	10 92 7d 3d 	sts	0x3D7D, r1
	sampleCount = 0;
    18d4:	10 92 8e 4d 	sts	0x4D8E, r1
    18d8:	10 92 8f 4d 	sts	0x4D8F, r1
	SPICount = 0;
    18dc:	10 92 ad 4d 	sts	0x4DAD, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
    18e0:	10 92 06 21 	sts	0x2106, r1
    18e4:	80 91 06 21 	lds	r24, 0x2106
    18e8:	80 93 05 21 	sts	0x2105, r24
    18ec:	80 91 05 21 	lds	r24, 0x2105
    18f0:	80 93 04 21 	sts	0x2104, r24

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
    18f4:	80 e1       	ldi	r24, 0x10	; 16
    18f6:	e0 e4       	ldi	r30, 0x40	; 64
    18f8:	f6 e0       	ldi	r31, 0x06	; 6
    18fa:	86 83       	std	Z+6, r24	; 0x06
	SPICount = 0;
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;	
	SPICS(TRUE);	

	// Enable interrupts.
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm;
    18fc:	80 91 a2 00 	lds	r24, 0x00A2
    1900:	86 60       	ori	r24, 0x06	; 6
    1902:	e0 ea       	ldi	r30, 0xA0	; 160
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1908:	78 94       	sei

	// Configure clock signal for AD7767 MCLK
	PORTE.DIRSET = PIN5_bm;
    190a:	80 e2       	ldi	r24, 0x20	; 32
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	f6 e0       	ldi	r31, 0x06	; 6
    1910:	81 83       	std	Z+1, r24	; 0x01
	// Set Waveform generator mode and enable the CCx output to IO14 (PE5)
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm;
    1912:	e0 e4       	ldi	r30, 0x40	; 64
    1914:	fa e0       	ldi	r31, 0x0A	; 10
    1916:	83 e2       	ldi	r24, 0x23	; 35
    1918:	81 83       	std	Z+1, r24	; 0x01
	// set period
	TCE1.PER = (0x20 << subsamplesPerSecond);
    191a:	80 e2       	ldi	r24, 0x20	; 32
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	05 2c       	mov	r0, r5
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <CO_collectSeismic1Channel+0x104>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <CO_collectSeismic1Channel+0x100>
    192a:	86 a3       	std	Z+38, r24	; 0x26
    192c:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CCBBUF = (0x10 << subsamplesPerSecond);
    192e:	80 e1       	ldi	r24, 0x10	; 16
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <CO_collectSeismic1Channel+0x116>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	5a 94       	dec	r5
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <CO_collectSeismic1Channel+0x112>
    193c:	82 af       	std	Z+58, r24	; 0x3a
    193e:	93 af       	std	Z+59, r25	; 0x3b
	// Set oscillator source and frequency and start
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_DIV1_gc;
    1940:	80 91 40 0a 	lds	r24, 0x0A40
    1944:	80 7f       	andi	r24, 0xF0	; 240
    1946:	81 60       	ori	r24, 0x01	; 1
    1948:	80 93 40 0a 	sts	0x0A40, r24
			
	// wait for ADC to collect samples
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES);	
    194c:	80 91 8e 4d 	lds	r24, 0x4D8E
    1950:	90 91 8f 4d 	lds	r25, 0x4D8F
    1954:	83 55       	subi	r24, 0x53	; 83
    1956:	95 45       	sbci	r25, 0x55	; 85
    1958:	c8 f3       	brcs	.-14     	; 0x194c <CO_collectSeismic1Channel+0x12a>

	// turn off timer and interupts
	TCD0.CTRLA = ( TCD0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    195a:	80 91 00 09 	lds	r24, 0x0900
    195e:	80 7f       	andi	r24, 0xF0	; 240
    1960:	80 93 00 09 	sts	0x0900, r24
	TCE1.CTRLA = ( TCE1.CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    1964:	80 91 40 0a 	lds	r24, 0x0A40
    1968:	80 7f       	andi	r24, 0xF0	; 240
    196a:	80 93 40 0a 	sts	0x0A40, r24
	PMIC.CTRL &= ~(PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm);	
    196e:	80 91 a2 00 	lds	r24, 0x00A2
    1972:	89 7f       	andi	r24, 0xF9	; 249
    1974:	e0 ea       	ldi	r30, 0xA0	; 160
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	82 83       	std	Z+2, r24	; 0x02
	cli();
    197a:	f8 94       	cli
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
    197c:	e0 e4       	ldi	r30, 0x40	; 64
    197e:	f6 e0       	ldi	r31, 0x06	; 6
    1980:	80 e1       	ldi	r24, 0x10	; 16
    1982:	85 83       	std	Z+5, r24	; 0x05
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    1984:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    1986:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    198a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    198c:	80 eb       	ldi	r24, 0xB0	; 176
    198e:	82 83       	std	Z+2, r24	; 0x02
void enableADCMUX(uint8_t on) {
	if(on) {
		PORTA.DIRSET = PIN5_bm;
		PORTA.OUTSET = PIN5_bm;
	} else {
		PORTA.OUTCLR = PIN5_bm;
    1990:	e0 e0       	ldi	r30, 0x00	; 0
    1992:	f6 e0       	ldi	r31, 0x06	; 6
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRCLR = PIN5_bm;
    1998:	82 83       	std	Z+2, r24	; 0x02
	cli();

	SPICS(FALSE);
	SPIDisable();
	enableADCMUX(FALSE);
	ADCPower(FALSE);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
}
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	7f 90       	pop	r7
    19ba:	6f 90       	pop	r6
    19bc:	5f 90       	pop	r5
    19be:	08 95       	ret

000019c0 <sampleCurrentChannel>:
ISR(TCD0_OVF_vect) {
	writeSE2FRAM();
}

void sampleCurrentChannel() {
	PORTF.OUTCLR = PIN1_bm; // pull ADC_CS down to enable data read
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	e0 ea       	ldi	r30, 0xA0	; 160
    19c4:	f6 e0       	ldi	r31, 0x06	; 6
    19c6:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    19c8:	8a ea       	ldi	r24, 0xAA	; 170
    19ca:	e0 ec       	ldi	r30, 0xC0	; 192
    19cc:	f8 e0       	ldi	r31, 0x08	; 8
    19ce:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    19d0:	80 91 c2 08 	lds	r24, 0x08C2
    19d4:	87 ff       	sbrs	r24, 7
    19d6:	fc cf       	rjmp	.-8      	; 0x19d0 <sampleCurrentChannel+0x10>
	SPIBuffer[SPICount] = SPIC.DATA;
    19d8:	e0 91 ad 4d 	lds	r30, 0x4DAD
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 91 c3 08 	lds	r24, 0x08C3
    19e2:	ef 57       	subi	r30, 0x7F	; 127
    19e4:	f2 4b       	sbci	r31, 0xB2	; 178
    19e6:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    19e8:	8a ea       	ldi	r24, 0xAA	; 170
    19ea:	e0 ec       	ldi	r30, 0xC0	; 192
    19ec:	f8 e0       	ldi	r31, 0x08	; 8
    19ee:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    19f0:	80 91 c2 08 	lds	r24, 0x08C2
    19f4:	87 ff       	sbrs	r24, 7
    19f6:	fc cf       	rjmp	.-8      	; 0x19f0 <sampleCurrentChannel+0x30>
	SPIBuffer[SPICount+1] = SPIC.DATA;
    19f8:	e0 91 ad 4d 	lds	r30, 0x4DAD
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 91 c3 08 	lds	r24, 0x08C3
    1a02:	ee 57       	subi	r30, 0x7E	; 126
    1a04:	f2 4b       	sbci	r31, 0xB2	; 178
    1a06:	80 83       	st	Z, r24
	SPIC.DATA = 0xAA; // dummy data to start SPI clock
    1a08:	8a ea       	ldi	r24, 0xAA	; 170
    1a0a:	e0 ec       	ldi	r30, 0xC0	; 192
    1a0c:	f8 e0       	ldi	r31, 0x08	; 8
    1a0e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1a10:	80 91 c2 08 	lds	r24, 0x08C2
    1a14:	87 ff       	sbrs	r24, 7
    1a16:	fc cf       	rjmp	.-8      	; 0x1a10 <sampleCurrentChannel+0x50>
	SPIBuffer[SPICount+2] = SPIC.DATA;
    1a18:	e0 91 ad 4d 	lds	r30, 0x4DAD
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 91 c3 08 	lds	r24, 0x08C3
    1a22:	ed 57       	subi	r30, 0x7D	; 125
    1a24:	f2 4b       	sbci	r31, 0xB2	; 178
    1a26:	80 83       	st	Z, r24
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	e0 ea       	ldi	r30, 0xA0	; 160
    1a2c:	f6 e0       	ldi	r31, 0x06	; 6
    1a2e:	85 83       	std	Z+5, r24	; 0x05
	SPICount +=3;
    1a30:	80 91 ad 4d 	lds	r24, 0x4DAD
    1a34:	8d 5f       	subi	r24, 0xFD	; 253
    1a36:	80 93 ad 4d 	sts	0x4DAD, r24
}
    1a3a:	08 95       	ret

00001a3c <__vector_82>:

ISR(TCD0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCD_vect) {
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	0b b6       	in	r0, 0x3b	; 59
    1a46:	0f 92       	push	r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31
	sampleCurrentChannel();
    1a62:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
	SPICount = 0;		
    1a66:	10 92 ad 4d 	sts	0x4DAD, r1
}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <__vector_81>:

ISR(TCD0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCC_vect) {
    1a90:	1f 92       	push	r1
    1a92:	0f 92       	push	r0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	0f 92       	push	r0
    1a98:	0b b6       	in	r0, 0x3b	; 59
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
	sampleCurrentChannel();
    1ab6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0b be       	out	0x3b, r0	; 59
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <__vector_80>:

ISR(TCD0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCD0_CCB_vect) {
    1ae0:	1f 92       	push	r1
    1ae2:	0f 92       	push	r0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	0f 92       	push	r0
    1ae8:	0b b6       	in	r0, 0x3b	; 59
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
	sampleCurrentChannel();
    1b06:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0b be       	out	0x3b, r0	; 59
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <__vector_79>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCD0_CCA_vect) {
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	0b b6       	in	r0, 0x3b	; 59
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
	sampleCurrentChannel();
    1b56:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1b5a:	ff 91       	pop	r31
    1b5c:	ef 91       	pop	r30
    1b5e:	bf 91       	pop	r27
    1b60:	af 91       	pop	r26
    1b62:	9f 91       	pop	r25
    1b64:	8f 91       	pop	r24
    1b66:	7f 91       	pop	r23
    1b68:	6f 91       	pop	r22
    1b6a:	5f 91       	pop	r21
    1b6c:	4f 91       	pop	r20
    1b6e:	3f 91       	pop	r19
    1b70:	2f 91       	pop	r18
    1b72:	0f 90       	pop	r0
    1b74:	0b be       	out	0x3b, r0	; 59
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_19>:

ISR(TCC0_CCC_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCD_vect) {
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	0b b6       	in	r0, 0x3b	; 59
    1b8a:	0f 92       	push	r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	2f 93       	push	r18
    1b90:	3f 93       	push	r19
    1b92:	4f 93       	push	r20
    1b94:	5f 93       	push	r21
    1b96:	6f 93       	push	r22
    1b98:	7f 93       	push	r23
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	af 93       	push	r26
    1ba0:	bf 93       	push	r27
    1ba2:	ef 93       	push	r30
    1ba4:	ff 93       	push	r31
	sampleCurrentChannel();
    1ba6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
	SPICount = 0;
    1baa:	10 92 ad 4d 	sts	0x4DAD, r1
	if(PORTB.OUT & PIN1_bm) {
    1bae:	a0 e2       	ldi	r26, 0x20	; 32
    1bb0:	b6 e0       	ldi	r27, 0x06	; 6
    1bb2:	80 91 24 06 	lds	r24, 0x0624
    1bb6:	81 ff       	sbrs	r24, 1
    1bb8:	0d c0       	rjmp	.+26     	; 0x1bd4 <__vector_19+0x54>
		if (PORTA.OUT & PIN6_bm) PORTB.OUTTGL = PIN1_bm;
    1bba:	80 91 04 06 	lds	r24, 0x0604
    1bbe:	86 ff       	sbrs	r24, 6
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <__vector_19+0x4a>
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	17 96       	adiw	r26, 0x07	; 7
    1bc6:	8c 93       	st	X, r24
    1bc8:	0c c0       	rjmp	.+24     	; 0x1be2 <__vector_19+0x62>
		else PORTA.OUTTGL = PIN6_bm;
    1bca:	80 e4       	ldi	r24, 0x40	; 64
    1bcc:	e0 e0       	ldi	r30, 0x00	; 0
    1bce:	f6 e0       	ldi	r31, 0x06	; 6
    1bd0:	87 83       	std	Z+7, r24	; 0x07
    1bd2:	07 c0       	rjmp	.+14     	; 0x1be2 <__vector_19+0x62>
	} else {
		PORTA.OUTCLR = PIN6_bm;
    1bd4:	80 e4       	ldi	r24, 0x40	; 64
    1bd6:	e0 e0       	ldi	r30, 0x00	; 0
    1bd8:	f6 e0       	ldi	r31, 0x06	; 6
    1bda:	86 83       	std	Z+6, r24	; 0x06
		PORTB.OUTSET = PIN1_bm;
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	15 96       	adiw	r26, 0x05	; 5
    1be0:	8c 93       	st	X, r24
	}
	
}
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0b be       	out	0x3b, r0	; 59
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_18>:

ISR(TCC0_CCB_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCC_vect) {
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	0b b6       	in	r0, 0x3b	; 59
    1c12:	0f 92       	push	r0
    1c14:	11 24       	eor	r1, r1
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
	sampleCurrentChannel();
    1c2e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1c32:	ff 91       	pop	r31
    1c34:	ef 91       	pop	r30
    1c36:	bf 91       	pop	r27
    1c38:	af 91       	pop	r26
    1c3a:	9f 91       	pop	r25
    1c3c:	8f 91       	pop	r24
    1c3e:	7f 91       	pop	r23
    1c40:	6f 91       	pop	r22
    1c42:	5f 91       	pop	r21
    1c44:	4f 91       	pop	r20
    1c46:	3f 91       	pop	r19
    1c48:	2f 91       	pop	r18
    1c4a:	0f 90       	pop	r0
    1c4c:	0b be       	out	0x3b, r0	; 59
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	0f 90       	pop	r0
    1c54:	1f 90       	pop	r1
    1c56:	18 95       	reti

00001c58 <__vector_17>:

ISR(TCC0_CCA_vect) {
	sampleCurrentChannel();
}

ISR(TCC0_CCB_vect) {
    1c58:	1f 92       	push	r1
    1c5a:	0f 92       	push	r0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	0f 92       	push	r0
    1c60:	0b b6       	in	r0, 0x3b	; 59
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
	sampleCurrentChannel();
    1c7e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1c82:	ff 91       	pop	r31
    1c84:	ef 91       	pop	r30
    1c86:	bf 91       	pop	r27
    1c88:	af 91       	pop	r26
    1c8a:	9f 91       	pop	r25
    1c8c:	8f 91       	pop	r24
    1c8e:	7f 91       	pop	r23
    1c90:	6f 91       	pop	r22
    1c92:	5f 91       	pop	r21
    1c94:	4f 91       	pop	r20
    1c96:	3f 91       	pop	r19
    1c98:	2f 91       	pop	r18
    1c9a:	0f 90       	pop	r0
    1c9c:	0b be       	out	0x3b, r0	; 59
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	0f 90       	pop	r0
    1ca4:	1f 90       	pop	r1
    1ca6:	18 95       	reti

00001ca8 <__vector_16>:
	enableADCMUX(FALSE);
	ADCPower(FALSE);
	
}

ISR(TCC0_CCA_vect) {
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	0b b6       	in	r0, 0x3b	; 59
    1cb2:	0f 92       	push	r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	2f 93       	push	r18
    1cb8:	3f 93       	push	r19
    1cba:	4f 93       	push	r20
    1cbc:	5f 93       	push	r21
    1cbe:	6f 93       	push	r22
    1cc0:	7f 93       	push	r23
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
    1cc6:	af 93       	push	r26
    1cc8:	bf 93       	push	r27
    1cca:	ef 93       	push	r30
    1ccc:	ff 93       	push	r31
	sampleCurrentChannel();
    1cce:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sampleCurrentChannel>
}
    1cd2:	ff 91       	pop	r31
    1cd4:	ef 91       	pop	r30
    1cd6:	bf 91       	pop	r27
    1cd8:	af 91       	pop	r26
    1cda:	9f 91       	pop	r25
    1cdc:	8f 91       	pop	r24
    1cde:	7f 91       	pop	r23
    1ce0:	6f 91       	pop	r22
    1ce2:	5f 91       	pop	r21
    1ce4:	4f 91       	pop	r20
    1ce6:	3f 91       	pop	r19
    1ce8:	2f 91       	pop	r18
    1cea:	0f 90       	pop	r0
    1cec:	0b be       	out	0x3b, r0	; 59
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <writeSE2FRAM>:
	SPIBuffer[SPICount+2] = SPIC.DATA;
	PORTF.OUTSET = PIN1_bm; // pull ADC_CS up to end data read
	SPICount +=3;
}

void writeSE2FRAM() {
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	28 97       	sbiw	r28, 0x08	; 8
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	de bf       	out	0x3e, r29	; 62
	volatile int32_t sum = 0;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
    1d0e:	1a 82       	std	Y+2, r1	; 0x02
    1d10:	1b 82       	std	Y+3, r1	; 0x03
    1d12:	1c 82       	std	Y+4, r1	; 0x04
	volatile int32_t currentSample;
	sampleCount++;
    1d14:	80 91 8e 4d 	lds	r24, 0x4D8E
    1d18:	90 91 8f 4d 	lds	r25, 0x4D8F
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	80 93 8e 4d 	sts	0x4D8E, r24
    1d22:	90 93 8f 4d 	sts	0x4D8F, r25
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    1d26:	80 ed       	ldi	r24, 0xD0	; 208
    1d28:	80 93 c0 08 	sts	0x08C0, r24
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	8e 01       	movw	r16, r28
    1d32:	0b 5f       	subi	r16, 0xFB	; 251
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
		
	for(uint8_t i = 0; i < 12; i+=3) {
		if(SPIBuffer[i] & BIT7_bm) *(((uint8_t*)&currentSample) + 3) = 0xFF; // sign extension if negative
    1d36:	ff 24       	eor	r15, r15
    1d38:	fa 94       	dec	r15
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	ef 57       	subi	r30, 0x7F	; 127
    1d3e:	f2 4b       	sbci	r31, 0xB2	; 178
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	88 0f       	add	r24, r24
    1d46:	88 0b       	sbc	r24, r24
    1d48:	8f 21       	and	r24, r15
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	83 83       	std	Z+3, r24	; 0x03
		else *(((uint8_t*)&currentSample) + 3) = 0x00;
		*(((uint8_t*)&currentSample) + 2) = SPIBuffer[i];
    1d4e:	fb 01       	movw	r30, r22
    1d50:	ef 57       	subi	r30, 0x7F	; 127
    1d52:	f2 4b       	sbci	r31, 0xB2	; 178
    1d54:	80 81       	ld	r24, Z
    1d56:	f8 01       	movw	r30, r16
    1d58:	82 83       	std	Z+2, r24	; 0x02
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
    1d5a:	fb 01       	movw	r30, r22
    1d5c:	ee 57       	subi	r30, 0x7E	; 126
    1d5e:	f2 4b       	sbci	r31, 0xB2	; 178
    1d60:	80 81       	ld	r24, Z
    1d62:	f8 01       	movw	r30, r16
    1d64:	81 83       	std	Z+1, r24	; 0x01
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
    1d66:	fb 01       	movw	r30, r22
    1d68:	ed 57       	subi	r30, 0x7D	; 125
    1d6a:	f2 4b       	sbci	r31, 0xB2	; 178
    1d6c:	80 81       	ld	r24, Z
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
		sum += currentSample;
    1d72:	29 81       	ldd	r18, Y+1	; 0x01
    1d74:	3a 81       	ldd	r19, Y+2	; 0x02
    1d76:	4b 81       	ldd	r20, Y+3	; 0x03
    1d78:	5c 81       	ldd	r21, Y+4	; 0x04
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	af 81       	ldd	r26, Y+7	; 0x07
    1d80:	b8 85       	ldd	r27, Y+8	; 0x08
    1d82:	82 0f       	add	r24, r18
    1d84:	93 1f       	adc	r25, r19
    1d86:	a4 1f       	adc	r26, r20
    1d88:	b5 1f       	adc	r27, r21
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	ab 83       	std	Y+3, r26	; 0x03
    1d90:	bc 83       	std	Y+4, r27	; 0x04
    1d92:	6d 5f       	subi	r22, 0xFD	; 253
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
	volatile int32_t currentSample;
	sampleCount++;
	
	SPIC.CTRL = FR_SPI_CONFIG_gc;
		
	for(uint8_t i = 0; i < 12; i+=3) {
    1d96:	6c 30       	cpi	r22, 0x0C	; 12
    1d98:	71 05       	cpc	r23, r1
    1d9a:	79 f6       	brne	.-98     	; 0x1d3a <writeSE2FRAM+0x42>
		*(((uint8_t*)&currentSample) + 1) = SPIBuffer[i+1];
		*(((uint8_t*)&currentSample) + 0) = SPIBuffer[i+2];
		sum += currentSample;
	}
	
	sum = sum / 4;
    1d9c:	69 81       	ldd	r22, Y+1	; 0x01
    1d9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	24 e0       	ldi	r18, 0x04	; 4
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__divmodsi4>
    1db0:	c9 01       	movw	r24, r18
    1db2:	da 01       	movw	r26, r20
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	ab 83       	std	Y+3, r26	; 0x03
    1dba:	bc 83       	std	Y+4, r27	; 0x04
	SPIBuffer[2] = *(((uint8_t*)&sum)+0);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	80 93 83 4d 	sts	0x4D83, r24
	SPIBuffer[1] = *(((uint8_t*)&sum)+1);
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	80 93 82 4d 	sts	0x4D82, r24
	SPIBuffer[0] = *(((uint8_t*)&sum)+2);	
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	80 93 81 4d 	sts	0x4D81, r24


	
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1dce:	80 e1       	ldi	r24, 0x10	; 16
    1dd0:	e0 e4       	ldi	r30, 0x40	; 64
    1dd2:	f6 e0       	ldi	r31, 0x06	; 6
    1dd4:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1dd6:	88 e0       	ldi	r24, 0x08	; 8
    1dd8:	e0 e2       	ldi	r30, 0x20	; 32
    1dda:	f6 e0       	ldi	r31, 0x06	; 6
    1ddc:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1dde:	00 00       	nop
	SPIC.DATA = FR_WREN;
    1de0:	86 e0       	ldi	r24, 0x06	; 6
    1de2:	e0 ec       	ldi	r30, 0xC0	; 192
    1de4:	f8 e0       	ldi	r31, 0x08	; 8
    1de6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1de8:	80 91 c2 08 	lds	r24, 0x08C2
    1dec:	87 ff       	sbrs	r24, 7
    1dee:	fc cf       	rjmp	.-8      	; 0x1de8 <writeSE2FRAM+0xf0>
	SPIBuffer[12] = SPIC.DATA;
    1df0:	80 91 c3 08 	lds	r24, 0x08C3
    1df4:	80 93 8d 4d 	sts	0x4D8D, r24
	PORTB.OUTSET = PIN3_bm;  // latch opcode
    1df8:	e0 e2       	ldi	r30, 0x20	; 32
    1dfa:	f6 e0       	ldi	r31, 0x06	; 6
    1dfc:	88 e0       	ldi	r24, 0x08	; 8
    1dfe:	85 83       	std	Z+5, r24	; 0x05
	nop(); // time for CS_FRAM to accept high signal
    1e00:	00 00       	nop
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1e02:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1e04:	00 00       	nop
	SPIC.DATA = FR_WRITE;
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	e0 ec       	ldi	r30, 0xC0	; 192
    1e0a:	f8 e0       	ldi	r31, 0x08	; 8
    1e0c:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e0e:	80 91 c2 08 	lds	r24, 0x08C2
    1e12:	87 ff       	sbrs	r24, 7
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <writeSE2FRAM+0x116>
	SPIBuffer[12] = SPIC.DATA;
    1e16:	80 91 c3 08 	lds	r24, 0x08C3
    1e1a:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    1e1e:	80 91 7d 3d 	lds	r24, 0x3D7D
    1e22:	e0 ec       	ldi	r30, 0xC0	; 192
    1e24:	f8 e0       	ldi	r31, 0x08	; 8
    1e26:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e28:	80 91 c2 08 	lds	r24, 0x08C2
    1e2c:	87 ff       	sbrs	r24, 7
    1e2e:	fc cf       	rjmp	.-8      	; 0x1e28 <writeSE2FRAM+0x130>
	SPIBuffer[12] = SPIC.DATA;
    1e30:	80 91 c3 08 	lds	r24, 0x08C3
    1e34:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = *((uint8_t*)&FRAMAddress);
    1e38:	80 91 7c 3d 	lds	r24, 0x3D7C
    1e3c:	e0 ec       	ldi	r30, 0xC0	; 192
    1e3e:	f8 e0       	ldi	r31, 0x08	; 8
    1e40:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e42:	80 91 c2 08 	lds	r24, 0x08C2
    1e46:	87 ff       	sbrs	r24, 7
    1e48:	fc cf       	rjmp	.-8      	; 0x1e42 <writeSE2FRAM+0x14a>
	SPIBuffer[12] = SPIC.DATA;
    1e4a:	80 91 c3 08 	lds	r24, 0x08C3
    1e4e:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = SPIBuffer[0];
    1e52:	80 91 81 4d 	lds	r24, 0x4D81
    1e56:	e0 ec       	ldi	r30, 0xC0	; 192
    1e58:	f8 e0       	ldi	r31, 0x08	; 8
    1e5a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e5c:	80 91 c2 08 	lds	r24, 0x08C2
    1e60:	87 ff       	sbrs	r24, 7
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <writeSE2FRAM+0x164>
	SPIBuffer[12] = SPIC.DATA;
    1e64:	80 91 c3 08 	lds	r24, 0x08C3
    1e68:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = SPIBuffer[1];
    1e6c:	80 91 82 4d 	lds	r24, 0x4D82
    1e70:	e0 ec       	ldi	r30, 0xC0	; 192
    1e72:	f8 e0       	ldi	r31, 0x08	; 8
    1e74:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e76:	80 91 c2 08 	lds	r24, 0x08C2
    1e7a:	87 ff       	sbrs	r24, 7
    1e7c:	fc cf       	rjmp	.-8      	; 0x1e76 <writeSE2FRAM+0x17e>
	SPIBuffer[12] = SPIC.DATA;
    1e7e:	80 91 c3 08 	lds	r24, 0x08C3
    1e82:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = SPIBuffer[2];
    1e86:	80 91 83 4d 	lds	r24, 0x4D83
    1e8a:	e0 ec       	ldi	r30, 0xC0	; 192
    1e8c:	f8 e0       	ldi	r31, 0x08	; 8
    1e8e:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1e90:	80 91 c2 08 	lds	r24, 0x08C2
    1e94:	87 ff       	sbrs	r24, 7
    1e96:	fc cf       	rjmp	.-8      	; 0x1e90 <writeSE2FRAM+0x198>
	SPIBuffer[12] = SPIC.DATA;
    1e98:	80 91 c3 08 	lds	r24, 0x08C3
    1e9c:	80 93 8d 4d 	sts	0x4D8D, r24
		
	PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    1ea0:	88 e0       	ldi	r24, 0x08	; 8
    1ea2:	e0 e2       	ldi	r30, 0x20	; 32
    1ea4:	f6 e0       	ldi	r31, 0x06	; 6
    1ea6:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    1ea8:	e0 e4       	ldi	r30, 0x40	; 64
    1eaa:	f6 e0       	ldi	r31, 0x06	; 6
    1eac:	90 e1       	ldi	r25, 0x10	; 16
    1eae:	95 83       	std	Z+5, r25	; 0x05
	SPIC.CTRL = ADC_SPI_CONFIG_gc;
    1eb0:	84 e5       	ldi	r24, 0x54	; 84
    1eb2:	80 93 c0 08 	sts	0x08C0, r24
	PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    1eb6:	96 83       	std	Z+6, r25	; 0x06
	
	FRAMAddress +=3;
    1eb8:	80 91 7c 3d 	lds	r24, 0x3D7C
    1ebc:	90 91 7d 3d 	lds	r25, 0x3D7D
    1ec0:	03 96       	adiw	r24, 0x03	; 3
    1ec2:	80 93 7c 3d 	sts	0x3D7C, r24
    1ec6:	90 93 7d 3d 	sts	0x3D7D, r25
	checksumADC[0] += SPIBuffer[0];
    1eca:	90 91 04 21 	lds	r25, 0x2104
    1ece:	80 91 81 4d 	lds	r24, 0x4D81
    1ed2:	89 0f       	add	r24, r25
    1ed4:	80 93 04 21 	sts	0x2104, r24
	checksumADC[1] += SPIBuffer[1];
    1ed8:	90 91 05 21 	lds	r25, 0x2105
    1edc:	80 91 82 4d 	lds	r24, 0x4D82
    1ee0:	89 0f       	add	r24, r25
    1ee2:	80 93 05 21 	sts	0x2105, r24
	checksumADC[2] += SPIBuffer[2];	
    1ee6:	90 91 06 21 	lds	r25, 0x2106
    1eea:	80 91 83 4d 	lds	r24, 0x4D83
    1eee:	89 0f       	add	r24, r25
    1ef0:	80 93 06 21 	sts	0x2106, r24
}
    1ef4:	28 96       	adiw	r28, 0x08	; 8
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	08 95       	ret

00001f06 <__vector_77>:
ISR(TCD0_CCD_vect) {
	sampleCurrentChannel();
	SPICount = 0;		
}

ISR(TCD0_OVF_vect) {
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	0b b6       	in	r0, 0x3b	; 59
    1f10:	0f 92       	push	r0
    1f12:	11 24       	eor	r1, r1
    1f14:	2f 93       	push	r18
    1f16:	3f 93       	push	r19
    1f18:	4f 93       	push	r20
    1f1a:	5f 93       	push	r21
    1f1c:	6f 93       	push	r22
    1f1e:	7f 93       	push	r23
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	af 93       	push	r26
    1f26:	bf 93       	push	r27
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
	writeSE2FRAM();
    1f2c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <writeSE2FRAM>
}
    1f30:	ff 91       	pop	r31
    1f32:	ef 91       	pop	r30
    1f34:	bf 91       	pop	r27
    1f36:	af 91       	pop	r26
    1f38:	9f 91       	pop	r25
    1f3a:	8f 91       	pop	r24
    1f3c:	7f 91       	pop	r23
    1f3e:	6f 91       	pop	r22
    1f40:	5f 91       	pop	r21
    1f42:	4f 91       	pop	r20
    1f44:	3f 91       	pop	r19
    1f46:	2f 91       	pop	r18
    1f48:	0f 90       	pop	r0
    1f4a:	0b be       	out	0x3b, r0	; 59
    1f4c:	0f 90       	pop	r0
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	0f 90       	pop	r0
    1f52:	1f 90       	pop	r1
    1f54:	18 95       	reti

00001f56 <__vector_14>:
		PORTB.OUTSET = PIN1_bm;
	}
	
}

ISR(TCC0_OVF_vect) {
    1f56:	1f 92       	push	r1
    1f58:	0f 92       	push	r0
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	0f 92       	push	r0
    1f5e:	0b b6       	in	r0, 0x3b	; 59
    1f60:	0f 92       	push	r0
    1f62:	11 24       	eor	r1, r1
    1f64:	2f 93       	push	r18
    1f66:	3f 93       	push	r19
    1f68:	4f 93       	push	r20
    1f6a:	5f 93       	push	r21
    1f6c:	6f 93       	push	r22
    1f6e:	7f 93       	push	r23
    1f70:	8f 93       	push	r24
    1f72:	9f 93       	push	r25
    1f74:	af 93       	push	r26
    1f76:	bf 93       	push	r27
    1f78:	ef 93       	push	r30
    1f7a:	ff 93       	push	r31
	writeSE2FRAM();
    1f7c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <writeSE2FRAM>
}
    1f80:	ff 91       	pop	r31
    1f82:	ef 91       	pop	r30
    1f84:	bf 91       	pop	r27
    1f86:	af 91       	pop	r26
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	7f 91       	pop	r23
    1f8e:	6f 91       	pop	r22
    1f90:	5f 91       	pop	r21
    1f92:	4f 91       	pop	r20
    1f94:	3f 91       	pop	r19
    1f96:	2f 91       	pop	r18
    1f98:	0f 90       	pop	r0
    1f9a:	0b be       	out	0x3b, r0	; 59
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	0f 90       	pop	r0
    1fa2:	1f 90       	pop	r1
    1fa4:	18 95       	reti

00001fa6 <readFRAM>:
	checksumADC[2] += SPIBuffer[2];	
}

// Read from FRAM
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	ec 01       	movw	r28, r24
	SPIInit(SPI_MODE_0_gc);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    1fb2:	80 ed       	ldi	r24, 0xD0	; 208
    1fb4:	80 93 c0 08 	sts	0x08C0, r24

	
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
    1fb8:	80 e1       	ldi	r24, 0x10	; 16
    1fba:	e0 e4       	ldi	r30, 0x40	; 64
    1fbc:	f6 e0       	ldi	r31, 0x06	; 6
    1fbe:	86 83       	std	Z+6, r24	; 0x06
// FRAM power (VDC-2) must be on with CS_FRAM pulled high to write protect
void readFRAM (uint16_t numBytes) {
	SPIInit(SPI_MODE_0_gc);
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPICS(TRUE);
	PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    1fc0:	88 e0       	ldi	r24, 0x08	; 8
    1fc2:	e0 e2       	ldi	r30, 0x20	; 32
    1fc4:	f6 e0       	ldi	r31, 0x06	; 6
    1fc6:	86 83       	std	Z+6, r24	; 0x06
	nop();
    1fc8:	00 00       	nop
								
	SPIC.DATA = FR_READ;
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	e0 ec       	ldi	r30, 0xC0	; 192
    1fce:	f8 e0       	ldi	r31, 0x08	; 8
    1fd0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1fd2:	80 91 c2 08 	lds	r24, 0x08C2
    1fd6:	87 ff       	sbrs	r24, 7
    1fd8:	fc cf       	rjmp	.-8      	; 0x1fd2 <readFRAM+0x2c>
	SPIBuffer[12] = SPIC.DATA;
    1fda:	80 91 c3 08 	lds	r24, 0x08C3
    1fde:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 1);;
    1fe2:	80 91 7d 3d 	lds	r24, 0x3D7D
    1fe6:	e0 ec       	ldi	r30, 0xC0	; 192
    1fe8:	f8 e0       	ldi	r31, 0x08	; 8
    1fea:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    1fec:	80 91 c2 08 	lds	r24, 0x08C2
    1ff0:	87 ff       	sbrs	r24, 7
    1ff2:	fc cf       	rjmp	.-8      	; 0x1fec <readFRAM+0x46>
	SPIBuffer[12] = SPIC.DATA;
    1ff4:	80 91 c3 08 	lds	r24, 0x08C3
    1ff8:	80 93 8d 4d 	sts	0x4D8D, r24
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
    1ffc:	80 91 7c 3d 	lds	r24, 0x3D7C
    2000:	e0 ec       	ldi	r30, 0xC0	; 192
    2002:	f8 e0       	ldi	r31, 0x08	; 8
    2004:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    2006:	80 91 c2 08 	lds	r24, 0x08C2
    200a:	87 ff       	sbrs	r24, 7
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <readFRAM+0x60>
	SPIBuffer[12] = SPIC.DATA;
    200e:	80 91 c3 08 	lds	r24, 0x08C3
    2012:	80 93 8d 4d 	sts	0x4D8D, r24
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint16_t i = 0; i < numBytes; i++) { 
		SPIC.DATA = 0xAA;
    201a:	a0 ec       	ldi	r26, 0xC0	; 192
    201c:	b8 e0       	ldi	r27, 0x08	; 8
    201e:	9a ea       	ldi	r25, 0xAA	; 170
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <readFRAM+0x9a>
    2022:	13 96       	adiw	r26, 0x03	; 3
    2024:	9c 93       	st	X, r25
    2026:	13 97       	sbiw	r26, 0x03	; 3
		while(!(SPIC.STATUS & SPI_IF_bm));
    2028:	80 91 c2 08 	lds	r24, 0x08C2
    202c:	87 ff       	sbrs	r24, 7
    202e:	fc cf       	rjmp	.-8      	; 0x2028 <readFRAM+0x82>
		FRAMReadBuffer[i] = SPIC.DATA;
    2030:	80 91 c3 08 	lds	r24, 0x08C3
    2034:	f9 01       	movw	r30, r18
    2036:	e5 5f       	subi	r30, 0xF5	; 245
    2038:	fe 4d       	sbci	r31, 0xDE	; 222
    203a:	80 83       	st	Z, r24
	SPIBuffer[12] = SPIC.DATA;
	SPIC.DATA = *(((uint8_t*)&FRAMAddress) + 0);;
	while(!(SPIC.STATUS & SPI_IF_bm));
	SPIBuffer[12] = SPIC.DATA;
	
	for(uint16_t i = 0; i < numBytes; i++) { 
    203c:	2f 5f       	subi	r18, 0xFF	; 255
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	2c 17       	cp	r18, r28
    2042:	3d 07       	cpc	r19, r29
    2044:	70 f3       	brcs	.-36     	; 0x2022 <readFRAM+0x7c>
		SPIC.DATA = 0xAA;
		while(!(SPIC.STATUS & SPI_IF_bm));
		FRAMReadBuffer[i] = SPIC.DATA;
	}

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
    2046:	88 e0       	ldi	r24, 0x08	; 8
    2048:	e0 e2       	ldi	r30, 0x20	; 32
    204a:	f6 e0       	ldi	r31, 0x06	; 6
    204c:	85 83       	std	Z+5, r24	; 0x05
}

void SPICS(uint8_t enable) {
	if (enable) PORTC.OUTCLR = PIN4_bm;
	else {
		PORTC.OUTSET = PIN4_bm;
    204e:	e0 e4       	ldi	r30, 0x40	; 64
    2050:	f6 e0       	ldi	r31, 0x06	; 6
    2052:	80 e1       	ldi	r24, 0x10	; 16
    2054:	85 83       	std	Z+5, r24	; 0x05
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    2056:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    2058:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    205c:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    205e:	80 eb       	ldi	r24, 0xB0	; 176
    2060:	82 83       	std	Z+2, r24	; 0x02

	PORTB.OUTSET = PIN3_bm;  // CS_FRAM write protect
	SPICS(FALSE);
	SPIDisable();

}
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	08 95       	ret

00002068 <calcChecksumFRAM>:

	ADCPower(FALSE);

}

void calcChecksumFRAM() {
    2068:	2f 92       	push	r2
    206a:	3f 92       	push	r3
    206c:	4f 92       	push	r4
    206e:	5f 92       	push	r5
    2070:	6f 92       	push	r6
    2072:	7f 92       	push	r7
    2074:	8f 92       	push	r8
    2076:	9f 92       	push	r9
    2078:	af 92       	push	r10
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
    208c:	25 ea       	ldi	r18, 0xA5	; 165
    208e:	3d e4       	ldi	r19, 0x4D	; 77
    2090:	10 92 a5 4d 	sts	0x4DA5, r1
    2094:	10 92 a6 4d 	sts	0x4DA6, r1
    2098:	10 92 a7 4d 	sts	0x4DA7, r1
    209c:	10 92 a8 4d 	sts	0x4DA8, r1
    20a0:	10 92 a9 4d 	sts	0x4DA9, r1
    20a4:	10 92 aa 4d 	sts	0x4DAA, r1
    20a8:	10 92 ab 4d 	sts	0x4DAB, r1
    20ac:	10 92 ac 4d 	sts	0x4DAC, r1
    20b0:	80 91 a5 4d 	lds	r24, 0x4DA5
    20b4:	90 91 a6 4d 	lds	r25, 0x4DA6
    20b8:	40 91 a7 4d 	lds	r20, 0x4DA7
    20bc:	50 91 a8 4d 	lds	r21, 0x4DA8
    20c0:	60 91 a9 4d 	lds	r22, 0x4DA9
    20c4:	70 91 aa 4d 	lds	r23, 0x4DAA
    20c8:	e0 91 ab 4d 	lds	r30, 0x4DAB
    20cc:	f0 91 ac 4d 	lds	r31, 0x4DAC
    20d0:	d9 01       	movw	r26, r18
    20d2:	18 97       	sbiw	r26, 0x08	; 8
    20d4:	80 93 9d 4d 	sts	0x4D9D, r24
    20d8:	11 96       	adiw	r26, 0x01	; 1
    20da:	9c 93       	st	X, r25
    20dc:	11 97       	sbiw	r26, 0x01	; 1
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	4c 93       	st	X, r20
    20e2:	12 97       	sbiw	r26, 0x02	; 2
    20e4:	13 96       	adiw	r26, 0x03	; 3
    20e6:	5c 93       	st	X, r21
    20e8:	13 97       	sbiw	r26, 0x03	; 3
    20ea:	14 96       	adiw	r26, 0x04	; 4
    20ec:	6c 93       	st	X, r22
    20ee:	14 97       	sbiw	r26, 0x04	; 4
    20f0:	15 96       	adiw	r26, 0x05	; 5
    20f2:	7c 93       	st	X, r23
    20f4:	15 97       	sbiw	r26, 0x05	; 5
    20f6:	16 96       	adiw	r26, 0x06	; 6
    20f8:	ec 93       	st	X, r30
    20fa:	16 97       	sbiw	r26, 0x06	; 6
    20fc:	17 96       	adiw	r26, 0x07	; 7
    20fe:	fc 93       	st	X, r31
    2100:	17 97       	sbiw	r26, 0x07	; 7
    2102:	80 91 9d 4d 	lds	r24, 0x4D9D
    2106:	90 91 9e 4d 	lds	r25, 0x4D9E
    210a:	40 91 9f 4d 	lds	r20, 0x4D9F
    210e:	50 91 a0 4d 	lds	r21, 0x4DA0
    2112:	60 91 a1 4d 	lds	r22, 0x4DA1
    2116:	70 91 a2 4d 	lds	r23, 0x4DA2
    211a:	10 91 a3 4d 	lds	r17, 0x4DA3
    211e:	00 91 a4 4d 	lds	r16, 0x4DA4
    2122:	f9 01       	movw	r30, r18
    2124:	70 97       	sbiw	r30, 0x10	; 16
    2126:	80 93 95 4d 	sts	0x4D95, r24
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	42 83       	std	Z+2, r20	; 0x02
    212e:	53 83       	std	Z+3, r21	; 0x03
    2130:	64 83       	std	Z+4, r22	; 0x04
    2132:	75 83       	std	Z+5, r23	; 0x05
    2134:	16 83       	std	Z+6, r17	; 0x06
    2136:	07 83       	std	Z+7, r16	; 0x07
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
    2138:	10 92 09 21 	sts	0x2109, r1
    213c:	80 91 09 21 	lds	r24, 0x2109
    2140:	80 93 08 21 	sts	0x2108, r24
    2144:	80 91 08 21 	lds	r24, 0x2108
    2148:	80 93 07 21 	sts	0x2107, r24
	FRAMAddress = FR_BASEADD;
    214c:	10 92 7c 3d 	sts	0x3D7C, r1
    2150:	10 92 7d 3d 	sts	0x3D7D, r1
    2154:	66 24       	eor	r6, r6
    2156:	77 24       	eor	r7, r7
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
			if(k%9 == 8) sumFRAM[2] += *temp64;
    2158:	69 01       	movw	r12, r18
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
			if(k%9 == 5) sumFRAM[1] += *temp64;
    215a:	7d 01       	movw	r14, r26
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    215c:	ef 01       	movw	r28, r30
void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
    215e:	81 e7       	ldi	r24, 0x71	; 113
    2160:	9c e1       	ldi	r25, 0x1C	; 28
    2162:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <readFRAM>
		FRAMAddress += FR_READ_BUFFER_SIZE;
    2166:	80 91 7c 3d 	lds	r24, 0x3D7C
    216a:	90 91 7d 3d 	lds	r25, 0x3D7D
    216e:	8f 58       	subi	r24, 0x8F	; 143
    2170:	93 4e       	sbci	r25, 0xE3	; 227
    2172:	80 93 7c 3d 	sts	0x3D7C, r24
    2176:	90 93 7d 3d 	sts	0x3D7D, r25
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
			checksumFRAM[k%3] += FRAMReadBuffer[k];
    217e:	c8 01       	movw	r24, r16
    2180:	63 e0       	ldi	r22, 0x03	; 3
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodhi4>
    2188:	9c 01       	movw	r18, r24
    218a:	fc 01       	movw	r30, r24
    218c:	e9 5f       	subi	r30, 0xF9	; 249
    218e:	fe 4d       	sbci	r31, 0xDE	; 222
    2190:	80 81       	ld	r24, Z
    2192:	d8 01       	movw	r26, r16
    2194:	a5 5f       	subi	r26, 0xF5	; 245
    2196:	be 4d       	sbci	r27, 0xDE	; 222
    2198:	9c 91       	ld	r25, X
    219a:	89 0f       	add	r24, r25
    219c:	80 83       	st	Z, r24
		
			// create 64 bits from 3 sample bytes
			if(k%3 == 0) {			
    219e:	21 15       	cp	r18, r1
    21a0:	31 05       	cpc	r19, r1
    21a2:	19 f5       	brne	.+70     	; 0x21ea <calcChecksumFRAM+0x182>
				if(FRAMReadBuffer[k] & BIT7_bm) *temp64 = 0xFFFFFFFFFF000000; // sign extension if negative
    21a4:	8c 91       	ld	r24, X
    21a6:	e0 91 7f 4d 	lds	r30, 0x4D7F
    21aa:	f0 91 80 4d 	lds	r31, 0x4D80
    21ae:	87 ff       	sbrs	r24, 7
    21b0:	0a c0       	rjmp	.+20     	; 0x21c6 <calcChecksumFRAM+0x15e>
    21b2:	10 82       	st	Z, r1
    21b4:	11 82       	std	Z+1, r1	; 0x01
    21b6:	12 82       	std	Z+2, r1	; 0x02
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	83 83       	std	Z+3, r24	; 0x03
    21bc:	84 83       	std	Z+4, r24	; 0x04
    21be:	85 83       	std	Z+5, r24	; 0x05
    21c0:	86 83       	std	Z+6, r24	; 0x06
    21c2:	87 83       	std	Z+7, r24	; 0x07
    21c4:	08 c0       	rjmp	.+16     	; 0x21d6 <calcChecksumFRAM+0x16e>
				else *temp64 = 0x0000000000000000;
    21c6:	10 82       	st	Z, r1
    21c8:	11 82       	std	Z+1, r1	; 0x01
    21ca:	12 82       	std	Z+2, r1	; 0x02
    21cc:	13 82       	std	Z+3, r1	; 0x03
    21ce:	14 82       	std	Z+4, r1	; 0x04
    21d0:	15 82       	std	Z+5, r1	; 0x05
    21d2:	16 82       	std	Z+6, r1	; 0x06
    21d4:	17 82       	std	Z+7, r1	; 0x07
				*(((uint8_t*)temp64) + 2) = FRAMReadBuffer[k];
    21d6:	f8 01       	movw	r30, r16
    21d8:	e5 5f       	subi	r30, 0xF5	; 245
    21da:	fe 4d       	sbci	r31, 0xDE	; 222
    21dc:	80 81       	ld	r24, Z
    21de:	e0 91 7f 4d 	lds	r30, 0x4D7F
    21e2:	f0 91 80 4d 	lds	r31, 0x4D80
    21e6:	82 83       	std	Z+2, r24	; 0x02
    21e8:	0c c0       	rjmp	.+24     	; 0x2202 <calcChecksumFRAM+0x19a>
    21ea:	e0 91 7f 4d 	lds	r30, 0x4D7F
    21ee:	f0 91 80 4d 	lds	r31, 0x4D80
			} else if(k%3 == 1) {
    21f2:	21 30       	cpi	r18, 0x01	; 1
    21f4:	31 05       	cpc	r19, r1
    21f6:	19 f4       	brne	.+6      	; 0x21fe <calcChecksumFRAM+0x196>
				*(((uint8_t*)temp64) + 1) = FRAMReadBuffer[k];
    21f8:	8c 91       	ld	r24, X
    21fa:	81 83       	std	Z+1, r24	; 0x01
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <calcChecksumFRAM+0x19a>
			} else {
				*(((uint8_t*)temp64) + 0) = FRAMReadBuffer[k];
    21fe:	8c 91       	ld	r24, X
    2200:	80 83       	st	Z, r24
			}
			
			if(k%9 == 2) sumFRAM[0] += *temp64;
    2202:	c8 01       	movw	r24, r16
    2204:	69 e0       	ldi	r22, 0x09	; 9
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodhi4>
    220c:	82 30       	cpi	r24, 0x02	; 2
    220e:	91 05       	cpc	r25, r1
    2210:	09 f0       	breq	.+2      	; 0x2214 <calcChecksumFRAM+0x1ac>
    2212:	7b c0       	rjmp	.+246    	; 0x230a <calcChecksumFRAM+0x2a2>
    2214:	50 91 95 4d 	lds	r21, 0x4D95
    2218:	20 91 96 4d 	lds	r18, 0x4D96
    221c:	b0 91 97 4d 	lds	r27, 0x4D97
    2220:	a0 90 98 4d 	lds	r10, 0x4D98
    2224:	50 90 99 4d 	lds	r5, 0x4D99
    2228:	40 90 9a 4d 	lds	r4, 0x4D9A
    222c:	30 90 9b 4d 	lds	r3, 0x4D9B
    2230:	20 90 9c 4d 	lds	r2, 0x4D9C
    2234:	e0 91 7f 4d 	lds	r30, 0x4D7F
    2238:	f0 91 80 4d 	lds	r31, 0x4D80
    223c:	80 81       	ld	r24, Z
    223e:	31 81       	ldd	r19, Z+1	; 0x01
    2240:	42 81       	ldd	r20, Z+2	; 0x02
    2242:	73 81       	ldd	r23, Z+3	; 0x03
    2244:	a4 81       	ldd	r26, Z+4	; 0x04
    2246:	b5 80       	ldd	r11, Z+5	; 0x05
    2248:	86 80       	ldd	r8, Z+6	; 0x06
    224a:	67 81       	ldd	r22, Z+7	; 0x07
    224c:	58 0f       	add	r21, r24
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	58 17       	cp	r21, r24
    2252:	08 f0       	brcs	.+2      	; 0x2256 <calcChecksumFRAM+0x1ee>
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	83 2f       	mov	r24, r19
    2258:	82 0f       	add	r24, r18
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	83 17       	cp	r24, r19
    225e:	08 f0       	brcs	.+2      	; 0x2262 <calcChecksumFRAM+0x1fa>
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	99 2e       	mov	r9, r25
    2264:	98 0e       	add	r9, r24
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	98 16       	cp	r9, r24
    226a:	08 f0       	brcs	.+2      	; 0x226e <calcChecksumFRAM+0x206>
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	29 2b       	or	r18, r25
    2270:	84 2f       	mov	r24, r20
    2272:	8b 0f       	add	r24, r27
    2274:	31 e0       	ldi	r19, 0x01	; 1
    2276:	84 17       	cp	r24, r20
    2278:	08 f0       	brcs	.+2      	; 0x227c <calcChecksumFRAM+0x214>
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	f2 2f       	mov	r31, r18
    227e:	f8 0f       	add	r31, r24
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	f8 17       	cp	r31, r24
    2284:	08 f0       	brcs	.+2      	; 0x2288 <calcChecksumFRAM+0x220>
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	39 2b       	or	r19, r25
    228a:	87 2f       	mov	r24, r23
    228c:	8a 0d       	add	r24, r10
    228e:	21 e0       	ldi	r18, 0x01	; 1
    2290:	87 17       	cp	r24, r23
    2292:	08 f0       	brcs	.+2      	; 0x2296 <calcChecksumFRAM+0x22e>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	e3 2f       	mov	r30, r19
    2298:	e8 0f       	add	r30, r24
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	e8 17       	cp	r30, r24
    229e:	08 f0       	brcs	.+2      	; 0x22a2 <calcChecksumFRAM+0x23a>
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	29 2b       	or	r18, r25
    22a4:	8a 2f       	mov	r24, r26
    22a6:	85 0d       	add	r24, r5
    22a8:	31 e0       	ldi	r19, 0x01	; 1
    22aa:	8a 17       	cp	r24, r26
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <calcChecksumFRAM+0x248>
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	72 2f       	mov	r23, r18
    22b2:	78 0f       	add	r23, r24
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	78 17       	cp	r23, r24
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <calcChecksumFRAM+0x254>
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	39 2b       	or	r19, r25
    22be:	8b 2d       	mov	r24, r11
    22c0:	84 0d       	add	r24, r4
    22c2:	21 e0       	ldi	r18, 0x01	; 1
    22c4:	8b 15       	cp	r24, r11
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <calcChecksumFRAM+0x262>
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	43 2f       	mov	r20, r19
    22cc:	48 0f       	add	r20, r24
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	48 17       	cp	r20, r24
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <calcChecksumFRAM+0x26e>
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	29 2b       	or	r18, r25
    22d8:	88 2d       	mov	r24, r8
    22da:	83 0d       	add	r24, r3
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	88 15       	cp	r24, r8
    22e0:	08 f0       	brcs	.+2      	; 0x22e4 <calcChecksumFRAM+0x27c>
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	32 2f       	mov	r19, r18
    22e6:	38 0f       	add	r19, r24
    22e8:	21 e0       	ldi	r18, 0x01	; 1
    22ea:	38 17       	cp	r19, r24
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <calcChecksumFRAM+0x288>
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	92 2b       	or	r25, r18
    22f2:	62 0d       	add	r22, r2
    22f4:	96 0f       	add	r25, r22
    22f6:	50 93 95 4d 	sts	0x4D95, r21
    22fa:	99 82       	std	Y+1, r9	; 0x01
    22fc:	fa 83       	std	Y+2, r31	; 0x02
    22fe:	eb 83       	std	Y+3, r30	; 0x03
    2300:	7c 83       	std	Y+4, r23	; 0x04
    2302:	4d 83       	std	Y+5, r20	; 0x05
    2304:	3e 83       	std	Y+6, r19	; 0x06
    2306:	9f 83       	std	Y+7, r25	; 0x07
    2308:	05 c1       	rjmp	.+522    	; 0x2514 <calcChecksumFRAM+0x4ac>
			if(k%9 == 5) sumFRAM[1] += *temp64;
    230a:	85 30       	cpi	r24, 0x05	; 5
    230c:	91 05       	cpc	r25, r1
    230e:	09 f0       	breq	.+2      	; 0x2312 <calcChecksumFRAM+0x2aa>
    2310:	75 c0       	rjmp	.+234    	; 0x23fc <calcChecksumFRAM+0x394>
    2312:	50 91 9d 4d 	lds	r21, 0x4D9D
    2316:	20 91 9e 4d 	lds	r18, 0x4D9E
    231a:	b0 91 9f 4d 	lds	r27, 0x4D9F
    231e:	a0 90 a0 4d 	lds	r10, 0x4DA0
    2322:	50 90 a1 4d 	lds	r5, 0x4DA1
    2326:	40 90 a2 4d 	lds	r4, 0x4DA2
    232a:	30 90 a3 4d 	lds	r3, 0x4DA3
    232e:	20 90 a4 4d 	lds	r2, 0x4DA4
    2332:	e0 91 7f 4d 	lds	r30, 0x4D7F
    2336:	f0 91 80 4d 	lds	r31, 0x4D80
    233a:	80 81       	ld	r24, Z
    233c:	31 81       	ldd	r19, Z+1	; 0x01
    233e:	42 81       	ldd	r20, Z+2	; 0x02
    2340:	73 81       	ldd	r23, Z+3	; 0x03
    2342:	a4 81       	ldd	r26, Z+4	; 0x04
    2344:	b5 80       	ldd	r11, Z+5	; 0x05
    2346:	86 80       	ldd	r8, Z+6	; 0x06
    2348:	67 81       	ldd	r22, Z+7	; 0x07
    234a:	58 0f       	add	r21, r24
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	58 17       	cp	r21, r24
    2350:	08 f0       	brcs	.+2      	; 0x2354 <calcChecksumFRAM+0x2ec>
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	83 2f       	mov	r24, r19
    2356:	82 0f       	add	r24, r18
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	83 17       	cp	r24, r19
    235c:	08 f0       	brcs	.+2      	; 0x2360 <calcChecksumFRAM+0x2f8>
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	99 2e       	mov	r9, r25
    2362:	98 0e       	add	r9, r24
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	98 16       	cp	r9, r24
    2368:	08 f0       	brcs	.+2      	; 0x236c <calcChecksumFRAM+0x304>
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	29 2b       	or	r18, r25
    236e:	84 2f       	mov	r24, r20
    2370:	8b 0f       	add	r24, r27
    2372:	31 e0       	ldi	r19, 0x01	; 1
    2374:	84 17       	cp	r24, r20
    2376:	08 f0       	brcs	.+2      	; 0x237a <calcChecksumFRAM+0x312>
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	f2 2f       	mov	r31, r18
    237c:	f8 0f       	add	r31, r24
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	f8 17       	cp	r31, r24
    2382:	08 f0       	brcs	.+2      	; 0x2386 <calcChecksumFRAM+0x31e>
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	39 2b       	or	r19, r25
    2388:	87 2f       	mov	r24, r23
    238a:	8a 0d       	add	r24, r10
    238c:	21 e0       	ldi	r18, 0x01	; 1
    238e:	87 17       	cp	r24, r23
    2390:	08 f0       	brcs	.+2      	; 0x2394 <calcChecksumFRAM+0x32c>
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	e3 2f       	mov	r30, r19
    2396:	e8 0f       	add	r30, r24
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	e8 17       	cp	r30, r24
    239c:	08 f0       	brcs	.+2      	; 0x23a0 <calcChecksumFRAM+0x338>
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	29 2b       	or	r18, r25
    23a2:	8a 2f       	mov	r24, r26
    23a4:	85 0d       	add	r24, r5
    23a6:	31 e0       	ldi	r19, 0x01	; 1
    23a8:	8a 17       	cp	r24, r26
    23aa:	08 f0       	brcs	.+2      	; 0x23ae <calcChecksumFRAM+0x346>
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	72 2f       	mov	r23, r18
    23b0:	78 0f       	add	r23, r24
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	78 17       	cp	r23, r24
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <calcChecksumFRAM+0x352>
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	39 2b       	or	r19, r25
    23bc:	8b 2d       	mov	r24, r11
    23be:	84 0d       	add	r24, r4
    23c0:	21 e0       	ldi	r18, 0x01	; 1
    23c2:	8b 15       	cp	r24, r11
    23c4:	08 f0       	brcs	.+2      	; 0x23c8 <calcChecksumFRAM+0x360>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	43 2f       	mov	r20, r19
    23ca:	48 0f       	add	r20, r24
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	48 17       	cp	r20, r24
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <calcChecksumFRAM+0x36c>
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	29 2b       	or	r18, r25
    23d6:	88 2d       	mov	r24, r8
    23d8:	83 0d       	add	r24, r3
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	88 15       	cp	r24, r8
    23de:	08 f0       	brcs	.+2      	; 0x23e2 <calcChecksumFRAM+0x37a>
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	32 2f       	mov	r19, r18
    23e4:	38 0f       	add	r19, r24
    23e6:	21 e0       	ldi	r18, 0x01	; 1
    23e8:	38 17       	cp	r19, r24
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <calcChecksumFRAM+0x386>
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	92 2b       	or	r25, r18
    23f0:	62 0d       	add	r22, r2
    23f2:	96 0f       	add	r25, r22
    23f4:	50 93 9d 4d 	sts	0x4D9D, r21
    23f8:	d7 01       	movw	r26, r14
    23fa:	78 c0       	rjmp	.+240    	; 0x24ec <calcChecksumFRAM+0x484>
			if(k%9 == 8) sumFRAM[2] += *temp64;
    23fc:	88 30       	cpi	r24, 0x08	; 8
    23fe:	91 05       	cpc	r25, r1
    2400:	09 f0       	breq	.+2      	; 0x2404 <calcChecksumFRAM+0x39c>
    2402:	88 c0       	rjmp	.+272    	; 0x2514 <calcChecksumFRAM+0x4ac>
    2404:	50 91 a5 4d 	lds	r21, 0x4DA5
    2408:	20 91 a6 4d 	lds	r18, 0x4DA6
    240c:	b0 91 a7 4d 	lds	r27, 0x4DA7
    2410:	a0 90 a8 4d 	lds	r10, 0x4DA8
    2414:	50 90 a9 4d 	lds	r5, 0x4DA9
    2418:	40 90 aa 4d 	lds	r4, 0x4DAA
    241c:	30 90 ab 4d 	lds	r3, 0x4DAB
    2420:	20 90 ac 4d 	lds	r2, 0x4DAC
    2424:	e0 91 7f 4d 	lds	r30, 0x4D7F
    2428:	f0 91 80 4d 	lds	r31, 0x4D80
    242c:	80 81       	ld	r24, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	42 81       	ldd	r20, Z+2	; 0x02
    2432:	73 81       	ldd	r23, Z+3	; 0x03
    2434:	a4 81       	ldd	r26, Z+4	; 0x04
    2436:	b5 80       	ldd	r11, Z+5	; 0x05
    2438:	86 80       	ldd	r8, Z+6	; 0x06
    243a:	67 81       	ldd	r22, Z+7	; 0x07
    243c:	58 0f       	add	r21, r24
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	58 17       	cp	r21, r24
    2442:	08 f0       	brcs	.+2      	; 0x2446 <calcChecksumFRAM+0x3de>
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	83 2f       	mov	r24, r19
    2448:	82 0f       	add	r24, r18
    244a:	21 e0       	ldi	r18, 0x01	; 1
    244c:	83 17       	cp	r24, r19
    244e:	08 f0       	brcs	.+2      	; 0x2452 <calcChecksumFRAM+0x3ea>
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	99 2e       	mov	r9, r25
    2454:	98 0e       	add	r9, r24
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	98 16       	cp	r9, r24
    245a:	08 f0       	brcs	.+2      	; 0x245e <calcChecksumFRAM+0x3f6>
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	29 2b       	or	r18, r25
    2460:	84 2f       	mov	r24, r20
    2462:	8b 0f       	add	r24, r27
    2464:	31 e0       	ldi	r19, 0x01	; 1
    2466:	84 17       	cp	r24, r20
    2468:	08 f0       	brcs	.+2      	; 0x246c <calcChecksumFRAM+0x404>
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	f2 2f       	mov	r31, r18
    246e:	f8 0f       	add	r31, r24
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	f8 17       	cp	r31, r24
    2474:	08 f0       	brcs	.+2      	; 0x2478 <calcChecksumFRAM+0x410>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	39 2b       	or	r19, r25
    247a:	87 2f       	mov	r24, r23
    247c:	8a 0d       	add	r24, r10
    247e:	21 e0       	ldi	r18, 0x01	; 1
    2480:	87 17       	cp	r24, r23
    2482:	08 f0       	brcs	.+2      	; 0x2486 <calcChecksumFRAM+0x41e>
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	e3 2f       	mov	r30, r19
    2488:	e8 0f       	add	r30, r24
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	e8 17       	cp	r30, r24
    248e:	08 f0       	brcs	.+2      	; 0x2492 <calcChecksumFRAM+0x42a>
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	29 2b       	or	r18, r25
    2494:	8a 2f       	mov	r24, r26
    2496:	85 0d       	add	r24, r5
    2498:	31 e0       	ldi	r19, 0x01	; 1
    249a:	8a 17       	cp	r24, r26
    249c:	08 f0       	brcs	.+2      	; 0x24a0 <calcChecksumFRAM+0x438>
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	72 2f       	mov	r23, r18
    24a2:	78 0f       	add	r23, r24
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	78 17       	cp	r23, r24
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <calcChecksumFRAM+0x444>
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	39 2b       	or	r19, r25
    24ae:	8b 2d       	mov	r24, r11
    24b0:	84 0d       	add	r24, r4
    24b2:	21 e0       	ldi	r18, 0x01	; 1
    24b4:	8b 15       	cp	r24, r11
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <calcChecksumFRAM+0x452>
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	43 2f       	mov	r20, r19
    24bc:	48 0f       	add	r20, r24
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	48 17       	cp	r20, r24
    24c2:	08 f0       	brcs	.+2      	; 0x24c6 <calcChecksumFRAM+0x45e>
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	29 2b       	or	r18, r25
    24c8:	88 2d       	mov	r24, r8
    24ca:	83 0d       	add	r24, r3
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	88 15       	cp	r24, r8
    24d0:	08 f0       	brcs	.+2      	; 0x24d4 <calcChecksumFRAM+0x46c>
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	32 2f       	mov	r19, r18
    24d6:	38 0f       	add	r19, r24
    24d8:	21 e0       	ldi	r18, 0x01	; 1
    24da:	38 17       	cp	r19, r24
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <calcChecksumFRAM+0x478>
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	92 2b       	or	r25, r18
    24e2:	62 0d       	add	r22, r2
    24e4:	96 0f       	add	r25, r22
    24e6:	50 93 a5 4d 	sts	0x4DA5, r21
    24ea:	d6 01       	movw	r26, r12
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	9c 92       	st	X, r9
    24f0:	11 97       	sbiw	r26, 0x01	; 1
    24f2:	12 96       	adiw	r26, 0x02	; 2
    24f4:	fc 93       	st	X, r31
    24f6:	12 97       	sbiw	r26, 0x02	; 2
    24f8:	13 96       	adiw	r26, 0x03	; 3
    24fa:	ec 93       	st	X, r30
    24fc:	13 97       	sbiw	r26, 0x03	; 3
    24fe:	14 96       	adiw	r26, 0x04	; 4
    2500:	7c 93       	st	X, r23
    2502:	14 97       	sbiw	r26, 0x04	; 4
    2504:	15 96       	adiw	r26, 0x05	; 5
    2506:	4c 93       	st	X, r20
    2508:	15 97       	sbiw	r26, 0x05	; 5
    250a:	16 96       	adiw	r26, 0x06	; 6
    250c:	3c 93       	st	X, r19
    250e:	16 97       	sbiw	r26, 0x06	; 6
    2510:	17 96       	adiw	r26, 0x07	; 7
    2512:	9c 93       	st	X, r25
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
		readFRAM(FR_READ_BUFFER_SIZE);
		FRAMAddress += FR_READ_BUFFER_SIZE;
		for(uint16_t k = 0; k < FR_READ_BUFFER_SIZE; k++) {
    2514:	0f 5f       	subi	r16, 0xFF	; 255
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	bc e1       	ldi	r27, 0x1C	; 28
    251a:	01 37       	cpi	r16, 0x71	; 113
    251c:	1b 07       	cpc	r17, r27
    251e:	09 f0       	breq	.+2      	; 0x2522 <calcChecksumFRAM+0x4ba>
    2520:	2e ce       	rjmp	.-932    	; 0x217e <calcChecksumFRAM+0x116>

void calcChecksumFRAM() {
	sumFRAM[0] = sumFRAM[1] = sumFRAM[2] = 0;
	checksumFRAM[0] = checksumFRAM[1] = checksumFRAM[2] = 0;
	FRAMAddress = FR_BASEADD;
	for (uint16_t bufferNum = 0; bufferNum < FR_NUM_READ_BUFFERS; bufferNum++) {
    2522:	08 94       	sec
    2524:	61 1c       	adc	r6, r1
    2526:	71 1c       	adc	r7, r1
    2528:	e9 e0       	ldi	r30, 0x09	; 9
    252a:	6e 16       	cp	r6, r30
    252c:	71 04       	cpc	r7, r1
    252e:	09 f0       	breq	.+2      	; 0x2532 <calcChecksumFRAM+0x4ca>
    2530:	16 ce       	rjmp	.-980    	; 0x215e <calcChecksumFRAM+0xf6>
			
		}	
		
	}
	
}
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	ff 90       	pop	r15
    253c:	ef 90       	pop	r14
    253e:	df 90       	pop	r13
    2540:	cf 90       	pop	r12
    2542:	bf 90       	pop	r11
    2544:	af 90       	pop	r10
    2546:	9f 90       	pop	r9
    2548:	8f 90       	pop	r8
    254a:	7f 90       	pop	r7
    254c:	6f 90       	pop	r6
    254e:	5f 90       	pop	r5
    2550:	4f 90       	pop	r4
    2552:	3f 90       	pop	r3
    2554:	2f 90       	pop	r2
    2556:	08 95       	ret

00002558 <FRAMTest1Channel>:

	ADCPower(FALSE);
	
}

void FRAMTest1Channel(void) {
    2558:	8f 92       	push	r8
    255a:	9f 92       	push	r9
    255c:	af 92       	push	r10
    255e:	bf 92       	push	r11
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	0f 93       	push	r16

	CO_collectSeismic1Channel(ADC_CH_8_gc, FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
    2568:	0f 92       	push	r0
    256a:	0f 92       	push	r0
    256c:	80 e1       	ldi	r24, 0x10	; 16
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	ed b7       	in	r30, 0x3d	; 61
    2572:	fe b7       	in	r31, 0x3e	; 62
    2574:	81 83       	std	Z+1, r24	; 0x01
    2576:	92 83       	std	Z+2, r25	; 0x02
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	68 ec       	ldi	r22, 0xC8	; 200
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	05 e1       	ldi	r16, 0x15	; 21
    2582:	ee 24       	eor	r14, r14
    2584:	e3 94       	inc	r14
    2586:	5d e0       	ldi	r21, 0x0D	; 13
    2588:	c5 2e       	mov	r12, r21
    258a:	d1 2c       	mov	r13, r1
    258c:	3e e0       	ldi	r19, 0x0E	; 14
    258e:	a3 2e       	mov	r10, r19
    2590:	b1 2c       	mov	r11, r1
    2592:	9f e0       	ldi	r25, 0x0F	; 15
    2594:	89 2e       	mov	r8, r25
    2596:	91 2c       	mov	r9, r1
    2598:	0e 94 11 0c 	call	0x1822	; 0x1822 <CO_collectSeismic1Channel>
	GAIN_1_gc, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 15, 16);
	ADCPower(TRUE);
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a6:	80 ed       	ldi	r24, 0xD0	; 208
    25a8:	97 e0       	ldi	r25, 0x07	; 7
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <FRAMTest1Channel+0x52>
	_delay_us(250);
	
	calcChecksumFRAM();
    25ae:	0e 94 34 10 	call	0x2068	; 0x2068 <calcChecksumFRAM>

	ADCPower(FALSE);
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

}
    25b8:	0f 91       	pop	r16
    25ba:	ef 90       	pop	r14
    25bc:	df 90       	pop	r13
    25be:	cf 90       	pop	r12
    25c0:	bf 90       	pop	r11
    25c2:	af 90       	pop	r10
    25c4:	9f 90       	pop	r9
    25c6:	8f 90       	pop	r8
    25c8:	08 95       	ret

000025ca <FRAMTest3Channel>:
	SPICS(FALSE);
	SPIDisable();

}

void FRAMTest3Channel(void) {
    25ca:	8f 92       	push	r8
    25cc:	9f 92       	push	r9
    25ce:	af 92       	push	r10
    25d0:	bf 92       	push	r11
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <FRAMTest3Channel+0x18>
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t gains[3] = { GAIN_1_gc, GAIN_1_gc, GAIN_1_gc, };
    25e6:	de 01       	movw	r26, r28
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	e0 e0       	ldi	r30, 0x00	; 0
    25ec:	f0 e2       	ldi	r31, 0x20	; 32
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	01 90       	ld	r0, Z+
    25f2:	0d 92       	st	X+, r0
    25f4:	81 50       	subi	r24, 0x01	; 1
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <FRAMTest3Channel+0x26>
			
	CO_collectSeismic3Channel(FILTER_CH_2AND6_bm | FILTER_CH_3AND7_bm |
    25f8:	8e ec       	ldi	r24, 0xCE	; 206
    25fa:	be 01       	movw	r22, r28
    25fc:	6f 5f       	subi	r22, 0xFF	; 255
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	25 e1       	ldi	r18, 0x15	; 21
    2604:	01 e0       	ldi	r16, 0x01	; 1
    2606:	bd e0       	ldi	r27, 0x0D	; 13
    2608:	eb 2e       	mov	r14, r27
    260a:	f1 2c       	mov	r15, r1
    260c:	ae e0       	ldi	r26, 0x0E	; 14
    260e:	ca 2e       	mov	r12, r26
    2610:	d1 2c       	mov	r13, r1
    2612:	f0 e1       	ldi	r31, 0x10	; 16
    2614:	af 2e       	mov	r10, r31
    2616:	b1 2c       	mov	r11, r1
    2618:	e1 e1       	ldi	r30, 0x11	; 17
    261a:	8e 2e       	mov	r8, r30
    261c:	91 2c       	mov	r9, r1
    261e:	0e 94 34 0b 	call	0x1668	; 0x1668 <CO_collectSeismic3Channel>
		FILTER_CH_4AND8_bm | FILTER_HP_0_bm | FILTER_LP_600_gc,
		gains, SSPS_SE_64K_gc, 21, TRUE, 13, 14, 16, 17);
	ADCPower(TRUE);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
    2628:	80 ed       	ldi	r24, 0xD0	; 208
    262a:	97 e0       	ldi	r25, 0x07	; 7
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <FRAMTest3Channel+0x62>
	_delay_us(250);
	
	calcChecksumFRAM();
    2630:	0e 94 34 10 	call	0x2068	; 0x2068 <calcChecksumFRAM>

	ADCPower(FALSE);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	
}
    263a:	23 96       	adiw	r28, 0x03	; 3
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	cf 90       	pop	r12
    264e:	bf 90       	pop	r11
    2650:	af 90       	pop	r10
    2652:	9f 90       	pop	r9
    2654:	8f 90       	pop	r8
    2656:	08 95       	ret

00002658 <FRAMWriteKnowns>:

	ADCPower(FALSE);

}

void FRAMWriteKnowns() {
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
	FRAMAddress = FR_BASEADD;
    2662:	10 92 7c 3d 	sts	0x3D7C, r1
    2666:	10 92 7d 3d 	sts	0x3D7D, r1
	sampleCount = 0;
    266a:	10 92 8e 4d 	sts	0x4D8E, r1
    266e:	10 92 8f 4d 	sts	0x4D8F, r1
	checksumADC[0] = checksumADC[1] = checksumADC[2] = 0;
    2672:	10 92 06 21 	sts	0x2106, r1
    2676:	80 91 06 21 	lds	r24, 0x2106
    267a:	80 93 05 21 	sts	0x2105, r24
    267e:	80 91 05 21 	lds	r24, 0x2105
    2682:	80 93 04 21 	sts	0x2104, r24
	
	ADCPower(TRUE);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	SPIInit(SPI_MODE_1_gc);
    268c:	84 e0       	ldi	r24, 0x04	; 4
    268e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SPIInit>
	SPIC.CTRL = FR_SPI_CONFIG_gc;
    2692:	80 ed       	ldi	r24, 0xD0	; 208
    2694:	80 93 c0 08 	sts	0x08C0, r24
	SPIBuffer[0] = 0x0D;
    2698:	8d e0       	ldi	r24, 0x0D	; 13
    269a:	80 93 81 4d 	sts	0x4D81, r24
	SPIBuffer[1] = 0xF3;
    269e:	83 ef       	ldi	r24, 0xF3	; 243
    26a0:	80 93 82 4d 	sts	0x4D82, r24
	SPIBuffer[2] = 0x57;
    26a4:	87 e5       	ldi	r24, 0x57	; 87
    26a6:	80 93 83 4d 	sts	0x4D83, r24
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    26aa:	10 e4       	ldi	r17, 0x40	; 64
    26ac:	e1 2e       	mov	r14, r17
    26ae:	16 e0       	ldi	r17, 0x06	; 6
    26b0:	f1 2e       	mov	r15, r17
    26b2:	30 e1       	ldi	r19, 0x10	; 16
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    26b4:	a0 e2       	ldi	r26, 0x20	; 32
    26b6:	b6 e0       	ldi	r27, 0x06	; 6
    26b8:	28 e0       	ldi	r18, 0x08	; 8
		nop();
		SPIC.DATA = FR_WREN;
    26ba:	40 ec       	ldi	r20, 0xC0	; 192
    26bc:	58 e0       	ldi	r21, 0x08	; 8
    26be:	76 e0       	ldi	r23, 0x06	; 6
		while(!(SPIC.STATUS & SPI_IF_bm));
    26c0:	e0 ec       	ldi	r30, 0xC0	; 192
    26c2:	f8 e0       	ldi	r31, 0x08	; 8
		SPIBuffer[12] = SPIC.DATA;
		PORTB.OUTSET = PIN3_bm;  // latch opcode
		nop(); // time for CS_FRAM to accept high signal
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
		nop();
		SPIC.DATA = FR_WRITE;
    26c4:	62 e0       	ldi	r22, 0x02	; 2
    26c6:	84 c0       	rjmp	.+264    	; 0x27d0 <FRAMWriteKnowns+0x178>
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
		PORTC.OUTCLR = PIN4_bm;  // enable SPI-SS
    26c8:	e7 01       	movw	r28, r14
    26ca:	3e 83       	std	Y+6, r19	; 0x06
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    26cc:	16 96       	adiw	r26, 0x06	; 6
    26ce:	2c 93       	st	X, r18
    26d0:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    26d2:	00 00       	nop
		SPIC.DATA = FR_WREN;
    26d4:	ea 01       	movw	r28, r20
    26d6:	7b 83       	std	Y+3, r23	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    26d8:	80 91 c2 08 	lds	r24, 0x08C2
    26dc:	87 ff       	sbrs	r24, 7
    26de:	fc cf       	rjmp	.-8      	; 0x26d8 <FRAMWriteKnowns+0x80>
		SPIBuffer[12] = SPIC.DATA;
    26e0:	80 91 c3 08 	lds	r24, 0x08C3
    26e4:	80 93 8d 4d 	sts	0x4D8D, r24
		PORTB.OUTSET = PIN3_bm;  // latch opcode
    26e8:	15 96       	adiw	r26, 0x05	; 5
    26ea:	2c 93       	st	X, r18
    26ec:	15 97       	sbiw	r26, 0x05	; 5
		nop(); // time for CS_FRAM to accept high signal
    26ee:	00 00       	nop
		PORTB.OUTCLR = PIN3_bm;  // pull down CS_FRAM to write enable
    26f0:	16 96       	adiw	r26, 0x06	; 6
    26f2:	2c 93       	st	X, r18
    26f4:	16 97       	sbiw	r26, 0x06	; 6
		nop();
    26f6:	00 00       	nop
		SPIC.DATA = FR_WRITE;
    26f8:	63 83       	std	Z+3, r22	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    26fa:	80 91 c2 08 	lds	r24, 0x08C2
    26fe:	87 ff       	sbrs	r24, 7
    2700:	fc cf       	rjmp	.-8      	; 0x26fa <FRAMWriteKnowns+0xa2>
		SPIBuffer[12] = SPIC.DATA;
    2702:	80 91 c3 08 	lds	r24, 0x08C3
    2706:	80 93 8d 4d 	sts	0x4D8D, r24
		SPIC.DATA = *(((uint8_t*)&FRAMAddress)+1);
    270a:	80 91 7d 3d 	lds	r24, 0x3D7D
    270e:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2710:	80 91 c2 08 	lds	r24, 0x08C2
    2714:	87 ff       	sbrs	r24, 7
    2716:	fc cf       	rjmp	.-8      	; 0x2710 <FRAMWriteKnowns+0xb8>
		SPIBuffer[12] = SPIC.DATA;
    2718:	80 91 c3 08 	lds	r24, 0x08C3
    271c:	80 93 8d 4d 	sts	0x4D8D, r24
		SPIC.DATA = *((uint8_t*)&FRAMAddress);
    2720:	80 91 7c 3d 	lds	r24, 0x3D7C
    2724:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2726:	80 91 c2 08 	lds	r24, 0x08C2
    272a:	87 ff       	sbrs	r24, 7
    272c:	fc cf       	rjmp	.-8      	; 0x2726 <FRAMWriteKnowns+0xce>
		SPIBuffer[12] = SPIC.DATA;
    272e:	80 91 c3 08 	lds	r24, 0x08C3
    2732:	80 93 8d 4d 	sts	0x4D8D, r24
		SPIC.DATA = SPIBuffer[0];
    2736:	80 91 81 4d 	lds	r24, 0x4D81
    273a:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    273c:	80 91 c2 08 	lds	r24, 0x08C2
    2740:	87 ff       	sbrs	r24, 7
    2742:	fc cf       	rjmp	.-8      	; 0x273c <FRAMWriteKnowns+0xe4>
		SPIBuffer[12] = SPIC.DATA;
    2744:	80 91 c3 08 	lds	r24, 0x08C3
    2748:	80 93 8d 4d 	sts	0x4D8D, r24
		SPIC.DATA = SPIBuffer[1];
    274c:	80 91 82 4d 	lds	r24, 0x4D82
    2750:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2752:	80 91 c2 08 	lds	r24, 0x08C2
    2756:	87 ff       	sbrs	r24, 7
    2758:	fc cf       	rjmp	.-8      	; 0x2752 <FRAMWriteKnowns+0xfa>
		SPIBuffer[12] = SPIC.DATA;
    275a:	80 91 c3 08 	lds	r24, 0x08C3
    275e:	80 93 8d 4d 	sts	0x4D8D, r24
		SPIC.DATA = SPIBuffer[2];
    2762:	80 91 83 4d 	lds	r24, 0x4D83
    2766:	83 83       	std	Z+3, r24	; 0x03
		while(!(SPIC.STATUS & SPI_IF_bm));
    2768:	80 91 c2 08 	lds	r24, 0x08C2
    276c:	87 ff       	sbrs	r24, 7
    276e:	fc cf       	rjmp	.-8      	; 0x2768 <FRAMWriteKnowns+0x110>
		SPIBuffer[12] = SPIC.DATA;
    2770:	80 91 c3 08 	lds	r24, 0x08C3
    2774:	80 93 8d 4d 	sts	0x4D8D, r24
			
		PORTB.OUTSET = PIN3_bm;  // pull up CS_FRAM to write protect
    2778:	15 96       	adiw	r26, 0x05	; 5
    277a:	2c 93       	st	X, r18
    277c:	15 97       	sbiw	r26, 0x05	; 5
		PORTC.OUTSET = PIN4_bm;  // disable SPI-SS
    277e:	e7 01       	movw	r28, r14
    2780:	3d 83       	std	Y+5, r19	; 0x05
		
		FRAMAddress +=3;
    2782:	80 91 7c 3d 	lds	r24, 0x3D7C
    2786:	90 91 7d 3d 	lds	r25, 0x3D7D
    278a:	03 96       	adiw	r24, 0x03	; 3
    278c:	80 93 7c 3d 	sts	0x3D7C, r24
    2790:	90 93 7d 3d 	sts	0x3D7D, r25
		checksumADC[0] += SPIBuffer[0];
    2794:	90 91 04 21 	lds	r25, 0x2104
    2798:	80 91 81 4d 	lds	r24, 0x4D81
    279c:	89 0f       	add	r24, r25
    279e:	80 93 04 21 	sts	0x2104, r24
		checksumADC[1] += SPIBuffer[1];
    27a2:	90 91 05 21 	lds	r25, 0x2105
    27a6:	80 91 82 4d 	lds	r24, 0x4D82
    27aa:	89 0f       	add	r24, r25
    27ac:	80 93 05 21 	sts	0x2105, r24
		checksumADC[2] += SPIBuffer[2];
    27b0:	90 91 06 21 	lds	r25, 0x2106
    27b4:	80 91 83 4d 	lds	r24, 0x4D83
    27b8:	89 0f       	add	r24, r25
    27ba:	80 93 06 21 	sts	0x2106, r24
		
		sampleCount++;
    27be:	80 91 8e 4d 	lds	r24, 0x4D8E
    27c2:	90 91 8f 4d 	lds	r25, 0x4D8F
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	80 93 8e 4d 	sts	0x4D8E, r24
    27cc:	90 93 8f 4d 	sts	0x4D8F, r25
	SPIC.CTRL = FR_SPI_CONFIG_gc;
	SPIBuffer[0] = 0x0D;
	SPIBuffer[1] = 0xF3;
	SPIBuffer[2] = 0x57;
	
	while(sampleCount < FR_TOTAL_NUM_SE_SAMPLES) {
    27d0:	80 91 8e 4d 	lds	r24, 0x4D8E
    27d4:	90 91 8f 4d 	lds	r25, 0x4D8F
    27d8:	83 55       	subi	r24, 0x53	; 83
    27da:	95 45       	sbci	r25, 0x55	; 85
    27dc:	08 f4       	brcc	.+2      	; 0x27e0 <FRAMWriteKnowns+0x188>
    27de:	74 cf       	rjmp	.-280    	; 0x26c8 <FRAMWriteKnowns+0x70>
		PORTC.OUTSET = PIN4_bm;
	}	
}

void SPIDisable() {
	PORTC.OUTSET = PIN4_bm;
    27e0:	e0 e4       	ldi	r30, 0x40	; 64
    27e2:	f6 e0       	ldi	r31, 0x06	; 6
    27e4:	80 e1       	ldi	r24, 0x10	; 16
    27e6:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0x00;
    27e8:	10 92 c0 08 	sts	0x08C0, r1
	PORTC.OUTCLR = PIN4_bm;
    27ec:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRCLR = PIN4_bm | PIN5_bm | PIN7_bm;
    27ee:	80 eb       	ldi	r24, 0xB0	; 176
    27f0:	82 83       	std	Z+2, r24	; 0x02
		
		sampleCount++;
	}
	
	SPIDisable();
	ADCPower(FALSE);
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
}
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	08 95       	ret

00002804 <FRAMWriteKnownsCheck>:
	
}


void FRAMWriteKnownsCheck() {
	FRAMWriteKnowns();
    2804:	0e 94 2c 13 	call	0x2658	; 0x2658 <FRAMWriteKnowns>
	ADCPower(TRUE);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
    280e:	80 ed       	ldi	r24, 0xD0	; 208
    2810:	97 e0       	ldi	r25, 0x07	; 7
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <FRAMWriteKnownsCheck+0xe>

	_delay_us(250);
	calcChecksumFRAM();
    2816:	0e 94 34 10 	call	0x2068	; 0x2068 <calcChecksumFRAM>

	ADCPower(FALSE);
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

}
    2820:	08 95       	ret

00002822 <SDHC_CS>:
void SDHC_write_block(uint8_t *buffer, uint16_t address, uint16_t numBlocks);
void SDHC_read_register(uint8_t *buffer, uint8_t cmd);

void SDHC_CS(uint8_t enable) {
		
}
    2822:	08 95       	ret

00002824 <CO_collectBatt>:
	*maxV = (max * 1000 / 4095) - 50;
	*minV = (min * 1000  / 4095) - 50;
}


void CO_collectBatt(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    2824:	2f 92       	push	r2
    2826:	3f 92       	push	r3
    2828:	4f 92       	push	r4
    282a:	5f 92       	push	r5
    282c:	6f 92       	push	r6
    282e:	7f 92       	push	r7
    2830:	8f 92       	push	r8
    2832:	9f 92       	push	r9
    2834:	af 92       	push	r10
    2836:	bf 92       	push	r11
    2838:	cf 92       	push	r12
    283a:	df 92       	push	r13
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	25 97       	sbiw	r28, 0x05	; 5
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	1c 01       	movw	r2, r24
    2854:	6a 83       	std	Y+2, r22	; 0x02
    2856:	7b 83       	std	Y+3, r23	; 0x03
    2858:	4c 83       	std	Y+4, r20	; 0x04
    285a:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>
	PortEx_DIRSET(BIT2_bm, PS_BANKB);
    2862:	84 e0       	ldi	r24, 0x04	; 4
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	0e 94 d0 06 	call	0xda0	; 0xda0 <PortEx_DIRSET>
	PortEx_OUTSET(BIT2_bm, PS_BANKB); // activate PIO24 (VBATT)
    286a:	84 e0       	ldi	r24, 0x04	; 4
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PortEx_OUTSET>
	//setPortEx(BIT2_bm, PS_BANKB);
		
	/* Move stored calibration values to ADCB. */
	ADC_CalibrationValues_Load(&ADCB);
    2872:	80 e4       	ldi	r24, 0x40	; 64
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	0e 94 e6 02 	call	0x5cc	; 0x5cc <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    287a:	00 e4       	ldi	r16, 0x40	; 64
    287c:	12 e0       	ldi	r17, 0x02	; 2
    287e:	80 91 41 02 	lds	r24, 0x0241
    2882:	89 7e       	andi	r24, 0xE9	; 233
    2884:	f8 01       	movw	r30, r16
    2886:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV32_gc);
    2888:	80 91 44 02 	lds	r24, 0x0244
    288c:	88 7f       	andi	r24, 0xF8	; 248
    288e:	83 60       	ori	r24, 0x03	; 3
    2890:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADCB to be 1.0 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_INT1V_gc); 
    2892:	80 91 42 02 	lds	r24, 0x0242
    2896:	8f 7c       	andi	r24, 0xCF	; 207
    2898:	82 83       	std	Z+2, r24	; 0x02

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
    289a:	20 e6       	ldi	r18, 0x60	; 96
    289c:	e2 2e       	mov	r14, r18
    289e:	22 e0       	ldi	r18, 0x02	; 2
    28a0:	f2 2e       	mov	r15, r18
    28a2:	80 91 60 02 	lds	r24, 0x0260
    28a6:	80 7e       	andi	r24, 0xE0	; 224
    28a8:	81 60       	ori	r24, 0x01	; 1
    28aa:	80 93 60 02 	sts	0x0260, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	// Get offset value for ADCB.
   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    28ae:	89 e0       	ldi	r24, 0x09	; 9
    28b0:	f7 01       	movw	r30, r14
    28b2:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
    28b4:	80 91 40 02 	lds	r24, 0x0240
    28b8:	81 60       	ori	r24, 0x01	; 1
    28ba:	80 93 40 02 	sts	0x0240, r24
	// Wait until common mode voltage is stable. Default clk is 16MHz
	ADC_Wait_32MHz(&ADCB);
    28be:	80 e4       	ldi	r24, 0x40	; 64
    28c0:	92 e0       	ldi	r25, 0x02	; 2
    28c2:	0e 94 3e 03 	call	0x67c	; 0x67c <ADC_Wait_32MHz>
	offset = ADC_Offset_Get_Unsigned(&ADCB, &ADCB.CH0, false);
    28c6:	80 e4       	ldi	r24, 0x40	; 64
    28c8:	92 e0       	ldi	r25, 0x02	; 2
    28ca:	60 e6       	ldi	r22, 0x60	; 96
    28cc:	72 e0       	ldi	r23, 0x02	; 2
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Offset_Get_Unsigned>
    28d4:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCB);
    28d6:	80 91 40 02 	lds	r24, 0x0240
    28da:	8e 7f       	andi	r24, 0xFE	; 254
    28dc:	80 93 40 02 	sts	0x0240, r24
    
	/* Set input to the channels in ADC B */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    28e0:	f7 01       	movw	r30, r14
    28e2:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0_gc);
    28e4:	80 91 43 02 	lds	r24, 0x0243
    28e8:	8f 73       	andi	r24, 0x3F	; 63
    28ea:	f8 01       	movw	r30, r16
    28ec:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCB);
    28ee:	80 91 40 02 	lds	r24, 0x0240
    28f2:	81 60       	ori	r24, 0x01	; 1
    28f4:	80 93 40 02 	sts	0x0240, r24

	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
    28f8:	80 e4       	ldi	r24, 0x40	; 64
    28fa:	92 e0       	ldi	r25, 0x02	; 2
    28fc:	0e 94 3e 03 	call	0x67c	; 0x67c <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);
    2900:	80 91 41 02 	lds	r24, 0x0241
    2904:	88 60       	ori	r24, 0x08	; 8
    2906:	f8 01       	movw	r30, r16
    2908:	81 83       	std	Z+1, r24	; 0x01
    290a:	ee 24       	eor	r14, r14
    290c:	ff 24       	eor	r15, r15
    290e:	87 01       	movw	r16, r14
    2910:	41 2c       	mov	r4, r1
    2912:	90 e1       	ldi	r25, 0x10	; 16
    2914:	59 2e       	mov	r5, r25
    2916:	61 2c       	mov	r6, r1
    2918:	71 2c       	mov	r7, r1
    291a:	88 24       	eor	r8, r8
    291c:	99 24       	eor	r9, r9
    291e:	54 01       	movw	r10, r8
    2920:	cc 24       	eor	r12, r12
    2922:	dd 24       	eor	r13, r13
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCB channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCB.CH0));
    2924:	80 91 63 02 	lds	r24, 0x0263
    2928:	80 ff       	sbrs	r24, 0
    292a:	fc cf       	rjmp	.-8      	; 0x2924 <CO_collectBatt+0x100>
		tempResultB = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, offset);
    292c:	69 81       	ldd	r22, Y+1	; 0x01
    292e:	80 e6       	ldi	r24, 0x60	; 96
    2930:	92 e0       	ldi	r25, 0x02	; 2
    2932:	0e 94 19 03 	call	0x632	; 0x632 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResultB;
    2936:	a0 e0       	ldi	r26, 0x00	; 0
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 0e       	add	r14, r24
    293c:	f9 1e       	adc	r15, r25
    293e:	0a 1f       	adc	r16, r26
    2940:	1b 1f       	adc	r17, r27
    2942:	88 16       	cp	r8, r24
    2944:	99 06       	cpc	r9, r25
    2946:	aa 06       	cpc	r10, r26
    2948:	bb 06       	cpc	r11, r27
    294a:	10 f4       	brcc	.+4      	; 0x2950 <CO_collectBatt+0x12c>
    294c:	4c 01       	movw	r8, r24
    294e:	5d 01       	movw	r10, r26
    2950:	84 15       	cp	r24, r4
    2952:	95 05       	cpc	r25, r5
    2954:	a6 05       	cpc	r26, r6
    2956:	b7 05       	cpc	r27, r7
    2958:	10 f4       	brcc	.+4      	; 0x295e <CO_collectBatt+0x13a>
    295a:	2c 01       	movw	r4, r24
    295c:	3d 01       	movw	r6, r26

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCB);

	/* Store samples.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    295e:	08 94       	sec
    2960:	c1 1c       	adc	r12, r1
    2962:	d1 1c       	adc	r13, r1
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	cf 16       	cp	r12, r31
    2968:	f4 e0       	ldi	r31, 0x04	; 4
    296a:	df 06       	cpc	r13, r31
    296c:	d9 f6       	brne	.-74     	; 0x2924 <CO_collectBatt+0x100>
		if (min > tempResultB) { min = tempResultB;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCB);
    296e:	80 91 41 02 	lds	r24, 0x0241
    2972:	87 7f       	andi	r24, 0xF7	; 247
    2974:	e0 e4       	ldi	r30, 0x40	; 64
    2976:	f2 e0       	ldi	r31, 0x02	; 2
    2978:	81 83       	std	Z+1, r24	; 0x01
	ADC_Disable(&ADCB);
    297a:	80 91 40 02 	lds	r24, 0x0240
    297e:	8e 7f       	andi	r24, 0xFE	; 254
    2980:	80 93 40 02 	sts	0x0240, r24

	average = sum / NUM_SAMPLES;
	
	PortEx_DIRCLR(BIT2_bm, PS_BANKB);  // deactivate PIO24 (VBATT)
    2984:	84 e0       	ldi	r24, 0x04	; 4
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <PortEx_DIRCLR>
	//setPortEx(0x00, PS_BANKB);
  	ADCPower(FALSE);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    2992:	8a e0       	ldi	r24, 0x0A	; 10
    2994:	16 95       	lsr	r17
    2996:	07 95       	ror	r16
    2998:	f7 94       	ror	r15
    299a:	e7 94       	ror	r14
    299c:	8a 95       	dec	r24
    299e:	d1 f7       	brne	.-12     	; 0x2994 <CO_collectBatt+0x170>
    29a0:	c8 01       	movw	r24, r16
    29a2:	b7 01       	movw	r22, r14
    29a4:	28 ee       	ldi	r18, 0xE8	; 232
    29a6:	33 e0       	ldi	r19, 0x03	; 3
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    29b0:	2f ef       	ldi	r18, 0xFF	; 255
    29b2:	3f e0       	ldi	r19, 0x0F	; 15
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    29bc:	22 53       	subi	r18, 0x32	; 50
    29be:	30 40       	sbci	r19, 0x00	; 0
    29c0:	f1 01       	movw	r30, r2
    29c2:	20 83       	st	Z, r18
    29c4:	31 83       	std	Z+1, r19	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    29c6:	c5 01       	movw	r24, r10
    29c8:	b4 01       	movw	r22, r8
    29ca:	28 ee       	ldi	r18, 0xE8	; 232
    29cc:	33 e0       	ldi	r19, 0x03	; 3
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    29d6:	2f ef       	ldi	r18, 0xFF	; 255
    29d8:	3f e0       	ldi	r19, 0x0F	; 15
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    29e2:	22 53       	subi	r18, 0x32	; 50
    29e4:	30 40       	sbci	r19, 0x00	; 0
    29e6:	ec 81       	ldd	r30, Y+4	; 0x04
    29e8:	fd 81       	ldd	r31, Y+5	; 0x05
    29ea:	20 83       	st	Z, r18
    29ec:	31 83       	std	Z+1, r19	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    29ee:	c3 01       	movw	r24, r6
    29f0:	b2 01       	movw	r22, r4
    29f2:	28 ee       	ldi	r18, 0xE8	; 232
    29f4:	33 e0       	ldi	r19, 0x03	; 3
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    29fe:	2f ef       	ldi	r18, 0xFF	; 255
    2a00:	3f e0       	ldi	r19, 0x0F	; 15
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    2a0a:	22 53       	subi	r18, 0x32	; 50
    2a0c:	30 40       	sbci	r19, 0x00	; 0
    2a0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a10:	fb 81       	ldd	r31, Y+3	; 0x03
    2a12:	20 83       	st	Z, r18
    2a14:	31 83       	std	Z+1, r19	; 0x01
}
    2a16:	25 96       	adiw	r28, 0x05	; 5
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	df 90       	pop	r13
    2a2a:	cf 90       	pop	r12
    2a2c:	bf 90       	pop	r11
    2a2e:	af 90       	pop	r10
    2a30:	9f 90       	pop	r9
    2a32:	8f 90       	pop	r8
    2a34:	7f 90       	pop	r7
    2a36:	6f 90       	pop	r6
    2a38:	5f 90       	pop	r5
    2a3a:	4f 90       	pop	r4
    2a3c:	3f 90       	pop	r3
    2a3e:	2f 90       	pop	r2
    2a40:	08 95       	ret

00002a42 <CO_collectTemp>:
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );
	
}

void CO_collectTemp(uint16_t *avgV, uint16_t *minV, uint16_t *maxV) {
    2a42:	2f 92       	push	r2
    2a44:	3f 92       	push	r3
    2a46:	4f 92       	push	r4
    2a48:	5f 92       	push	r5
    2a4a:	6f 92       	push	r6
    2a4c:	7f 92       	push	r7
    2a4e:	8f 92       	push	r8
    2a50:	9f 92       	push	r9
    2a52:	af 92       	push	r10
    2a54:	bf 92       	push	r11
    2a56:	cf 92       	push	r12
    2a58:	df 92       	push	r13
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	25 97       	sbiw	r28, 0x05	; 5
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	1c 01       	movw	r2, r24
    2a72:	6a 83       	std	Y+2, r22	; 0x02
    2a74:	7b 83       	std	Y+3, r23	; 0x03
    2a76:	4c 83       	std	Y+4, r20	; 0x04
    2a78:	5d 83       	std	Y+5, r21	; 0x05
	uint32_t average;
	uint32_t min = 4096;
	uint32_t max = 0;
	volatile int8_t offset;	

	ADCPower(TRUE);
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

	/* Move stored calibration values to ADCA. */
	ADC_CalibrationValues_Load(&ADCA);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	92 e0       	ldi	r25, 0x02	; 2
    2a84:	0e 94 e6 02 	call	0x5cc	; 0x5cc <ADC_CalibrationValues_Load>

	/* Set up ADC A to have unsigned conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
    2a88:	00 e0       	ldi	r16, 0x00	; 0
    2a8a:	12 e0       	ldi	r17, 0x02	; 2
    2a8c:	80 91 01 02 	lds	r24, 0x0201
    2a90:	89 7e       	andi	r24, 0xE9	; 233
    2a92:	f8 01       	movw	r30, r16
    2a94:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV32_gc);
    2a96:	80 91 04 02 	lds	r24, 0x0204
    2a9a:	88 7f       	andi	r24, 0xF8	; 248
    2a9c:	83 60       	ori	r24, 0x03	; 3
    2a9e:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADCA to be 1.0 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_INT1V_gc); 
    2aa0:	80 91 02 02 	lds	r24, 0x0202
    2aa4:	8f 7c       	andi	r24, 0xCF	; 207
    2aa6:	82 83       	std	Z+2, r24	; 0x02

	/* Setup channel 0, 1, 2 and 3 with different inputs. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
    2aa8:	50 e2       	ldi	r21, 0x20	; 32
    2aaa:	e5 2e       	mov	r14, r21
    2aac:	52 e0       	ldi	r21, 0x02	; 2
    2aae:	f5 2e       	mov	r15, r21
    2ab0:	80 91 20 02 	lds	r24, 0x0220
    2ab4:	80 7e       	andi	r24, 0xE0	; 224
    2ab6:	81 60       	ori	r24, 0x01	; 1
    2ab8:	80 93 20 02 	sts	0x0220, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	
	/* Get offset value for ADCA. */
   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
    2abc:	89 e0       	ldi	r24, 0x09	; 9
    2abe:	f7 01       	movw	r30, r14
    2ac0:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
    2ac2:	80 91 00 02 	lds	r24, 0x0200
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	80 93 00 02 	sts	0x0200, r24
	/* Wait until common mode voltage is stable. Default clk is 16MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	92 e0       	ldi	r25, 0x02	; 2
    2ad0:	0e 94 3e 03 	call	0x67c	; 0x67c <ADC_Wait_32MHz>
 	offset = ADC_Offset_Get_Unsigned(&ADCA, &ADCA.CH0, false);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	92 e0       	ldi	r25, 0x02	; 2
    2ad8:	60 e2       	ldi	r22, 0x20	; 32
    2ada:	72 e0       	ldi	r23, 0x02	; 2
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Offset_Get_Unsigned>
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    ADC_Disable(&ADCA);
    2ae4:	80 91 00 02 	lds	r24, 0x0200
    2ae8:	8e 7f       	andi	r24, 0xFE	; 254
    2aea:	80 93 00 02 	sts	0x0200, r24
    
	/* Set input to the channels in ADCA */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
    2aee:	f7 01       	movw	r30, r14
    2af0:	11 82       	std	Z+1, r1	; 0x01
	
	/* Setup sweep. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0_gc);
    2af2:	80 91 03 02 	lds	r24, 0x0203
    2af6:	8f 73       	andi	r24, 0x3F	; 63
    2af8:	f8 01       	movw	r30, r16
    2afa:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC .*/
	ADC_Enable(&ADCA);
    2afc:	80 91 00 02 	lds	r24, 0x0200
    2b00:	81 60       	ori	r24, 0x01	; 1
    2b02:	80 93 00 02 	sts	0x0200, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	92 e0       	ldi	r25, 0x02	; 2
    2b0a:	0e 94 3e 03 	call	0x67c	; 0x67c <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
    2b0e:	80 91 01 02 	lds	r24, 0x0201
    2b12:	88 60       	ori	r24, 0x08	; 8
    2b14:	f8 01       	movw	r30, r16
    2b16:	81 83       	std	Z+1, r24	; 0x01
    2b18:	ee 24       	eor	r14, r14
    2b1a:	ff 24       	eor	r15, r15
    2b1c:	87 01       	movw	r16, r14
    2b1e:	41 2c       	mov	r4, r1
    2b20:	40 e1       	ldi	r20, 0x10	; 16
    2b22:	54 2e       	mov	r5, r20
    2b24:	61 2c       	mov	r6, r1
    2b26:	71 2c       	mov	r7, r1
    2b28:	88 24       	eor	r8, r8
    2b2a:	99 24       	eor	r9, r9
    2b2c:	54 01       	movw	r10, r8
    2b2e:	cc 24       	eor	r12, r12
    2b30:	dd 24       	eor	r13, r13
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {

	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
    2b32:	80 91 23 02 	lds	r24, 0x0223
    2b36:	80 ff       	sbrs	r24, 0
    2b38:	fc cf       	rjmp	.-8      	; 0x2b32 <CO_collectTemp+0xf0>
		tempResult = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, offset);
    2b3a:	69 81       	ldd	r22, Y+1	; 0x01
    2b3c:	80 e2       	ldi	r24, 0x20	; 32
    2b3e:	92 e0       	ldi	r25, 0x02	; 2
    2b40:	0e 94 19 03 	call	0x632	; 0x632 <ADC_ResultCh_GetWord_Signed>
		sum+=tempResult;
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e8 0e       	add	r14, r24
    2b4a:	f9 1e       	adc	r15, r25
    2b4c:	0a 1f       	adc	r16, r26
    2b4e:	1b 1f       	adc	r17, r27
    2b50:	88 16       	cp	r8, r24
    2b52:	99 06       	cpc	r9, r25
    2b54:	aa 06       	cpc	r10, r26
    2b56:	bb 06       	cpc	r11, r27
    2b58:	10 f4       	brcc	.+4      	; 0x2b5e <CO_collectTemp+0x11c>
    2b5a:	4c 01       	movw	r8, r24
    2b5c:	5d 01       	movw	r10, r26
    2b5e:	84 15       	cp	r24, r4
    2b60:	95 05       	cpc	r25, r5
    2b62:	a6 05       	cpc	r26, r6
    2b64:	b7 05       	cpc	r27, r7
    2b66:	10 f4       	brcc	.+4      	; 0x2b6c <CO_collectTemp+0x12a>
    2b68:	2c 01       	movw	r4, r24
    2b6a:	3d 01       	movw	r6, r26

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);

	/* Sample onboard ADC.*/
	for (uint16_t i = 0; i < NUM_SAMPLES; ++i) {
    2b6c:	08 94       	sec
    2b6e:	c1 1c       	adc	r12, r1
    2b70:	d1 1c       	adc	r13, r1
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	cf 16       	cp	r12, r31
    2b76:	f4 e0       	ldi	r31, 0x04	; 4
    2b78:	df 06       	cpc	r13, r31
    2b7a:	d9 f6       	brne	.-74     	; 0x2b32 <CO_collectTemp+0xf0>
		if (min > tempResult) { min = tempResult;}

	}

	/* Turn off free running and disable ADC module.*/
	ADC_FreeRunning_Disable(&ADCA);
    2b7c:	80 91 01 02 	lds	r24, 0x0201
    2b80:	87 7f       	andi	r24, 0xF7	; 247
    2b82:	e0 e0       	ldi	r30, 0x00	; 0
    2b84:	f2 e0       	ldi	r31, 0x02	; 2
    2b86:	81 83       	std	Z+1, r24	; 0x01
	ADC_Pipeline_Flush(&ADCA);
    2b88:	80 91 00 02 	lds	r24, 0x0200
    2b8c:	82 60       	ori	r24, 0x02	; 2
    2b8e:	80 93 00 02 	sts	0x0200, r24
	ADC_Disable(&ADCA);
    2b92:	80 91 00 02 	lds	r24, 0x0200
    2b96:	8e 7f       	andi	r24, 0xFE	; 254
    2b98:	80 93 00 02 	sts	0x0200, r24

	ADCPower(FALSE);
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	0e 94 34 07 	call	0xe68	; 0xe68 <ADCPower>

	average = sum / NUM_SAMPLES;

	//convert to mV
	*avgV = (average * 1000 / 4095) - 50;
    2ba2:	3a e0       	ldi	r19, 0x0A	; 10
    2ba4:	16 95       	lsr	r17
    2ba6:	07 95       	ror	r16
    2ba8:	f7 94       	ror	r15
    2baa:	e7 94       	ror	r14
    2bac:	3a 95       	dec	r19
    2bae:	d1 f7       	brne	.-12     	; 0x2ba4 <CO_collectTemp+0x162>
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	b7 01       	movw	r22, r14
    2bb4:	28 ee       	ldi	r18, 0xE8	; 232
    2bb6:	33 e0       	ldi	r19, 0x03	; 3
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2bc0:	2f ef       	ldi	r18, 0xFF	; 255
    2bc2:	3f e0       	ldi	r19, 0x0F	; 15
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    2bcc:	22 53       	subi	r18, 0x32	; 50
    2bce:	30 40       	sbci	r19, 0x00	; 0
    2bd0:	f1 01       	movw	r30, r2
    2bd2:	20 83       	st	Z, r18
    2bd4:	31 83       	std	Z+1, r19	; 0x01
	*maxV = (max * 1000 / 4095) - 50;
    2bd6:	c5 01       	movw	r24, r10
    2bd8:	b4 01       	movw	r22, r8
    2bda:	28 ee       	ldi	r18, 0xE8	; 232
    2bdc:	33 e0       	ldi	r19, 0x03	; 3
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2be6:	2f ef       	ldi	r18, 0xFF	; 255
    2be8:	3f e0       	ldi	r19, 0x0F	; 15
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    2bf2:	22 53       	subi	r18, 0x32	; 50
    2bf4:	30 40       	sbci	r19, 0x00	; 0
    2bf6:	ec 81       	ldd	r30, Y+4	; 0x04
    2bf8:	fd 81       	ldd	r31, Y+5	; 0x05
    2bfa:	20 83       	st	Z, r18
    2bfc:	31 83       	std	Z+1, r19	; 0x01
	*minV = (min * 1000  / 4095) - 50;
    2bfe:	c3 01       	movw	r24, r6
    2c00:	b2 01       	movw	r22, r4
    2c02:	28 ee       	ldi	r18, 0xE8	; 232
    2c04:	33 e0       	ldi	r19, 0x03	; 3
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2c0e:	2f ef       	ldi	r18, 0xFF	; 255
    2c10:	3f e0       	ldi	r19, 0x0F	; 15
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    2c1a:	22 53       	subi	r18, 0x32	; 50
    2c1c:	30 40       	sbci	r19, 0x00	; 0
    2c1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c20:	fb 81       	ldd	r31, Y+3	; 0x03
    2c22:	20 83       	st	Z, r18
    2c24:	31 83       	std	Z+1, r19	; 0x01
}
    2c26:	25 96       	adiw	r28, 0x05	; 5
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	8f 90       	pop	r8
    2c44:	7f 90       	pop	r7
    2c46:	6f 90       	pop	r6
    2c48:	5f 90       	pop	r5
    2c4a:	4f 90       	pop	r4
    2c4c:	3f 90       	pop	r3
    2c4e:	2f 90       	pop	r2
    2c50:	08 95       	ret

00002c52 <set_32MHz>:


// produces consistent but inaccurate clock period.
void set_32MHz() {
	// select 32MHz Oscillator and prescale by 1
	CLKSYS_Enable(OSC_RC32MEN_bm);
    2c52:	80 91 50 00 	lds	r24, 0x0050
    2c56:	82 60       	ori	r24, 0x02	; 2
    2c58:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	0e 94 d5 03 	call	0x7aa	; 0x7aa <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    2c64:	80 91 51 00 	lds	r24, 0x0051
    2c68:	81 ff       	sbrs	r24, 1
    2c6a:	fc cf       	rjmp	.-8      	; 0x2c64 <set_32MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	0e 94 ed 03 	call	0x7da	; 0x7da <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	0e 94 cb 03 	call	0x796	; 0x796 <CLKSYS_Disable>
	
}
    2c78:	08 95       	ret

00002c7a <set_16MHz>:
}

// produces consistent but inaccurate clock period.
void set_16MHz() {
	// select 32MHz Oscillator and prescale by 1/2
	CLKSYS_Enable(OSC_RC32MEN_bm);
    2c7a:	80 91 50 00 	lds	r24, 0x0050
    2c7e:	82 60       	ori	r24, 0x02	; 2
    2c80:	80 93 50 00 	sts	0x0050, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	61 e0       	ldi	r22, 0x01	; 1
    2c88:	0e 94 d5 03 	call	0x7aa	; 0x7aa <CLKSYS_Prescalers_Config>
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady(OSC_RC32MRDY_bm) == 0);
    2c8c:	80 91 51 00 	lds	r24, 0x0051
    2c90:	81 ff       	sbrs	r24, 1
    2c92:	fc cf       	rjmp	.-8      	; 0x2c8c <set_16MHz+0x12>
	
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	0e 94 ed 03 	call	0x7da	; 0x7da <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	0e 94 cb 03 	call	0x796	; 0x796 <CLKSYS_Disable>
	
}
    2ca0:	08 95       	ret

00002ca2 <setXOSC_32MHz>:
//  - LS900-SI-02 does not contain the crystal
//  - SFLX02-A03 does contain the crystal
// The high frequency crystal is required to clock the ADC without jitter
void setXOSC_32MHz() {
	// configure the crystal to match the chip 
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc,
    2ca2:	80 ec       	ldi	r24, 0xC0	; 192
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	4b e0       	ldi	r20, 0x0B	; 11
    2ca8:	0e 94 ba 03 	call	0x774	; 0x774 <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_16KCLK_gc );
	CLKSYS_Enable(OSC_XOSCEN_bm);
    2cac:	80 91 50 00 	lds	r24, 0x0050
    2cb0:	88 60       	ori	r24, 0x08	; 8
    2cb2:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2cb6:	80 91 51 00 	lds	r24, 0x0051
    2cba:	83 ff       	sbrs	r24, 3
    2cbc:	fc cf       	rjmp	.-8      	; 0x2cb6 <setXOSC_32MHz+0x14>
	// configure PLL to use the crystal and turn on
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
    2cbe:	80 ec       	ldi	r24, 0xC0	; 192
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2cc6:	80 91 50 00 	lds	r24, 0x0050
    2cca:	80 61       	ori	r24, 0x10	; 16
    2ccc:	80 93 50 00 	sts	0x0050, r24
	// wait for signal to stabilize
	do {} while (CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2cd0:	80 91 51 00 	lds	r24, 0x0051
    2cd4:	84 ff       	sbrs	r24, 4
    2cd6:	fc cf       	rjmp	.-8      	; 0x2cd0 <setXOSC_32MHz+0x2e>
	// set as system clock and disable unused RC oscillator
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2cd8:	84 e0       	ldi	r24, 0x04	; 4
    2cda:	0e 94 ed 03 	call	0x7da	; 0x7da <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 cb 03 	call	0x796	; 0x796 <CLKSYS_Disable>
}
    2ce4:	08 95       	ret

00002ce6 <__muldi3>:
    2ce6:	a0 e3       	ldi	r26, 0x30	; 48
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e9 e7       	ldi	r30, 0x79	; 121
    2cec:	f6 e1       	ldi	r31, 0x16	; 22
    2cee:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__prologue_saves__>
    2cf2:	a8 e0       	ldi	r26, 0x08	; 8
    2cf4:	4e 01       	movw	r8, r28
    2cf6:	08 94       	sec
    2cf8:	81 1c       	adc	r8, r1
    2cfa:	91 1c       	adc	r9, r1
    2cfc:	f4 01       	movw	r30, r8
    2cfe:	ba 2f       	mov	r27, r26
    2d00:	11 92       	st	Z+, r1
    2d02:	ba 95       	dec	r27
    2d04:	e9 f7       	brne	.-6      	; 0x2d00 <__muldi3+0x1a>
    2d06:	29 83       	std	Y+1, r18	; 0x01
    2d08:	3a 83       	std	Y+2, r19	; 0x02
    2d0a:	4b 83       	std	Y+3, r20	; 0x03
    2d0c:	5c 83       	std	Y+4, r21	; 0x04
    2d0e:	6d 83       	std	Y+5, r22	; 0x05
    2d10:	7e 83       	std	Y+6, r23	; 0x06
    2d12:	8f 83       	std	Y+7, r24	; 0x07
    2d14:	98 87       	std	Y+8, r25	; 0x08
    2d16:	ce 01       	movw	r24, r28
    2d18:	09 96       	adiw	r24, 0x09	; 9
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	11 92       	st	Z+, r1
    2d1e:	aa 95       	dec	r26
    2d20:	e9 f7       	brne	.-6      	; 0x2d1c <__muldi3+0x36>
    2d22:	a9 86       	std	Y+9, r10	; 0x09
    2d24:	ba 86       	std	Y+10, r11	; 0x0a
    2d26:	cb 86       	std	Y+11, r12	; 0x0b
    2d28:	dc 86       	std	Y+12, r13	; 0x0c
    2d2a:	ed 86       	std	Y+13, r14	; 0x0d
    2d2c:	fe 86       	std	Y+14, r15	; 0x0e
    2d2e:	0f 87       	std	Y+15, r16	; 0x0f
    2d30:	18 8b       	std	Y+16, r17	; 0x10
    2d32:	29 81       	ldd	r18, Y+1	; 0x01
    2d34:	3a 81       	ldd	r19, Y+2	; 0x02
    2d36:	4b 81       	ldd	r20, Y+3	; 0x03
    2d38:	5c 81       	ldd	r21, Y+4	; 0x04
    2d3a:	2d a7       	std	Y+45, r18	; 0x2d
    2d3c:	3e a7       	std	Y+46, r19	; 0x2e
    2d3e:	4f a7       	std	Y+47, r20	; 0x2f
    2d40:	58 ab       	std	Y+48, r21	; 0x30
    2d42:	79 01       	movw	r14, r18
    2d44:	8a 01       	movw	r16, r20
    2d46:	8f ef       	ldi	r24, 0xFF	; 255
    2d48:	9f ef       	ldi	r25, 0xFF	; 255
    2d4a:	a0 e0       	ldi	r26, 0x00	; 0
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e8 22       	and	r14, r24
    2d50:	f9 22       	and	r15, r25
    2d52:	0a 23       	and	r16, r26
    2d54:	1b 23       	and	r17, r27
    2d56:	1a 01       	movw	r2, r20
    2d58:	44 24       	eor	r4, r4
    2d5a:	55 24       	eor	r5, r5
    2d5c:	29 85       	ldd	r18, Y+9	; 0x09
    2d5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d60:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d62:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d64:	29 a7       	std	Y+41, r18	; 0x29
    2d66:	3a a7       	std	Y+42, r19	; 0x2a
    2d68:	4b a7       	std	Y+43, r20	; 0x2b
    2d6a:	5c a7       	std	Y+44, r21	; 0x2c
    2d6c:	59 01       	movw	r10, r18
    2d6e:	6a 01       	movw	r12, r20
    2d70:	a8 22       	and	r10, r24
    2d72:	b9 22       	and	r11, r25
    2d74:	ca 22       	and	r12, r26
    2d76:	db 22       	and	r13, r27
    2d78:	3a 01       	movw	r6, r20
    2d7a:	88 24       	eor	r8, r8
    2d7c:	99 24       	eor	r9, r9
    2d7e:	c6 01       	movw	r24, r12
    2d80:	b5 01       	movw	r22, r10
    2d82:	a8 01       	movw	r20, r16
    2d84:	97 01       	movw	r18, r14
    2d86:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2d8a:	6d a3       	std	Y+37, r22	; 0x25
    2d8c:	7e a3       	std	Y+38, r23	; 0x26
    2d8e:	8f a3       	std	Y+39, r24	; 0x27
    2d90:	98 a7       	std	Y+40, r25	; 0x28
    2d92:	c4 01       	movw	r24, r8
    2d94:	b3 01       	movw	r22, r6
    2d96:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2d9a:	69 a3       	std	Y+33, r22	; 0x21
    2d9c:	7a a3       	std	Y+34, r23	; 0x22
    2d9e:	8b a3       	std	Y+35, r24	; 0x23
    2da0:	9c a3       	std	Y+36, r25	; 0x24
    2da2:	c6 01       	movw	r24, r12
    2da4:	b5 01       	movw	r22, r10
    2da6:	a2 01       	movw	r20, r4
    2da8:	91 01       	movw	r18, r2
    2daa:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2dae:	7b 01       	movw	r14, r22
    2db0:	8c 01       	movw	r16, r24
    2db2:	c4 01       	movw	r24, r8
    2db4:	b3 01       	movw	r22, r6
    2db6:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2dba:	5b 01       	movw	r10, r22
    2dbc:	6c 01       	movw	r12, r24
    2dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc2:	ab a1       	ldd	r26, Y+35	; 0x23
    2dc4:	bc a1       	ldd	r27, Y+36	; 0x24
    2dc6:	8e 0d       	add	r24, r14
    2dc8:	9f 1d       	adc	r25, r15
    2dca:	a0 1f       	adc	r26, r16
    2dcc:	b1 1f       	adc	r27, r17
    2dce:	89 a3       	std	Y+33, r24	; 0x21
    2dd0:	9a a3       	std	Y+34, r25	; 0x22
    2dd2:	ab a3       	std	Y+35, r26	; 0x23
    2dd4:	bc a3       	std	Y+36, r27	; 0x24
    2dd6:	2d a1       	ldd	r18, Y+37	; 0x25
    2dd8:	3e a1       	ldd	r19, Y+38	; 0x26
    2dda:	4f a1       	ldd	r20, Y+39	; 0x27
    2ddc:	58 a5       	ldd	r21, Y+40	; 0x28
    2dde:	ca 01       	movw	r24, r20
    2de0:	aa 27       	eor	r26, r26
    2de2:	bb 27       	eor	r27, r27
    2de4:	29 a1       	ldd	r18, Y+33	; 0x21
    2de6:	3a a1       	ldd	r19, Y+34	; 0x22
    2de8:	4b a1       	ldd	r20, Y+35	; 0x23
    2dea:	5c a1       	ldd	r21, Y+36	; 0x24
    2dec:	28 0f       	add	r18, r24
    2dee:	39 1f       	adc	r19, r25
    2df0:	4a 1f       	adc	r20, r26
    2df2:	5b 1f       	adc	r21, r27
    2df4:	29 a3       	std	Y+33, r18	; 0x21
    2df6:	3a a3       	std	Y+34, r19	; 0x22
    2df8:	4b a3       	std	Y+35, r20	; 0x23
    2dfa:	5c a3       	std	Y+36, r21	; 0x24
    2dfc:	2e 15       	cp	r18, r14
    2dfe:	3f 05       	cpc	r19, r15
    2e00:	40 07       	cpc	r20, r16
    2e02:	51 07       	cpc	r21, r17
    2e04:	40 f4       	brcc	.+16     	; 0x2e16 <__muldi3+0x130>
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	a1 e0       	ldi	r26, 0x01	; 1
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	a8 0e       	add	r10, r24
    2e10:	b9 1e       	adc	r11, r25
    2e12:	ca 1e       	adc	r12, r26
    2e14:	db 1e       	adc	r13, r27
    2e16:	89 a1       	ldd	r24, Y+33	; 0x21
    2e18:	9a a1       	ldd	r25, Y+34	; 0x22
    2e1a:	ab a1       	ldd	r26, Y+35	; 0x23
    2e1c:	bc a1       	ldd	r27, Y+36	; 0x24
    2e1e:	9d 01       	movw	r18, r26
    2e20:	44 27       	eor	r20, r20
    2e22:	55 27       	eor	r21, r21
    2e24:	2a 0d       	add	r18, r10
    2e26:	3b 1d       	adc	r19, r11
    2e28:	4c 1d       	adc	r20, r12
    2e2a:	5d 1d       	adc	r21, r13
    2e2c:	2d 8f       	std	Y+29, r18	; 0x1d
    2e2e:	3e 8f       	std	Y+30, r19	; 0x1e
    2e30:	4f 8f       	std	Y+31, r20	; 0x1f
    2e32:	58 a3       	std	Y+32, r21	; 0x20
    2e34:	6c 01       	movw	r12, r24
    2e36:	bb 24       	eor	r11, r11
    2e38:	aa 24       	eor	r10, r10
    2e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3e:	af a1       	ldd	r26, Y+39	; 0x27
    2e40:	b8 a5       	ldd	r27, Y+40	; 0x28
    2e42:	a0 70       	andi	r26, 0x00	; 0
    2e44:	b0 70       	andi	r27, 0x00	; 0
    2e46:	a8 0e       	add	r10, r24
    2e48:	b9 1e       	adc	r11, r25
    2e4a:	ca 1e       	adc	r12, r26
    2e4c:	db 1e       	adc	r13, r27
    2e4e:	a9 8e       	std	Y+25, r10	; 0x19
    2e50:	ba 8e       	std	Y+26, r11	; 0x1a
    2e52:	cb 8e       	std	Y+27, r12	; 0x1b
    2e54:	dc 8e       	std	Y+28, r13	; 0x1c
    2e56:	9a 8c       	ldd	r9, Y+26	; 0x1a
    2e58:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2e5a:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2e5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e60:	78 a1       	ldd	r23, Y+32	; 0x20
    2e62:	fe 01       	movw	r30, r28
    2e64:	71 96       	adiw	r30, 0x11	; 17
    2e66:	88 e0       	ldi	r24, 0x08	; 8
    2e68:	df 01       	movw	r26, r30
    2e6a:	1d 92       	st	X+, r1
    2e6c:	8a 95       	dec	r24
    2e6e:	e9 f7       	brne	.-6      	; 0x2e6a <__muldi3+0x184>
    2e70:	2d 8b       	std	Y+21, r18	; 0x15
    2e72:	9e 8b       	std	Y+22, r25	; 0x16
    2e74:	6f 8b       	std	Y+23, r22	; 0x17
    2e76:	78 8f       	std	Y+24, r23	; 0x18
    2e78:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e7a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e7c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e7e:	58 89       	ldd	r21, Y+16	; 0x10
    2e80:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e82:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e86:	98 a9       	ldd	r25, Y+48	; 0x30
    2e88:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2e8c:	7b 01       	movw	r14, r22
    2e8e:	8c 01       	movw	r16, r24
    2e90:	2d 81       	ldd	r18, Y+5	; 0x05
    2e92:	3e 81       	ldd	r19, Y+6	; 0x06
    2e94:	4f 81       	ldd	r20, Y+7	; 0x07
    2e96:	58 85       	ldd	r21, Y+8	; 0x08
    2e98:	69 a5       	ldd	r22, Y+41	; 0x29
    2e9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ea0:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2ea4:	e6 0e       	add	r14, r22
    2ea6:	f7 1e       	adc	r15, r23
    2ea8:	08 1f       	adc	r16, r24
    2eaa:	19 1f       	adc	r17, r25
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	6e 0d       	add	r22, r14
    2eb6:	7f 1d       	adc	r23, r15
    2eb8:	80 1f       	adc	r24, r16
    2eba:	91 1f       	adc	r25, r17
    2ebc:	6d 8b       	std	Y+21, r22	; 0x15
    2ebe:	7e 8b       	std	Y+22, r23	; 0x16
    2ec0:	8f 8b       	std	Y+23, r24	; 0x17
    2ec2:	98 8f       	std	Y+24, r25	; 0x18
    2ec4:	ee 89       	ldd	r30, Y+22	; 0x16
    2ec6:	2a 2d       	mov	r18, r10
    2ec8:	39 2d       	mov	r19, r9
    2eca:	48 2d       	mov	r20, r8
    2ecc:	57 2d       	mov	r21, r7
    2ece:	7e 2f       	mov	r23, r30
    2ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed4:	e0 96       	adiw	r28, 0x30	; 48
    2ed6:	e2 e1       	ldi	r30, 0x12	; 18
    2ed8:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__epilogue_restores__>

00002edc <__ashldi3>:
    2edc:	ef 92       	push	r14
    2ede:	ff 92       	push	r15
    2ee0:	0f 93       	push	r16
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	60 97       	sbiw	r28, 0x10	; 16
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	a8 2f       	mov	r26, r24
    2ef2:	00 23       	and	r16, r16
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <__ashldi3+0x1c>
    2ef6:	61 c0       	rjmp	.+194    	; 0x2fba <__ashldi3+0xde>
    2ef8:	7e 01       	movw	r14, r28
    2efa:	08 94       	sec
    2efc:	e1 1c       	adc	r14, r1
    2efe:	f1 1c       	adc	r15, r1
    2f00:	88 e0       	ldi	r24, 0x08	; 8
    2f02:	f7 01       	movw	r30, r14
    2f04:	11 92       	st	Z+, r1
    2f06:	8a 95       	dec	r24
    2f08:	e9 f7       	brne	.-6      	; 0x2f04 <__ashldi3+0x28>
    2f0a:	29 83       	std	Y+1, r18	; 0x01
    2f0c:	3a 83       	std	Y+2, r19	; 0x02
    2f0e:	4b 83       	std	Y+3, r20	; 0x03
    2f10:	5c 83       	std	Y+4, r21	; 0x04
    2f12:	6d 83       	std	Y+5, r22	; 0x05
    2f14:	7e 83       	std	Y+6, r23	; 0x06
    2f16:	af 83       	std	Y+7, r26	; 0x07
    2f18:	98 87       	std	Y+8, r25	; 0x08
    2f1a:	80 e2       	ldi	r24, 0x20	; 32
    2f1c:	80 1b       	sub	r24, r16
    2f1e:	e8 2f       	mov	r30, r24
    2f20:	ff 27       	eor	r31, r31
    2f22:	e7 fd       	sbrc	r30, 7
    2f24:	f0 95       	com	r31
    2f26:	49 81       	ldd	r20, Y+1	; 0x01
    2f28:	5a 81       	ldd	r21, Y+2	; 0x02
    2f2a:	6b 81       	ldd	r22, Y+3	; 0x03
    2f2c:	7c 81       	ldd	r23, Y+4	; 0x04
    2f2e:	18 16       	cp	r1, r24
    2f30:	84 f0       	brlt	.+32     	; 0x2f52 <__ashldi3+0x76>
    2f32:	19 86       	std	Y+9, r1	; 0x09
    2f34:	1a 86       	std	Y+10, r1	; 0x0a
    2f36:	1b 86       	std	Y+11, r1	; 0x0b
    2f38:	1c 86       	std	Y+12, r1	; 0x0c
    2f3a:	88 27       	eor	r24, r24
    2f3c:	99 27       	eor	r25, r25
    2f3e:	8e 1b       	sub	r24, r30
    2f40:	9f 0b       	sbc	r25, r31
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <__ashldi3+0x70>
    2f44:	44 0f       	add	r20, r20
    2f46:	55 1f       	adc	r21, r21
    2f48:	66 1f       	adc	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	8a 95       	dec	r24
    2f4e:	d2 f7       	brpl	.-12     	; 0x2f44 <__ashldi3+0x68>
    2f50:	28 c0       	rjmp	.+80     	; 0x2fa2 <__ashldi3+0xc6>
    2f52:	20 2f       	mov	r18, r16
    2f54:	33 27       	eor	r19, r19
    2f56:	27 fd       	sbrc	r18, 7
    2f58:	30 95       	com	r19
    2f5a:	db 01       	movw	r26, r22
    2f5c:	ca 01       	movw	r24, r20
    2f5e:	02 2e       	mov	r0, r18
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <__ashldi3+0x8e>
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	aa 1f       	adc	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	0a 94       	dec	r0
    2f6c:	d2 f7       	brpl	.-12     	; 0x2f62 <__ashldi3+0x86>
    2f6e:	89 87       	std	Y+9, r24	; 0x09
    2f70:	9a 87       	std	Y+10, r25	; 0x0a
    2f72:	ab 87       	std	Y+11, r26	; 0x0b
    2f74:	bc 87       	std	Y+12, r27	; 0x0c
    2f76:	04 c0       	rjmp	.+8      	; 0x2f80 <__ashldi3+0xa4>
    2f78:	76 95       	lsr	r23
    2f7a:	67 95       	ror	r22
    2f7c:	57 95       	ror	r21
    2f7e:	47 95       	ror	r20
    2f80:	ea 95       	dec	r30
    2f82:	d2 f7       	brpl	.-12     	; 0x2f78 <__ashldi3+0x9c>
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	af 81       	ldd	r26, Y+7	; 0x07
    2f8a:	b8 85       	ldd	r27, Y+8	; 0x08
    2f8c:	04 c0       	rjmp	.+8      	; 0x2f96 <__ashldi3+0xba>
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	aa 1f       	adc	r26, r26
    2f94:	bb 1f       	adc	r27, r27
    2f96:	2a 95       	dec	r18
    2f98:	d2 f7       	brpl	.-12     	; 0x2f8e <__ashldi3+0xb2>
    2f9a:	48 2b       	or	r20, r24
    2f9c:	59 2b       	or	r21, r25
    2f9e:	6a 2b       	or	r22, r26
    2fa0:	7b 2b       	or	r23, r27
    2fa2:	4d 87       	std	Y+13, r20	; 0x0d
    2fa4:	5e 87       	std	Y+14, r21	; 0x0e
    2fa6:	6f 87       	std	Y+15, r22	; 0x0f
    2fa8:	78 8b       	std	Y+16, r23	; 0x10
    2faa:	29 85       	ldd	r18, Y+9	; 0x09
    2fac:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fae:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fb0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fb2:	6d 85       	ldd	r22, Y+13	; 0x0d
    2fb4:	7e 85       	ldd	r23, Y+14	; 0x0e
    2fb6:	af 85       	ldd	r26, Y+15	; 0x0f
    2fb8:	98 89       	ldd	r25, Y+16	; 0x10
    2fba:	8a 2f       	mov	r24, r26
    2fbc:	60 96       	adiw	r28, 0x10	; 16
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	08 95       	ret

00002fce <__ashrdi3>:
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	60 97       	sbiw	r28, 0x10	; 16
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	a8 2f       	mov	r26, r24
    2fe4:	00 23       	and	r16, r16
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <__ashrdi3+0x1c>
    2fe8:	67 c0       	rjmp	.+206    	; 0x30b8 <__ashrdi3+0xea>
    2fea:	7e 01       	movw	r14, r28
    2fec:	08 94       	sec
    2fee:	e1 1c       	adc	r14, r1
    2ff0:	f1 1c       	adc	r15, r1
    2ff2:	88 e0       	ldi	r24, 0x08	; 8
    2ff4:	f7 01       	movw	r30, r14
    2ff6:	11 92       	st	Z+, r1
    2ff8:	8a 95       	dec	r24
    2ffa:	e9 f7       	brne	.-6      	; 0x2ff6 <__ashrdi3+0x28>
    2ffc:	29 83       	std	Y+1, r18	; 0x01
    2ffe:	3a 83       	std	Y+2, r19	; 0x02
    3000:	4b 83       	std	Y+3, r20	; 0x03
    3002:	5c 83       	std	Y+4, r21	; 0x04
    3004:	6d 83       	std	Y+5, r22	; 0x05
    3006:	7e 83       	std	Y+6, r23	; 0x06
    3008:	af 83       	std	Y+7, r26	; 0x07
    300a:	98 87       	std	Y+8, r25	; 0x08
    300c:	80 e2       	ldi	r24, 0x20	; 32
    300e:	80 1b       	sub	r24, r16
    3010:	4d 81       	ldd	r20, Y+5	; 0x05
    3012:	5e 81       	ldd	r21, Y+6	; 0x06
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	e8 2f       	mov	r30, r24
    301a:	ff 27       	eor	r31, r31
    301c:	e7 fd       	sbrc	r30, 7
    301e:	f0 95       	com	r31
    3020:	18 16       	cp	r1, r24
    3022:	b4 f0       	brlt	.+44     	; 0x3050 <__ashrdi3+0x82>
    3024:	db 01       	movw	r26, r22
    3026:	ca 01       	movw	r24, r20
    3028:	bb 0f       	add	r27, r27
    302a:	88 0b       	sbc	r24, r24
    302c:	98 2f       	mov	r25, r24
    302e:	dc 01       	movw	r26, r24
    3030:	8d 87       	std	Y+13, r24	; 0x0d
    3032:	9e 87       	std	Y+14, r25	; 0x0e
    3034:	af 87       	std	Y+15, r26	; 0x0f
    3036:	b8 8b       	std	Y+16, r27	; 0x10
    3038:	88 27       	eor	r24, r24
    303a:	99 27       	eor	r25, r25
    303c:	8e 1b       	sub	r24, r30
    303e:	9f 0b       	sbc	r25, r31
    3040:	04 c0       	rjmp	.+8      	; 0x304a <__ashrdi3+0x7c>
    3042:	75 95       	asr	r23
    3044:	67 95       	ror	r22
    3046:	57 95       	ror	r21
    3048:	47 95       	ror	r20
    304a:	8a 95       	dec	r24
    304c:	d2 f7       	brpl	.-12     	; 0x3042 <__ashrdi3+0x74>
    304e:	28 c0       	rjmp	.+80     	; 0x30a0 <__ashrdi3+0xd2>
    3050:	20 2f       	mov	r18, r16
    3052:	33 27       	eor	r19, r19
    3054:	27 fd       	sbrc	r18, 7
    3056:	30 95       	com	r19
    3058:	db 01       	movw	r26, r22
    305a:	ca 01       	movw	r24, r20
    305c:	02 2e       	mov	r0, r18
    305e:	04 c0       	rjmp	.+8      	; 0x3068 <__ashrdi3+0x9a>
    3060:	b5 95       	asr	r27
    3062:	a7 95       	ror	r26
    3064:	97 95       	ror	r25
    3066:	87 95       	ror	r24
    3068:	0a 94       	dec	r0
    306a:	d2 f7       	brpl	.-12     	; 0x3060 <__ashrdi3+0x92>
    306c:	8d 87       	std	Y+13, r24	; 0x0d
    306e:	9e 87       	std	Y+14, r25	; 0x0e
    3070:	af 87       	std	Y+15, r26	; 0x0f
    3072:	b8 8b       	std	Y+16, r27	; 0x10
    3074:	04 c0       	rjmp	.+8      	; 0x307e <__ashrdi3+0xb0>
    3076:	44 0f       	add	r20, r20
    3078:	55 1f       	adc	r21, r21
    307a:	66 1f       	adc	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	ea 95       	dec	r30
    3080:	d2 f7       	brpl	.-12     	; 0x3076 <__ashrdi3+0xa8>
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	ab 81       	ldd	r26, Y+3	; 0x03
    3088:	bc 81       	ldd	r27, Y+4	; 0x04
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <__ashrdi3+0xc6>
    308c:	b6 95       	lsr	r27
    308e:	a7 95       	ror	r26
    3090:	97 95       	ror	r25
    3092:	87 95       	ror	r24
    3094:	2a 95       	dec	r18
    3096:	d2 f7       	brpl	.-12     	; 0x308c <__ashrdi3+0xbe>
    3098:	48 2b       	or	r20, r24
    309a:	59 2b       	or	r21, r25
    309c:	6a 2b       	or	r22, r26
    309e:	7b 2b       	or	r23, r27
    30a0:	49 87       	std	Y+9, r20	; 0x09
    30a2:	5a 87       	std	Y+10, r21	; 0x0a
    30a4:	6b 87       	std	Y+11, r22	; 0x0b
    30a6:	7c 87       	std	Y+12, r23	; 0x0c
    30a8:	29 85       	ldd	r18, Y+9	; 0x09
    30aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    30ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    30ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    30b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    30b2:	7e 85       	ldd	r23, Y+14	; 0x0e
    30b4:	af 85       	ldd	r26, Y+15	; 0x0f
    30b6:	98 89       	ldd	r25, Y+16	; 0x10
    30b8:	8a 2f       	mov	r24, r26
    30ba:	60 96       	adiw	r28, 0x10	; 16
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	0f 91       	pop	r16
    30c6:	ff 90       	pop	r15
    30c8:	ef 90       	pop	r14
    30ca:	08 95       	ret

000030cc <__divdi3>:
    30cc:	a2 e7       	ldi	r26, 0x72	; 114
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	ec e6       	ldi	r30, 0x6C	; 108
    30d2:	f8 e1       	ldi	r31, 0x18	; 24
    30d4:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__prologue_saves__>
    30d8:	98 2e       	mov	r9, r24
    30da:	89 2e       	mov	r8, r25
    30dc:	71 2e       	mov	r7, r17
    30de:	88 e0       	ldi	r24, 0x08	; 8
    30e0:	fe 01       	movw	r30, r28
    30e2:	31 96       	adiw	r30, 0x01	; 1
    30e4:	df 01       	movw	r26, r30
    30e6:	68 2e       	mov	r6, r24
    30e8:	1d 92       	st	X+, r1
    30ea:	6a 94       	dec	r6
    30ec:	e9 f7       	brne	.-6      	; 0x30e8 <__divdi3+0x1c>
    30ee:	29 83       	std	Y+1, r18	; 0x01
    30f0:	3a 83       	std	Y+2, r19	; 0x02
    30f2:	4b 83       	std	Y+3, r20	; 0x03
    30f4:	5c 83       	std	Y+4, r21	; 0x04
    30f6:	6d 83       	std	Y+5, r22	; 0x05
    30f8:	7e 83       	std	Y+6, r23	; 0x06
    30fa:	9f 82       	std	Y+7, r9	; 0x07
    30fc:	98 87       	std	Y+8, r25	; 0x08
    30fe:	fe 01       	movw	r30, r28
    3100:	39 96       	adiw	r30, 0x09	; 9
    3102:	df 01       	movw	r26, r30
    3104:	1d 92       	st	X+, r1
    3106:	8a 95       	dec	r24
    3108:	e9 f7       	brne	.-6      	; 0x3104 <__divdi3+0x38>
    310a:	a9 86       	std	Y+9, r10	; 0x09
    310c:	ba 86       	std	Y+10, r11	; 0x0a
    310e:	cb 86       	std	Y+11, r12	; 0x0b
    3110:	dc 86       	std	Y+12, r13	; 0x0c
    3112:	ed 86       	std	Y+13, r14	; 0x0d
    3114:	fe 86       	std	Y+14, r15	; 0x0e
    3116:	0f 87       	std	Y+15, r16	; 0x0f
    3118:	18 8b       	std	Y+16, r17	; 0x10
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	af 81       	ldd	r26, Y+7	; 0x07
    3120:	b8 85       	ldd	r27, Y+8	; 0x08
    3122:	b7 fd       	sbrc	r27, 7
    3124:	07 c0       	rjmp	.+14     	; 0x3134 <__divdi3+0x68>
    3126:	e1 96       	adiw	r28, 0x31	; 49
    3128:	1c ae       	std	Y+60, r1	; 0x3c
    312a:	1d ae       	std	Y+61, r1	; 0x3d
    312c:	1e ae       	std	Y+62, r1	; 0x3e
    312e:	1f ae       	std	Y+63, r1	; 0x3f
    3130:	e1 97       	sbiw	r28, 0x31	; 49
    3132:	64 c0       	rjmp	.+200    	; 0x31fc <__divdi3+0x130>
    3134:	21 95       	neg	r18
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	12 16       	cp	r1, r18
    313a:	08 f0       	brcs	.+2      	; 0x313e <__divdi3+0x72>
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	31 95       	neg	r19
    3140:	91 e0       	ldi	r25, 0x01	; 1
    3142:	13 16       	cp	r1, r19
    3144:	08 f0       	brcs	.+2      	; 0x3148 <__divdi3+0x7c>
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	b3 2f       	mov	r27, r19
    314a:	b8 1b       	sub	r27, r24
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	3b 17       	cp	r19, r27
    3150:	08 f0       	brcs	.+2      	; 0x3154 <__divdi3+0x88>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	98 2b       	or	r25, r24
    3156:	41 95       	neg	r20
    3158:	31 e0       	ldi	r19, 0x01	; 1
    315a:	14 16       	cp	r1, r20
    315c:	08 f0       	brcs	.+2      	; 0x3160 <__divdi3+0x94>
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	a4 2f       	mov	r26, r20
    3162:	a9 1b       	sub	r26, r25
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	4a 17       	cp	r20, r26
    3168:	08 f0       	brcs	.+2      	; 0x316c <__divdi3+0xa0>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	38 2b       	or	r19, r24
    316e:	51 95       	neg	r21
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	15 16       	cp	r1, r21
    3174:	08 f0       	brcs	.+2      	; 0x3178 <__divdi3+0xac>
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	f5 2f       	mov	r31, r21
    317a:	f3 1b       	sub	r31, r19
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	5f 17       	cp	r21, r31
    3180:	08 f0       	brcs	.+2      	; 0x3184 <__divdi3+0xb8>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	98 2b       	or	r25, r24
    3186:	61 95       	neg	r22
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	16 16       	cp	r1, r22
    318c:	08 f0       	brcs	.+2      	; 0x3190 <__divdi3+0xc4>
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	e6 2f       	mov	r30, r22
    3192:	e9 1b       	sub	r30, r25
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	6e 17       	cp	r22, r30
    3198:	08 f0       	brcs	.+2      	; 0x319c <__divdi3+0xd0>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	38 2b       	or	r19, r24
    319e:	71 95       	neg	r23
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	17 16       	cp	r1, r23
    31a4:	08 f0       	brcs	.+2      	; 0x31a8 <__divdi3+0xdc>
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	57 2f       	mov	r21, r23
    31aa:	53 1b       	sub	r21, r19
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	75 17       	cp	r23, r21
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <__divdi3+0xe8>
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	48 2b       	or	r20, r24
    31b6:	89 2d       	mov	r24, r9
    31b8:	81 95       	neg	r24
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	18 16       	cp	r1, r24
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <__divdi3+0xf6>
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	68 2e       	mov	r6, r24
    31c4:	64 1a       	sub	r6, r20
    31c6:	46 2d       	mov	r20, r6
    31c8:	31 e0       	ldi	r19, 0x01	; 1
    31ca:	86 15       	cp	r24, r6
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <__divdi3+0x104>
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	93 2b       	or	r25, r19
    31d2:	88 2d       	mov	r24, r8
    31d4:	81 95       	neg	r24
    31d6:	89 1b       	sub	r24, r25
    31d8:	29 83       	std	Y+1, r18	; 0x01
    31da:	ba 83       	std	Y+2, r27	; 0x02
    31dc:	ab 83       	std	Y+3, r26	; 0x03
    31de:	fc 83       	std	Y+4, r31	; 0x04
    31e0:	ed 83       	std	Y+5, r30	; 0x05
    31e2:	5e 83       	std	Y+6, r21	; 0x06
    31e4:	4f 83       	std	Y+7, r20	; 0x07
    31e6:	88 87       	std	Y+8, r24	; 0x08
    31e8:	2f ef       	ldi	r18, 0xFF	; 255
    31ea:	3f ef       	ldi	r19, 0xFF	; 255
    31ec:	4f ef       	ldi	r20, 0xFF	; 255
    31ee:	5f ef       	ldi	r21, 0xFF	; 255
    31f0:	e1 96       	adiw	r28, 0x31	; 49
    31f2:	2c af       	std	Y+60, r18	; 0x3c
    31f4:	3d af       	std	Y+61, r19	; 0x3d
    31f6:	4e af       	std	Y+62, r20	; 0x3e
    31f8:	5f af       	std	Y+63, r21	; 0x3f
    31fa:	e1 97       	sbiw	r28, 0x31	; 49
    31fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3200:	af 85       	ldd	r26, Y+15	; 0x0f
    3202:	b8 89       	ldd	r27, Y+16	; 0x10
    3204:	b7 ff       	sbrs	r27, 7
    3206:	6a c0       	rjmp	.+212    	; 0x32dc <__divdi3+0x210>
    3208:	e1 96       	adiw	r28, 0x31	; 49
    320a:	4c ad       	ldd	r20, Y+60	; 0x3c
    320c:	5d ad       	ldd	r21, Y+61	; 0x3d
    320e:	6e ad       	ldd	r22, Y+62	; 0x3e
    3210:	7f ad       	ldd	r23, Y+63	; 0x3f
    3212:	e1 97       	sbiw	r28, 0x31	; 49
    3214:	40 95       	com	r20
    3216:	50 95       	com	r21
    3218:	60 95       	com	r22
    321a:	70 95       	com	r23
    321c:	e1 96       	adiw	r28, 0x31	; 49
    321e:	4c af       	std	Y+60, r20	; 0x3c
    3220:	5d af       	std	Y+61, r21	; 0x3d
    3222:	6e af       	std	Y+62, r22	; 0x3e
    3224:	7f af       	std	Y+63, r23	; 0x3f
    3226:	e1 97       	sbiw	r28, 0x31	; 49
    3228:	a1 94       	neg	r10
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	1a 14       	cp	r1, r10
    322e:	08 f0       	brcs	.+2      	; 0x3232 <__divdi3+0x166>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	b1 94       	neg	r11
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	1b 14       	cp	r1, r11
    3238:	08 f0       	brcs	.+2      	; 0x323c <__divdi3+0x170>
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	6b 2d       	mov	r22, r11
    323e:	68 1b       	sub	r22, r24
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	b6 16       	cp	r11, r22
    3244:	08 f0       	brcs	.+2      	; 0x3248 <__divdi3+0x17c>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	98 2b       	or	r25, r24
    324a:	c1 94       	neg	r12
    324c:	21 e0       	ldi	r18, 0x01	; 1
    324e:	1c 14       	cp	r1, r12
    3250:	08 f0       	brcs	.+2      	; 0x3254 <__divdi3+0x188>
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	5c 2d       	mov	r21, r12
    3256:	59 1b       	sub	r21, r25
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	c5 16       	cp	r12, r21
    325c:	08 f0       	brcs	.+2      	; 0x3260 <__divdi3+0x194>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	28 2b       	or	r18, r24
    3262:	d1 94       	neg	r13
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	1d 14       	cp	r1, r13
    3268:	08 f0       	brcs	.+2      	; 0x326c <__divdi3+0x1a0>
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	4d 2d       	mov	r20, r13
    326e:	42 1b       	sub	r20, r18
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	d4 16       	cp	r13, r20
    3274:	08 f0       	brcs	.+2      	; 0x3278 <__divdi3+0x1ac>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	98 2b       	or	r25, r24
    327a:	e1 94       	neg	r14
    327c:	21 e0       	ldi	r18, 0x01	; 1
    327e:	1e 14       	cp	r1, r14
    3280:	08 f0       	brcs	.+2      	; 0x3284 <__divdi3+0x1b8>
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	3e 2d       	mov	r19, r14
    3286:	39 1b       	sub	r19, r25
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	e3 16       	cp	r14, r19
    328c:	08 f0       	brcs	.+2      	; 0x3290 <__divdi3+0x1c4>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	28 2b       	or	r18, r24
    3292:	f1 94       	neg	r15
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	1f 14       	cp	r1, r15
    3298:	08 f0       	brcs	.+2      	; 0x329c <__divdi3+0x1d0>
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	7f 2d       	mov	r23, r15
    329e:	72 1b       	sub	r23, r18
    32a0:	27 2f       	mov	r18, r23
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	f7 16       	cp	r15, r23
    32a6:	08 f0       	brcs	.+2      	; 0x32aa <__divdi3+0x1de>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	98 2b       	or	r25, r24
    32ac:	01 95       	neg	r16
    32ae:	11 e0       	ldi	r17, 0x01	; 1
    32b0:	10 16       	cp	r1, r16
    32b2:	08 f0       	brcs	.+2      	; 0x32b6 <__divdi3+0x1ea>
    32b4:	10 e0       	ldi	r17, 0x00	; 0
    32b6:	80 2f       	mov	r24, r16
    32b8:	89 1b       	sub	r24, r25
    32ba:	98 2f       	mov	r25, r24
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	09 17       	cp	r16, r25
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <__divdi3+0x1f8>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	18 2b       	or	r17, r24
    32c6:	87 2d       	mov	r24, r7
    32c8:	81 95       	neg	r24
    32ca:	81 1b       	sub	r24, r17
    32cc:	a9 86       	std	Y+9, r10	; 0x09
    32ce:	6a 87       	std	Y+10, r22	; 0x0a
    32d0:	5b 87       	std	Y+11, r21	; 0x0b
    32d2:	4c 87       	std	Y+12, r20	; 0x0c
    32d4:	3d 87       	std	Y+13, r19	; 0x0d
    32d6:	2e 87       	std	Y+14, r18	; 0x0e
    32d8:	9f 87       	std	Y+15, r25	; 0x0f
    32da:	88 8b       	std	Y+16, r24	; 0x10
    32dc:	99 81       	ldd	r25, Y+1	; 0x01
    32de:	2a 81       	ldd	r18, Y+2	; 0x02
    32e0:	3b 81       	ldd	r19, Y+3	; 0x03
    32e2:	4c 81       	ldd	r20, Y+4	; 0x04
    32e4:	5d 81       	ldd	r21, Y+5	; 0x05
    32e6:	6e 81       	ldd	r22, Y+6	; 0x06
    32e8:	7f 81       	ldd	r23, Y+7	; 0x07
    32ea:	a8 85       	ldd	r26, Y+8	; 0x08
    32ec:	b9 85       	ldd	r27, Y+9	; 0x09
    32ee:	1a 85       	ldd	r17, Y+10	; 0x0a
    32f0:	0b 85       	ldd	r16, Y+11	; 0x0b
    32f2:	fc 84       	ldd	r15, Y+12	; 0x0c
    32f4:	ed 84       	ldd	r14, Y+13	; 0x0d
    32f6:	de 84       	ldd	r13, Y+14	; 0x0e
    32f8:	cf 84       	ldd	r12, Y+15	; 0x0f
    32fa:	b8 88       	ldd	r11, Y+16	; 0x10
    32fc:	88 e0       	ldi	r24, 0x08	; 8
    32fe:	e1 e1       	ldi	r30, 0x11	; 17
    3300:	8e 2e       	mov	r8, r30
    3302:	91 2c       	mov	r9, r1
    3304:	8c 0e       	add	r8, r28
    3306:	9d 1e       	adc	r9, r29
    3308:	f4 01       	movw	r30, r8
    330a:	68 2e       	mov	r6, r24
    330c:	11 92       	st	Z+, r1
    330e:	6a 94       	dec	r6
    3310:	e9 f7       	brne	.-6      	; 0x330c <__divdi3+0x240>
    3312:	99 8b       	std	Y+17, r25	; 0x11
    3314:	2a 8b       	std	Y+18, r18	; 0x12
    3316:	3b 8b       	std	Y+19, r19	; 0x13
    3318:	4c 8b       	std	Y+20, r20	; 0x14
    331a:	5d 8b       	std	Y+21, r21	; 0x15
    331c:	6e 8b       	std	Y+22, r22	; 0x16
    331e:	7f 8b       	std	Y+23, r23	; 0x17
    3320:	a8 8f       	std	Y+24, r26	; 0x18
    3322:	9e 01       	movw	r18, r28
    3324:	27 5e       	subi	r18, 0xE7	; 231
    3326:	3f 4f       	sbci	r19, 0xFF	; 255
    3328:	f9 01       	movw	r30, r18
    332a:	11 92       	st	Z+, r1
    332c:	8a 95       	dec	r24
    332e:	e9 f7       	brne	.-6      	; 0x332a <__divdi3+0x25e>
    3330:	b9 8f       	std	Y+25, r27	; 0x19
    3332:	1a 8f       	std	Y+26, r17	; 0x1a
    3334:	0b 8f       	std	Y+27, r16	; 0x1b
    3336:	fc 8e       	std	Y+28, r15	; 0x1c
    3338:	ed 8e       	std	Y+29, r14	; 0x1d
    333a:	de 8e       	std	Y+30, r13	; 0x1e
    333c:	cf 8e       	std	Y+31, r12	; 0x1f
    333e:	b8 a2       	std	Y+32, r11	; 0x20
    3340:	29 8c       	ldd	r2, Y+25	; 0x19
    3342:	3a 8c       	ldd	r3, Y+26	; 0x1a
    3344:	4b 8c       	ldd	r4, Y+27	; 0x1b
    3346:	5c 8c       	ldd	r5, Y+28	; 0x1c
    3348:	ed 8c       	ldd	r14, Y+29	; 0x1d
    334a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    334c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    334e:	18 a1       	ldd	r17, Y+32	; 0x20
    3350:	69 88       	ldd	r6, Y+17	; 0x11
    3352:	7a 88       	ldd	r7, Y+18	; 0x12
    3354:	8b 88       	ldd	r8, Y+19	; 0x13
    3356:	9c 88       	ldd	r9, Y+20	; 0x14
    3358:	21 96       	adiw	r28, 0x01	; 1
    335a:	6c ae       	std	Y+60, r6	; 0x3c
    335c:	7d ae       	std	Y+61, r7	; 0x3d
    335e:	8e ae       	std	Y+62, r8	; 0x3e
    3360:	9f ae       	std	Y+63, r9	; 0x3f
    3362:	21 97       	sbiw	r28, 0x01	; 1
    3364:	6d 88       	ldd	r6, Y+21	; 0x15
    3366:	7e 88       	ldd	r7, Y+22	; 0x16
    3368:	8f 88       	ldd	r8, Y+23	; 0x17
    336a:	98 8c       	ldd	r9, Y+24	; 0x18
    336c:	e1 14       	cp	r14, r1
    336e:	f1 04       	cpc	r15, r1
    3370:	01 05       	cpc	r16, r1
    3372:	11 05       	cpc	r17, r1
    3374:	09 f0       	breq	.+2      	; 0x3378 <__divdi3+0x2ac>
    3376:	d9 c3       	rjmp	.+1970   	; 0x3b2a <__divdi3+0xa5e>
    3378:	62 14       	cp	r6, r2
    337a:	73 04       	cpc	r7, r3
    337c:	84 04       	cpc	r8, r4
    337e:	95 04       	cpc	r9, r5
    3380:	08 f0       	brcs	.+2      	; 0x3384 <__divdi3+0x2b8>
    3382:	57 c1       	rjmp	.+686    	; 0x3632 <__divdi3+0x566>
    3384:	00 e0       	ldi	r16, 0x00	; 0
    3386:	20 16       	cp	r2, r16
    3388:	00 e0       	ldi	r16, 0x00	; 0
    338a:	30 06       	cpc	r3, r16
    338c:	01 e0       	ldi	r16, 0x01	; 1
    338e:	40 06       	cpc	r4, r16
    3390:	00 e0       	ldi	r16, 0x00	; 0
    3392:	50 06       	cpc	r5, r16
    3394:	88 f4       	brcc	.+34     	; 0x33b8 <__divdi3+0x2ec>
    3396:	1f ef       	ldi	r17, 0xFF	; 255
    3398:	21 16       	cp	r2, r17
    339a:	31 04       	cpc	r3, r1
    339c:	41 04       	cpc	r4, r1
    339e:	51 04       	cpc	r5, r1
    33a0:	39 f0       	breq	.+14     	; 0x33b0 <__divdi3+0x2e4>
    33a2:	30 f0       	brcs	.+12     	; 0x33b0 <__divdi3+0x2e4>
    33a4:	48 e0       	ldi	r20, 0x08	; 8
    33a6:	e4 2e       	mov	r14, r20
    33a8:	f1 2c       	mov	r15, r1
    33aa:	01 2d       	mov	r16, r1
    33ac:	11 2d       	mov	r17, r1
    33ae:	18 c0       	rjmp	.+48     	; 0x33e0 <__divdi3+0x314>
    33b0:	ee 24       	eor	r14, r14
    33b2:	ff 24       	eor	r15, r15
    33b4:	87 01       	movw	r16, r14
    33b6:	14 c0       	rjmp	.+40     	; 0x33e0 <__divdi3+0x314>
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	22 16       	cp	r2, r18
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	32 06       	cpc	r3, r18
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	42 06       	cpc	r4, r18
    33c4:	21 e0       	ldi	r18, 0x01	; 1
    33c6:	52 06       	cpc	r5, r18
    33c8:	30 f0       	brcs	.+12     	; 0x33d6 <__divdi3+0x30a>
    33ca:	38 e1       	ldi	r19, 0x18	; 24
    33cc:	e3 2e       	mov	r14, r19
    33ce:	f1 2c       	mov	r15, r1
    33d0:	01 2d       	mov	r16, r1
    33d2:	11 2d       	mov	r17, r1
    33d4:	05 c0       	rjmp	.+10     	; 0x33e0 <__divdi3+0x314>
    33d6:	20 e1       	ldi	r18, 0x10	; 16
    33d8:	e2 2e       	mov	r14, r18
    33da:	f1 2c       	mov	r15, r1
    33dc:	01 2d       	mov	r16, r1
    33de:	11 2d       	mov	r17, r1
    33e0:	d2 01       	movw	r26, r4
    33e2:	c1 01       	movw	r24, r2
    33e4:	0e 2c       	mov	r0, r14
    33e6:	04 c0       	rjmp	.+8      	; 0x33f0 <__divdi3+0x324>
    33e8:	b6 95       	lsr	r27
    33ea:	a7 95       	ror	r26
    33ec:	97 95       	ror	r25
    33ee:	87 95       	ror	r24
    33f0:	0a 94       	dec	r0
    33f2:	d2 f7       	brpl	.-12     	; 0x33e8 <__divdi3+0x31c>
    33f4:	8d 5f       	subi	r24, 0xFD	; 253
    33f6:	9f 4d       	sbci	r25, 0xDF	; 223
    33f8:	dc 01       	movw	r26, r24
    33fa:	2c 91       	ld	r18, X
    33fc:	80 e2       	ldi	r24, 0x20	; 32
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a0 e0       	ldi	r26, 0x00	; 0
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	8e 19       	sub	r24, r14
    3406:	9f 09       	sbc	r25, r15
    3408:	a0 0b       	sbc	r26, r16
    340a:	b1 0b       	sbc	r27, r17
    340c:	7c 01       	movw	r14, r24
    340e:	8d 01       	movw	r16, r26
    3410:	e2 1a       	sub	r14, r18
    3412:	f1 08       	sbc	r15, r1
    3414:	01 09       	sbc	r16, r1
    3416:	11 09       	sbc	r17, r1
    3418:	e1 14       	cp	r14, r1
    341a:	f1 04       	cpc	r15, r1
    341c:	01 05       	cpc	r16, r1
    341e:	11 05       	cpc	r17, r1
    3420:	d1 f1       	breq	.+116    	; 0x3496 <__divdi3+0x3ca>
    3422:	0e 2c       	mov	r0, r14
    3424:	04 c0       	rjmp	.+8      	; 0x342e <__divdi3+0x362>
    3426:	22 0c       	add	r2, r2
    3428:	33 1c       	adc	r3, r3
    342a:	44 1c       	adc	r4, r4
    342c:	55 1c       	adc	r5, r5
    342e:	0a 94       	dec	r0
    3430:	d2 f7       	brpl	.-12     	; 0x3426 <__divdi3+0x35a>
    3432:	a4 01       	movw	r20, r8
    3434:	93 01       	movw	r18, r6
    3436:	0e 2c       	mov	r0, r14
    3438:	04 c0       	rjmp	.+8      	; 0x3442 <__divdi3+0x376>
    343a:	22 0f       	add	r18, r18
    343c:	33 1f       	adc	r19, r19
    343e:	44 1f       	adc	r20, r20
    3440:	55 1f       	adc	r21, r21
    3442:	0a 94       	dec	r0
    3444:	d2 f7       	brpl	.-12     	; 0x343a <__divdi3+0x36e>
    3446:	80 e2       	ldi	r24, 0x20	; 32
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	8e 19       	sub	r24, r14
    344c:	9f 09       	sbc	r25, r15
    344e:	21 96       	adiw	r28, 0x01	; 1
    3450:	6c ac       	ldd	r6, Y+60	; 0x3c
    3452:	7d ac       	ldd	r7, Y+61	; 0x3d
    3454:	8e ac       	ldd	r8, Y+62	; 0x3e
    3456:	9f ac       	ldd	r9, Y+63	; 0x3f
    3458:	21 97       	sbiw	r28, 0x01	; 1
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <__divdi3+0x398>
    345c:	96 94       	lsr	r9
    345e:	87 94       	ror	r8
    3460:	77 94       	ror	r7
    3462:	67 94       	ror	r6
    3464:	8a 95       	dec	r24
    3466:	d2 f7       	brpl	.-12     	; 0x345c <__divdi3+0x390>
    3468:	62 2a       	or	r6, r18
    346a:	73 2a       	or	r7, r19
    346c:	84 2a       	or	r8, r20
    346e:	95 2a       	or	r9, r21
    3470:	21 96       	adiw	r28, 0x01	; 1
    3472:	ac ac       	ldd	r10, Y+60	; 0x3c
    3474:	bd ac       	ldd	r11, Y+61	; 0x3d
    3476:	ce ac       	ldd	r12, Y+62	; 0x3e
    3478:	df ac       	ldd	r13, Y+63	; 0x3f
    347a:	21 97       	sbiw	r28, 0x01	; 1
    347c:	04 c0       	rjmp	.+8      	; 0x3486 <__divdi3+0x3ba>
    347e:	aa 0c       	add	r10, r10
    3480:	bb 1c       	adc	r11, r11
    3482:	cc 1c       	adc	r12, r12
    3484:	dd 1c       	adc	r13, r13
    3486:	ea 94       	dec	r14
    3488:	d2 f7       	brpl	.-12     	; 0x347e <__divdi3+0x3b2>
    348a:	21 96       	adiw	r28, 0x01	; 1
    348c:	ac ae       	std	Y+60, r10	; 0x3c
    348e:	bd ae       	std	Y+61, r11	; 0x3d
    3490:	ce ae       	std	Y+62, r12	; 0x3e
    3492:	df ae       	std	Y+63, r13	; 0x3f
    3494:	21 97       	sbiw	r28, 0x01	; 1
    3496:	62 01       	movw	r12, r4
    3498:	ee 24       	eor	r14, r14
    349a:	ff 24       	eor	r15, r15
    349c:	29 96       	adiw	r28, 0x09	; 9
    349e:	cc ae       	std	Y+60, r12	; 0x3c
    34a0:	dd ae       	std	Y+61, r13	; 0x3d
    34a2:	ee ae       	std	Y+62, r14	; 0x3e
    34a4:	ff ae       	std	Y+63, r15	; 0x3f
    34a6:	29 97       	sbiw	r28, 0x09	; 9
    34a8:	92 01       	movw	r18, r4
    34aa:	81 01       	movw	r16, r2
    34ac:	20 70       	andi	r18, 0x00	; 0
    34ae:	30 70       	andi	r19, 0x00	; 0
    34b0:	2d 96       	adiw	r28, 0x0d	; 13
    34b2:	0c af       	std	Y+60, r16	; 0x3c
    34b4:	1d af       	std	Y+61, r17	; 0x3d
    34b6:	2e af       	std	Y+62, r18	; 0x3e
    34b8:	3f af       	std	Y+63, r19	; 0x3f
    34ba:	2d 97       	sbiw	r28, 0x0d	; 13
    34bc:	c4 01       	movw	r24, r8
    34be:	b3 01       	movw	r22, r6
    34c0:	a7 01       	movw	r20, r14
    34c2:	96 01       	movw	r18, r12
    34c4:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    34c8:	7b 01       	movw	r14, r22
    34ca:	8c 01       	movw	r16, r24
    34cc:	c4 01       	movw	r24, r8
    34ce:	b3 01       	movw	r22, r6
    34d0:	29 96       	adiw	r28, 0x09	; 9
    34d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    34d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    34d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    34d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    34da:	29 97       	sbiw	r28, 0x09	; 9
    34dc:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    34e0:	c9 01       	movw	r24, r18
    34e2:	da 01       	movw	r26, r20
    34e4:	3c 01       	movw	r6, r24
    34e6:	4d 01       	movw	r8, r26
    34e8:	c4 01       	movw	r24, r8
    34ea:	b3 01       	movw	r22, r6
    34ec:	2d 96       	adiw	r28, 0x0d	; 13
    34ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    34f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    34f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    34f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    34f6:	2d 97       	sbiw	r28, 0x0d	; 13
    34f8:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	87 01       	movw	r16, r14
    3502:	ff 24       	eor	r15, r15
    3504:	ee 24       	eor	r14, r14
    3506:	21 96       	adiw	r28, 0x01	; 1
    3508:	ac ac       	ldd	r10, Y+60	; 0x3c
    350a:	bd ac       	ldd	r11, Y+61	; 0x3d
    350c:	ce ac       	ldd	r12, Y+62	; 0x3e
    350e:	df ac       	ldd	r13, Y+63	; 0x3f
    3510:	21 97       	sbiw	r28, 0x01	; 1
    3512:	c6 01       	movw	r24, r12
    3514:	aa 27       	eor	r26, r26
    3516:	bb 27       	eor	r27, r27
    3518:	57 01       	movw	r10, r14
    351a:	68 01       	movw	r12, r16
    351c:	a8 2a       	or	r10, r24
    351e:	b9 2a       	or	r11, r25
    3520:	ca 2a       	or	r12, r26
    3522:	db 2a       	or	r13, r27
    3524:	a2 16       	cp	r10, r18
    3526:	b3 06       	cpc	r11, r19
    3528:	c4 06       	cpc	r12, r20
    352a:	d5 06       	cpc	r13, r21
    352c:	e0 f4       	brcc	.+56     	; 0x3566 <__divdi3+0x49a>
    352e:	08 94       	sec
    3530:	61 08       	sbc	r6, r1
    3532:	71 08       	sbc	r7, r1
    3534:	81 08       	sbc	r8, r1
    3536:	91 08       	sbc	r9, r1
    3538:	a2 0c       	add	r10, r2
    353a:	b3 1c       	adc	r11, r3
    353c:	c4 1c       	adc	r12, r4
    353e:	d5 1c       	adc	r13, r5
    3540:	a2 14       	cp	r10, r2
    3542:	b3 04       	cpc	r11, r3
    3544:	c4 04       	cpc	r12, r4
    3546:	d5 04       	cpc	r13, r5
    3548:	70 f0       	brcs	.+28     	; 0x3566 <__divdi3+0x49a>
    354a:	a2 16       	cp	r10, r18
    354c:	b3 06       	cpc	r11, r19
    354e:	c4 06       	cpc	r12, r20
    3550:	d5 06       	cpc	r13, r21
    3552:	48 f4       	brcc	.+18     	; 0x3566 <__divdi3+0x49a>
    3554:	08 94       	sec
    3556:	61 08       	sbc	r6, r1
    3558:	71 08       	sbc	r7, r1
    355a:	81 08       	sbc	r8, r1
    355c:	91 08       	sbc	r9, r1
    355e:	a2 0c       	add	r10, r2
    3560:	b3 1c       	adc	r11, r3
    3562:	c4 1c       	adc	r12, r4
    3564:	d5 1c       	adc	r13, r5
    3566:	a2 1a       	sub	r10, r18
    3568:	b3 0a       	sbc	r11, r19
    356a:	c4 0a       	sbc	r12, r20
    356c:	d5 0a       	sbc	r13, r21
    356e:	c6 01       	movw	r24, r12
    3570:	b5 01       	movw	r22, r10
    3572:	29 96       	adiw	r28, 0x09	; 9
    3574:	2c ad       	ldd	r18, Y+60	; 0x3c
    3576:	3d ad       	ldd	r19, Y+61	; 0x3d
    3578:	4e ad       	ldd	r20, Y+62	; 0x3e
    357a:	5f ad       	ldd	r21, Y+63	; 0x3f
    357c:	29 97       	sbiw	r28, 0x09	; 9
    357e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3582:	7b 01       	movw	r14, r22
    3584:	8c 01       	movw	r16, r24
    3586:	c6 01       	movw	r24, r12
    3588:	b5 01       	movw	r22, r10
    358a:	29 96       	adiw	r28, 0x09	; 9
    358c:	2c ad       	ldd	r18, Y+60	; 0x3c
    358e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3590:	4e ad       	ldd	r20, Y+62	; 0x3e
    3592:	5f ad       	ldd	r21, Y+63	; 0x3f
    3594:	29 97       	sbiw	r28, 0x09	; 9
    3596:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    359a:	c9 01       	movw	r24, r18
    359c:	da 01       	movw	r26, r20
    359e:	5c 01       	movw	r10, r24
    35a0:	6d 01       	movw	r12, r26
    35a2:	c6 01       	movw	r24, r12
    35a4:	b5 01       	movw	r22, r10
    35a6:	2d 96       	adiw	r28, 0x0d	; 13
    35a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    35aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    35ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    35ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    35b0:	2d 97       	sbiw	r28, 0x0d	; 13
    35b2:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    35b6:	9b 01       	movw	r18, r22
    35b8:	ac 01       	movw	r20, r24
    35ba:	87 01       	movw	r16, r14
    35bc:	ff 24       	eor	r15, r15
    35be:	ee 24       	eor	r14, r14
    35c0:	21 96       	adiw	r28, 0x01	; 1
    35c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    35c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    35c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    35c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    35ca:	21 97       	sbiw	r28, 0x01	; 1
    35cc:	a0 70       	andi	r26, 0x00	; 0
    35ce:	b0 70       	andi	r27, 0x00	; 0
    35d0:	e8 2a       	or	r14, r24
    35d2:	f9 2a       	or	r15, r25
    35d4:	0a 2b       	or	r16, r26
    35d6:	1b 2b       	or	r17, r27
    35d8:	e2 16       	cp	r14, r18
    35da:	f3 06       	cpc	r15, r19
    35dc:	04 07       	cpc	r16, r20
    35de:	15 07       	cpc	r17, r21
    35e0:	c0 f4       	brcc	.+48     	; 0x3612 <__divdi3+0x546>
    35e2:	08 94       	sec
    35e4:	a1 08       	sbc	r10, r1
    35e6:	b1 08       	sbc	r11, r1
    35e8:	c1 08       	sbc	r12, r1
    35ea:	d1 08       	sbc	r13, r1
    35ec:	e2 0c       	add	r14, r2
    35ee:	f3 1c       	adc	r15, r3
    35f0:	04 1d       	adc	r16, r4
    35f2:	15 1d       	adc	r17, r5
    35f4:	e2 14       	cp	r14, r2
    35f6:	f3 04       	cpc	r15, r3
    35f8:	04 05       	cpc	r16, r4
    35fa:	15 05       	cpc	r17, r5
    35fc:	50 f0       	brcs	.+20     	; 0x3612 <__divdi3+0x546>
    35fe:	e2 16       	cp	r14, r18
    3600:	f3 06       	cpc	r15, r19
    3602:	04 07       	cpc	r16, r20
    3604:	15 07       	cpc	r17, r21
    3606:	28 f4       	brcc	.+10     	; 0x3612 <__divdi3+0x546>
    3608:	08 94       	sec
    360a:	a1 08       	sbc	r10, r1
    360c:	b1 08       	sbc	r11, r1
    360e:	c1 08       	sbc	r12, r1
    3610:	d1 08       	sbc	r13, r1
    3612:	d3 01       	movw	r26, r6
    3614:	99 27       	eor	r25, r25
    3616:	88 27       	eor	r24, r24
    3618:	86 01       	movw	r16, r12
    361a:	75 01       	movw	r14, r10
    361c:	e8 2a       	or	r14, r24
    361e:	f9 2a       	or	r15, r25
    3620:	0a 2b       	or	r16, r26
    3622:	1b 2b       	or	r17, r27
    3624:	25 96       	adiw	r28, 0x05	; 5
    3626:	ec ae       	std	Y+60, r14	; 0x3c
    3628:	fd ae       	std	Y+61, r15	; 0x3d
    362a:	0e af       	std	Y+62, r16	; 0x3e
    362c:	1f af       	std	Y+63, r17	; 0x3f
    362e:	25 97       	sbiw	r28, 0x05	; 5
    3630:	eb c4       	rjmp	.+2518   	; 0x4008 <__divdi3+0xf3c>
    3632:	21 14       	cp	r2, r1
    3634:	31 04       	cpc	r3, r1
    3636:	41 04       	cpc	r4, r1
    3638:	51 04       	cpc	r5, r1
    363a:	71 f4       	brne	.+28     	; 0x3658 <__divdi3+0x58c>
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e0       	ldi	r20, 0x00	; 0
    364a:	50 e0       	ldi	r21, 0x00	; 0
    364c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3650:	c9 01       	movw	r24, r18
    3652:	da 01       	movw	r26, r20
    3654:	1c 01       	movw	r2, r24
    3656:	2d 01       	movw	r4, r26
    3658:	00 e0       	ldi	r16, 0x00	; 0
    365a:	20 16       	cp	r2, r16
    365c:	00 e0       	ldi	r16, 0x00	; 0
    365e:	30 06       	cpc	r3, r16
    3660:	01 e0       	ldi	r16, 0x01	; 1
    3662:	40 06       	cpc	r4, r16
    3664:	00 e0       	ldi	r16, 0x00	; 0
    3666:	50 06       	cpc	r5, r16
    3668:	88 f4       	brcc	.+34     	; 0x368c <__divdi3+0x5c0>
    366a:	1f ef       	ldi	r17, 0xFF	; 255
    366c:	21 16       	cp	r2, r17
    366e:	31 04       	cpc	r3, r1
    3670:	41 04       	cpc	r4, r1
    3672:	51 04       	cpc	r5, r1
    3674:	31 f0       	breq	.+12     	; 0x3682 <__divdi3+0x5b6>
    3676:	28 f0       	brcs	.+10     	; 0x3682 <__divdi3+0x5b6>
    3678:	48 e0       	ldi	r20, 0x08	; 8
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	17 c0       	rjmp	.+46     	; 0x36b0 <__divdi3+0x5e4>
    3682:	40 e0       	ldi	r20, 0x00	; 0
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	12 c0       	rjmp	.+36     	; 0x36b0 <__divdi3+0x5e4>
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	22 16       	cp	r2, r18
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	32 06       	cpc	r3, r18
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	42 06       	cpc	r4, r18
    3698:	21 e0       	ldi	r18, 0x01	; 1
    369a:	52 06       	cpc	r5, r18
    369c:	28 f0       	brcs	.+10     	; 0x36a8 <__divdi3+0x5dc>
    369e:	48 e1       	ldi	r20, 0x18	; 24
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <__divdi3+0x5e4>
    36a8:	40 e1       	ldi	r20, 0x10	; 16
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	d2 01       	movw	r26, r4
    36b2:	c1 01       	movw	r24, r2
    36b4:	04 2e       	mov	r0, r20
    36b6:	04 c0       	rjmp	.+8      	; 0x36c0 <__divdi3+0x5f4>
    36b8:	b6 95       	lsr	r27
    36ba:	a7 95       	ror	r26
    36bc:	97 95       	ror	r25
    36be:	87 95       	ror	r24
    36c0:	0a 94       	dec	r0
    36c2:	d2 f7       	brpl	.-12     	; 0x36b8 <__divdi3+0x5ec>
    36c4:	8d 5f       	subi	r24, 0xFD	; 253
    36c6:	9f 4d       	sbci	r25, 0xDF	; 223
    36c8:	dc 01       	movw	r26, r24
    36ca:	2c 91       	ld	r18, X
    36cc:	e0 e2       	ldi	r30, 0x20	; 32
    36ce:	ee 2e       	mov	r14, r30
    36d0:	f1 2c       	mov	r15, r1
    36d2:	01 2d       	mov	r16, r1
    36d4:	11 2d       	mov	r17, r1
    36d6:	d8 01       	movw	r26, r16
    36d8:	c7 01       	movw	r24, r14
    36da:	84 1b       	sub	r24, r20
    36dc:	95 0b       	sbc	r25, r21
    36de:	a6 0b       	sbc	r26, r22
    36e0:	b7 0b       	sbc	r27, r23
    36e2:	82 1b       	sub	r24, r18
    36e4:	91 09       	sbc	r25, r1
    36e6:	a1 09       	sbc	r26, r1
    36e8:	b1 09       	sbc	r27, r1
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	a1 05       	cpc	r26, r1
    36ee:	b1 05       	cpc	r27, r1
    36f0:	61 f4       	brne	.+24     	; 0x370a <__divdi3+0x63e>
    36f2:	64 01       	movw	r12, r8
    36f4:	53 01       	movw	r10, r6
    36f6:	a2 18       	sub	r10, r2
    36f8:	b3 08       	sbc	r11, r3
    36fa:	c4 08       	sbc	r12, r4
    36fc:	d5 08       	sbc	r13, r5
    36fe:	31 e0       	ldi	r19, 0x01	; 1
    3700:	63 2e       	mov	r6, r19
    3702:	71 2c       	mov	r7, r1
    3704:	81 2c       	mov	r8, r1
    3706:	91 2c       	mov	r9, r1
    3708:	24 c1       	rjmp	.+584    	; 0x3952 <__divdi3+0x886>
    370a:	e3 96       	adiw	r28, 0x33	; 51
    370c:	8f af       	std	Y+63, r24	; 0x3f
    370e:	e3 97       	sbiw	r28, 0x33	; 51
    3710:	08 2e       	mov	r0, r24
    3712:	04 c0       	rjmp	.+8      	; 0x371c <__divdi3+0x650>
    3714:	22 0c       	add	r2, r2
    3716:	33 1c       	adc	r3, r3
    3718:	44 1c       	adc	r4, r4
    371a:	55 1c       	adc	r5, r5
    371c:	0a 94       	dec	r0
    371e:	d2 f7       	brpl	.-12     	; 0x3714 <__divdi3+0x648>
    3720:	ee 2d       	mov	r30, r14
    3722:	e8 1b       	sub	r30, r24
    3724:	64 01       	movw	r12, r8
    3726:	53 01       	movw	r10, r6
    3728:	0e 2e       	mov	r0, r30
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <__divdi3+0x668>
    372c:	d6 94       	lsr	r13
    372e:	c7 94       	ror	r12
    3730:	b7 94       	ror	r11
    3732:	a7 94       	ror	r10
    3734:	0a 94       	dec	r0
    3736:	d2 f7       	brpl	.-12     	; 0x372c <__divdi3+0x660>
    3738:	a4 01       	movw	r20, r8
    373a:	93 01       	movw	r18, r6
    373c:	e3 96       	adiw	r28, 0x33	; 51
    373e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3740:	e3 97       	sbiw	r28, 0x33	; 51
    3742:	04 c0       	rjmp	.+8      	; 0x374c <__divdi3+0x680>
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	44 1f       	adc	r20, r20
    374a:	55 1f       	adc	r21, r21
    374c:	0a 94       	dec	r0
    374e:	d2 f7       	brpl	.-12     	; 0x3744 <__divdi3+0x678>
    3750:	21 96       	adiw	r28, 0x01	; 1
    3752:	6c ac       	ldd	r6, Y+60	; 0x3c
    3754:	7d ac       	ldd	r7, Y+61	; 0x3d
    3756:	8e ac       	ldd	r8, Y+62	; 0x3e
    3758:	9f ac       	ldd	r9, Y+63	; 0x3f
    375a:	21 97       	sbiw	r28, 0x01	; 1
    375c:	0e 2e       	mov	r0, r30
    375e:	04 c0       	rjmp	.+8      	; 0x3768 <__divdi3+0x69c>
    3760:	96 94       	lsr	r9
    3762:	87 94       	ror	r8
    3764:	77 94       	ror	r7
    3766:	67 94       	ror	r6
    3768:	0a 94       	dec	r0
    376a:	d2 f7       	brpl	.-12     	; 0x3760 <__divdi3+0x694>
    376c:	84 01       	movw	r16, r8
    376e:	73 01       	movw	r14, r6
    3770:	e2 2a       	or	r14, r18
    3772:	f3 2a       	or	r15, r19
    3774:	04 2b       	or	r16, r20
    3776:	15 2b       	or	r17, r21
    3778:	e9 ae       	std	Y+57, r14	; 0x39
    377a:	fa ae       	std	Y+58, r15	; 0x3a
    377c:	0b af       	std	Y+59, r16	; 0x3b
    377e:	1c af       	std	Y+60, r17	; 0x3c
    3780:	32 01       	movw	r6, r4
    3782:	88 24       	eor	r8, r8
    3784:	99 24       	eor	r9, r9
    3786:	92 01       	movw	r18, r4
    3788:	81 01       	movw	r16, r2
    378a:	20 70       	andi	r18, 0x00	; 0
    378c:	30 70       	andi	r19, 0x00	; 0
    378e:	61 96       	adiw	r28, 0x11	; 17
    3790:	0c af       	std	Y+60, r16	; 0x3c
    3792:	1d af       	std	Y+61, r17	; 0x3d
    3794:	2e af       	std	Y+62, r18	; 0x3e
    3796:	3f af       	std	Y+63, r19	; 0x3f
    3798:	61 97       	sbiw	r28, 0x11	; 17
    379a:	c6 01       	movw	r24, r12
    379c:	b5 01       	movw	r22, r10
    379e:	a4 01       	movw	r20, r8
    37a0:	93 01       	movw	r18, r6
    37a2:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    37a6:	7b 01       	movw	r14, r22
    37a8:	8c 01       	movw	r16, r24
    37aa:	c6 01       	movw	r24, r12
    37ac:	b5 01       	movw	r22, r10
    37ae:	a4 01       	movw	r20, r8
    37b0:	93 01       	movw	r18, r6
    37b2:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    37b6:	c9 01       	movw	r24, r18
    37b8:	da 01       	movw	r26, r20
    37ba:	65 96       	adiw	r28, 0x15	; 21
    37bc:	8c af       	std	Y+60, r24	; 0x3c
    37be:	9d af       	std	Y+61, r25	; 0x3d
    37c0:	ae af       	std	Y+62, r26	; 0x3e
    37c2:	bf af       	std	Y+63, r27	; 0x3f
    37c4:	65 97       	sbiw	r28, 0x15	; 21
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	61 96       	adiw	r28, 0x11	; 17
    37cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    37ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    37d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    37d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    37d4:	61 97       	sbiw	r28, 0x11	; 17
    37d6:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    37da:	9b 01       	movw	r18, r22
    37dc:	ac 01       	movw	r20, r24
    37de:	87 01       	movw	r16, r14
    37e0:	ff 24       	eor	r15, r15
    37e2:	ee 24       	eor	r14, r14
    37e4:	a9 ac       	ldd	r10, Y+57	; 0x39
    37e6:	ba ac       	ldd	r11, Y+58	; 0x3a
    37e8:	cb ac       	ldd	r12, Y+59	; 0x3b
    37ea:	dc ac       	ldd	r13, Y+60	; 0x3c
    37ec:	c6 01       	movw	r24, r12
    37ee:	aa 27       	eor	r26, r26
    37f0:	bb 27       	eor	r27, r27
    37f2:	5c 01       	movw	r10, r24
    37f4:	6d 01       	movw	r12, r26
    37f6:	ae 28       	or	r10, r14
    37f8:	bf 28       	or	r11, r15
    37fa:	c0 2a       	or	r12, r16
    37fc:	d1 2a       	or	r13, r17
    37fe:	a2 16       	cp	r10, r18
    3800:	b3 06       	cpc	r11, r19
    3802:	c4 06       	cpc	r12, r20
    3804:	d5 06       	cpc	r13, r21
    3806:	60 f5       	brcc	.+88     	; 0x3860 <__divdi3+0x794>
    3808:	65 96       	adiw	r28, 0x15	; 21
    380a:	6c ad       	ldd	r22, Y+60	; 0x3c
    380c:	7d ad       	ldd	r23, Y+61	; 0x3d
    380e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3810:	9f ad       	ldd	r25, Y+63	; 0x3f
    3812:	65 97       	sbiw	r28, 0x15	; 21
    3814:	61 50       	subi	r22, 0x01	; 1
    3816:	70 40       	sbci	r23, 0x00	; 0
    3818:	80 40       	sbci	r24, 0x00	; 0
    381a:	90 40       	sbci	r25, 0x00	; 0
    381c:	65 96       	adiw	r28, 0x15	; 21
    381e:	6c af       	std	Y+60, r22	; 0x3c
    3820:	7d af       	std	Y+61, r23	; 0x3d
    3822:	8e af       	std	Y+62, r24	; 0x3e
    3824:	9f af       	std	Y+63, r25	; 0x3f
    3826:	65 97       	sbiw	r28, 0x15	; 21
    3828:	a2 0c       	add	r10, r2
    382a:	b3 1c       	adc	r11, r3
    382c:	c4 1c       	adc	r12, r4
    382e:	d5 1c       	adc	r13, r5
    3830:	a2 14       	cp	r10, r2
    3832:	b3 04       	cpc	r11, r3
    3834:	c4 04       	cpc	r12, r4
    3836:	d5 04       	cpc	r13, r5
    3838:	98 f0       	brcs	.+38     	; 0x3860 <__divdi3+0x794>
    383a:	a2 16       	cp	r10, r18
    383c:	b3 06       	cpc	r11, r19
    383e:	c4 06       	cpc	r12, r20
    3840:	d5 06       	cpc	r13, r21
    3842:	70 f4       	brcc	.+28     	; 0x3860 <__divdi3+0x794>
    3844:	61 50       	subi	r22, 0x01	; 1
    3846:	70 40       	sbci	r23, 0x00	; 0
    3848:	80 40       	sbci	r24, 0x00	; 0
    384a:	90 40       	sbci	r25, 0x00	; 0
    384c:	65 96       	adiw	r28, 0x15	; 21
    384e:	6c af       	std	Y+60, r22	; 0x3c
    3850:	7d af       	std	Y+61, r23	; 0x3d
    3852:	8e af       	std	Y+62, r24	; 0x3e
    3854:	9f af       	std	Y+63, r25	; 0x3f
    3856:	65 97       	sbiw	r28, 0x15	; 21
    3858:	a2 0c       	add	r10, r2
    385a:	b3 1c       	adc	r11, r3
    385c:	c4 1c       	adc	r12, r4
    385e:	d5 1c       	adc	r13, r5
    3860:	a2 1a       	sub	r10, r18
    3862:	b3 0a       	sbc	r11, r19
    3864:	c4 0a       	sbc	r12, r20
    3866:	d5 0a       	sbc	r13, r21
    3868:	c6 01       	movw	r24, r12
    386a:	b5 01       	movw	r22, r10
    386c:	a4 01       	movw	r20, r8
    386e:	93 01       	movw	r18, r6
    3870:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3874:	7b 01       	movw	r14, r22
    3876:	8c 01       	movw	r16, r24
    3878:	c6 01       	movw	r24, r12
    387a:	b5 01       	movw	r22, r10
    387c:	a4 01       	movw	r20, r8
    387e:	93 01       	movw	r18, r6
    3880:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3884:	c9 01       	movw	r24, r18
    3886:	da 01       	movw	r26, r20
    3888:	3c 01       	movw	r6, r24
    388a:	4d 01       	movw	r8, r26
    388c:	c4 01       	movw	r24, r8
    388e:	b3 01       	movw	r22, r6
    3890:	61 96       	adiw	r28, 0x11	; 17
    3892:	2c ad       	ldd	r18, Y+60	; 0x3c
    3894:	3d ad       	ldd	r19, Y+61	; 0x3d
    3896:	4e ad       	ldd	r20, Y+62	; 0x3e
    3898:	5f ad       	ldd	r21, Y+63	; 0x3f
    389a:	61 97       	sbiw	r28, 0x11	; 17
    389c:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    38a0:	9b 01       	movw	r18, r22
    38a2:	ac 01       	movw	r20, r24
    38a4:	87 01       	movw	r16, r14
    38a6:	ff 24       	eor	r15, r15
    38a8:	ee 24       	eor	r14, r14
    38aa:	89 ad       	ldd	r24, Y+57	; 0x39
    38ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    38ae:	ab ad       	ldd	r26, Y+59	; 0x3b
    38b0:	bc ad       	ldd	r27, Y+60	; 0x3c
    38b2:	a0 70       	andi	r26, 0x00	; 0
    38b4:	b0 70       	andi	r27, 0x00	; 0
    38b6:	57 01       	movw	r10, r14
    38b8:	68 01       	movw	r12, r16
    38ba:	a8 2a       	or	r10, r24
    38bc:	b9 2a       	or	r11, r25
    38be:	ca 2a       	or	r12, r26
    38c0:	db 2a       	or	r13, r27
    38c2:	a2 16       	cp	r10, r18
    38c4:	b3 06       	cpc	r11, r19
    38c6:	c4 06       	cpc	r12, r20
    38c8:	d5 06       	cpc	r13, r21
    38ca:	e0 f4       	brcc	.+56     	; 0x3904 <__divdi3+0x838>
    38cc:	08 94       	sec
    38ce:	61 08       	sbc	r6, r1
    38d0:	71 08       	sbc	r7, r1
    38d2:	81 08       	sbc	r8, r1
    38d4:	91 08       	sbc	r9, r1
    38d6:	a2 0c       	add	r10, r2
    38d8:	b3 1c       	adc	r11, r3
    38da:	c4 1c       	adc	r12, r4
    38dc:	d5 1c       	adc	r13, r5
    38de:	a2 14       	cp	r10, r2
    38e0:	b3 04       	cpc	r11, r3
    38e2:	c4 04       	cpc	r12, r4
    38e4:	d5 04       	cpc	r13, r5
    38e6:	70 f0       	brcs	.+28     	; 0x3904 <__divdi3+0x838>
    38e8:	a2 16       	cp	r10, r18
    38ea:	b3 06       	cpc	r11, r19
    38ec:	c4 06       	cpc	r12, r20
    38ee:	d5 06       	cpc	r13, r21
    38f0:	48 f4       	brcc	.+18     	; 0x3904 <__divdi3+0x838>
    38f2:	08 94       	sec
    38f4:	61 08       	sbc	r6, r1
    38f6:	71 08       	sbc	r7, r1
    38f8:	81 08       	sbc	r8, r1
    38fa:	91 08       	sbc	r9, r1
    38fc:	a2 0c       	add	r10, r2
    38fe:	b3 1c       	adc	r11, r3
    3900:	c4 1c       	adc	r12, r4
    3902:	d5 1c       	adc	r13, r5
    3904:	21 96       	adiw	r28, 0x01	; 1
    3906:	8c ad       	ldd	r24, Y+60	; 0x3c
    3908:	9d ad       	ldd	r25, Y+61	; 0x3d
    390a:	ae ad       	ldd	r26, Y+62	; 0x3e
    390c:	bf ad       	ldd	r27, Y+63	; 0x3f
    390e:	21 97       	sbiw	r28, 0x01	; 1
    3910:	e3 96       	adiw	r28, 0x33	; 51
    3912:	0f ac       	ldd	r0, Y+63	; 0x3f
    3914:	e3 97       	sbiw	r28, 0x33	; 51
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <__divdi3+0x854>
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	aa 1f       	adc	r26, r26
    391e:	bb 1f       	adc	r27, r27
    3920:	0a 94       	dec	r0
    3922:	d2 f7       	brpl	.-12     	; 0x3918 <__divdi3+0x84c>
    3924:	21 96       	adiw	r28, 0x01	; 1
    3926:	8c af       	std	Y+60, r24	; 0x3c
    3928:	9d af       	std	Y+61, r25	; 0x3d
    392a:	ae af       	std	Y+62, r26	; 0x3e
    392c:	bf af       	std	Y+63, r27	; 0x3f
    392e:	21 97       	sbiw	r28, 0x01	; 1
    3930:	a2 1a       	sub	r10, r18
    3932:	b3 0a       	sbc	r11, r19
    3934:	c4 0a       	sbc	r12, r20
    3936:	d5 0a       	sbc	r13, r21
    3938:	65 96       	adiw	r28, 0x15	; 21
    393a:	ec ac       	ldd	r14, Y+60	; 0x3c
    393c:	fd ac       	ldd	r15, Y+61	; 0x3d
    393e:	0e ad       	ldd	r16, Y+62	; 0x3e
    3940:	1f ad       	ldd	r17, Y+63	; 0x3f
    3942:	65 97       	sbiw	r28, 0x15	; 21
    3944:	d7 01       	movw	r26, r14
    3946:	99 27       	eor	r25, r25
    3948:	88 27       	eor	r24, r24
    394a:	68 2a       	or	r6, r24
    394c:	79 2a       	or	r7, r25
    394e:	8a 2a       	or	r8, r26
    3950:	9b 2a       	or	r9, r27
    3952:	82 01       	movw	r16, r4
    3954:	22 27       	eor	r18, r18
    3956:	33 27       	eor	r19, r19
    3958:	69 96       	adiw	r28, 0x19	; 25
    395a:	0c af       	std	Y+60, r16	; 0x3c
    395c:	1d af       	std	Y+61, r17	; 0x3d
    395e:	2e af       	std	Y+62, r18	; 0x3e
    3960:	3f af       	std	Y+63, r19	; 0x3f
    3962:	69 97       	sbiw	r28, 0x19	; 25
    3964:	a2 01       	movw	r20, r4
    3966:	91 01       	movw	r18, r2
    3968:	40 70       	andi	r20, 0x00	; 0
    396a:	50 70       	andi	r21, 0x00	; 0
    396c:	6d 96       	adiw	r28, 0x1d	; 29
    396e:	2c af       	std	Y+60, r18	; 0x3c
    3970:	3d af       	std	Y+61, r19	; 0x3d
    3972:	4e af       	std	Y+62, r20	; 0x3e
    3974:	5f af       	std	Y+63, r21	; 0x3f
    3976:	6d 97       	sbiw	r28, 0x1d	; 29
    3978:	c6 01       	movw	r24, r12
    397a:	b5 01       	movw	r22, r10
    397c:	69 96       	adiw	r28, 0x19	; 25
    397e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3980:	3d ad       	ldd	r19, Y+61	; 0x3d
    3982:	4e ad       	ldd	r20, Y+62	; 0x3e
    3984:	5f ad       	ldd	r21, Y+63	; 0x3f
    3986:	69 97       	sbiw	r28, 0x19	; 25
    3988:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    398c:	7b 01       	movw	r14, r22
    398e:	8c 01       	movw	r16, r24
    3990:	c6 01       	movw	r24, r12
    3992:	b5 01       	movw	r22, r10
    3994:	69 96       	adiw	r28, 0x19	; 25
    3996:	2c ad       	ldd	r18, Y+60	; 0x3c
    3998:	3d ad       	ldd	r19, Y+61	; 0x3d
    399a:	4e ad       	ldd	r20, Y+62	; 0x3e
    399c:	5f ad       	ldd	r21, Y+63	; 0x3f
    399e:	69 97       	sbiw	r28, 0x19	; 25
    39a0:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    39a4:	c9 01       	movw	r24, r18
    39a6:	da 01       	movw	r26, r20
    39a8:	a1 96       	adiw	r28, 0x21	; 33
    39aa:	8c af       	std	Y+60, r24	; 0x3c
    39ac:	9d af       	std	Y+61, r25	; 0x3d
    39ae:	ae af       	std	Y+62, r26	; 0x3e
    39b0:	bf af       	std	Y+63, r27	; 0x3f
    39b2:	a1 97       	sbiw	r28, 0x21	; 33
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	6d 96       	adiw	r28, 0x1d	; 29
    39ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    39bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    39be:	4e ad       	ldd	r20, Y+62	; 0x3e
    39c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    39c2:	6d 97       	sbiw	r28, 0x1d	; 29
    39c4:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	87 01       	movw	r16, r14
    39ce:	ff 24       	eor	r15, r15
    39d0:	ee 24       	eor	r14, r14
    39d2:	21 96       	adiw	r28, 0x01	; 1
    39d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    39d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    39d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    39da:	df ac       	ldd	r13, Y+63	; 0x3f
    39dc:	21 97       	sbiw	r28, 0x01	; 1
    39de:	c6 01       	movw	r24, r12
    39e0:	aa 27       	eor	r26, r26
    39e2:	bb 27       	eor	r27, r27
    39e4:	57 01       	movw	r10, r14
    39e6:	68 01       	movw	r12, r16
    39e8:	a8 2a       	or	r10, r24
    39ea:	b9 2a       	or	r11, r25
    39ec:	ca 2a       	or	r12, r26
    39ee:	db 2a       	or	r13, r27
    39f0:	a2 16       	cp	r10, r18
    39f2:	b3 06       	cpc	r11, r19
    39f4:	c4 06       	cpc	r12, r20
    39f6:	d5 06       	cpc	r13, r21
    39f8:	60 f5       	brcc	.+88     	; 0x3a52 <__divdi3+0x986>
    39fa:	a1 96       	adiw	r28, 0x21	; 33
    39fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    39fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a00:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a02:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a04:	a1 97       	sbiw	r28, 0x21	; 33
    3a06:	61 50       	subi	r22, 0x01	; 1
    3a08:	70 40       	sbci	r23, 0x00	; 0
    3a0a:	80 40       	sbci	r24, 0x00	; 0
    3a0c:	90 40       	sbci	r25, 0x00	; 0
    3a0e:	a1 96       	adiw	r28, 0x21	; 33
    3a10:	6c af       	std	Y+60, r22	; 0x3c
    3a12:	7d af       	std	Y+61, r23	; 0x3d
    3a14:	8e af       	std	Y+62, r24	; 0x3e
    3a16:	9f af       	std	Y+63, r25	; 0x3f
    3a18:	a1 97       	sbiw	r28, 0x21	; 33
    3a1a:	a2 0c       	add	r10, r2
    3a1c:	b3 1c       	adc	r11, r3
    3a1e:	c4 1c       	adc	r12, r4
    3a20:	d5 1c       	adc	r13, r5
    3a22:	a2 14       	cp	r10, r2
    3a24:	b3 04       	cpc	r11, r3
    3a26:	c4 04       	cpc	r12, r4
    3a28:	d5 04       	cpc	r13, r5
    3a2a:	98 f0       	brcs	.+38     	; 0x3a52 <__divdi3+0x986>
    3a2c:	a2 16       	cp	r10, r18
    3a2e:	b3 06       	cpc	r11, r19
    3a30:	c4 06       	cpc	r12, r20
    3a32:	d5 06       	cpc	r13, r21
    3a34:	70 f4       	brcc	.+28     	; 0x3a52 <__divdi3+0x986>
    3a36:	61 50       	subi	r22, 0x01	; 1
    3a38:	70 40       	sbci	r23, 0x00	; 0
    3a3a:	80 40       	sbci	r24, 0x00	; 0
    3a3c:	90 40       	sbci	r25, 0x00	; 0
    3a3e:	a1 96       	adiw	r28, 0x21	; 33
    3a40:	6c af       	std	Y+60, r22	; 0x3c
    3a42:	7d af       	std	Y+61, r23	; 0x3d
    3a44:	8e af       	std	Y+62, r24	; 0x3e
    3a46:	9f af       	std	Y+63, r25	; 0x3f
    3a48:	a1 97       	sbiw	r28, 0x21	; 33
    3a4a:	a2 0c       	add	r10, r2
    3a4c:	b3 1c       	adc	r11, r3
    3a4e:	c4 1c       	adc	r12, r4
    3a50:	d5 1c       	adc	r13, r5
    3a52:	a2 1a       	sub	r10, r18
    3a54:	b3 0a       	sbc	r11, r19
    3a56:	c4 0a       	sbc	r12, r20
    3a58:	d5 0a       	sbc	r13, r21
    3a5a:	c6 01       	movw	r24, r12
    3a5c:	b5 01       	movw	r22, r10
    3a5e:	69 96       	adiw	r28, 0x19	; 25
    3a60:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a62:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a64:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a66:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a68:	69 97       	sbiw	r28, 0x19	; 25
    3a6a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3a6e:	7b 01       	movw	r14, r22
    3a70:	8c 01       	movw	r16, r24
    3a72:	c6 01       	movw	r24, r12
    3a74:	b5 01       	movw	r22, r10
    3a76:	69 96       	adiw	r28, 0x19	; 25
    3a78:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a7a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a7c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a7e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a80:	69 97       	sbiw	r28, 0x19	; 25
    3a82:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3a86:	c9 01       	movw	r24, r18
    3a88:	da 01       	movw	r26, r20
    3a8a:	5c 01       	movw	r10, r24
    3a8c:	6d 01       	movw	r12, r26
    3a8e:	c6 01       	movw	r24, r12
    3a90:	b5 01       	movw	r22, r10
    3a92:	6d 96       	adiw	r28, 0x1d	; 29
    3a94:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a96:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a98:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a9c:	6d 97       	sbiw	r28, 0x1d	; 29
    3a9e:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3aa2:	9b 01       	movw	r18, r22
    3aa4:	ac 01       	movw	r20, r24
    3aa6:	87 01       	movw	r16, r14
    3aa8:	ff 24       	eor	r15, r15
    3aaa:	ee 24       	eor	r14, r14
    3aac:	21 96       	adiw	r28, 0x01	; 1
    3aae:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ab0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ab2:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ab4:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ab6:	21 97       	sbiw	r28, 0x01	; 1
    3ab8:	a0 70       	andi	r26, 0x00	; 0
    3aba:	b0 70       	andi	r27, 0x00	; 0
    3abc:	e8 2a       	or	r14, r24
    3abe:	f9 2a       	or	r15, r25
    3ac0:	0a 2b       	or	r16, r26
    3ac2:	1b 2b       	or	r17, r27
    3ac4:	e2 16       	cp	r14, r18
    3ac6:	f3 06       	cpc	r15, r19
    3ac8:	04 07       	cpc	r16, r20
    3aca:	15 07       	cpc	r17, r21
    3acc:	c0 f4       	brcc	.+48     	; 0x3afe <__divdi3+0xa32>
    3ace:	08 94       	sec
    3ad0:	a1 08       	sbc	r10, r1
    3ad2:	b1 08       	sbc	r11, r1
    3ad4:	c1 08       	sbc	r12, r1
    3ad6:	d1 08       	sbc	r13, r1
    3ad8:	e2 0c       	add	r14, r2
    3ada:	f3 1c       	adc	r15, r3
    3adc:	04 1d       	adc	r16, r4
    3ade:	15 1d       	adc	r17, r5
    3ae0:	e2 14       	cp	r14, r2
    3ae2:	f3 04       	cpc	r15, r3
    3ae4:	04 05       	cpc	r16, r4
    3ae6:	15 05       	cpc	r17, r5
    3ae8:	50 f0       	brcs	.+20     	; 0x3afe <__divdi3+0xa32>
    3aea:	e2 16       	cp	r14, r18
    3aec:	f3 06       	cpc	r15, r19
    3aee:	04 07       	cpc	r16, r20
    3af0:	15 07       	cpc	r17, r21
    3af2:	28 f4       	brcc	.+10     	; 0x3afe <__divdi3+0xa32>
    3af4:	08 94       	sec
    3af6:	a1 08       	sbc	r10, r1
    3af8:	b1 08       	sbc	r11, r1
    3afa:	c1 08       	sbc	r12, r1
    3afc:	d1 08       	sbc	r13, r1
    3afe:	a1 96       	adiw	r28, 0x21	; 33
    3b00:	ec ac       	ldd	r14, Y+60	; 0x3c
    3b02:	fd ac       	ldd	r15, Y+61	; 0x3d
    3b04:	0e ad       	ldd	r16, Y+62	; 0x3e
    3b06:	1f ad       	ldd	r17, Y+63	; 0x3f
    3b08:	a1 97       	sbiw	r28, 0x21	; 33
    3b0a:	d7 01       	movw	r26, r14
    3b0c:	99 27       	eor	r25, r25
    3b0e:	88 27       	eor	r24, r24
    3b10:	96 01       	movw	r18, r12
    3b12:	85 01       	movw	r16, r10
    3b14:	08 2b       	or	r16, r24
    3b16:	19 2b       	or	r17, r25
    3b18:	2a 2b       	or	r18, r26
    3b1a:	3b 2b       	or	r19, r27
    3b1c:	25 96       	adiw	r28, 0x05	; 5
    3b1e:	0c af       	std	Y+60, r16	; 0x3c
    3b20:	1d af       	std	Y+61, r17	; 0x3d
    3b22:	2e af       	std	Y+62, r18	; 0x3e
    3b24:	3f af       	std	Y+63, r19	; 0x3f
    3b26:	25 97       	sbiw	r28, 0x05	; 5
    3b28:	72 c2       	rjmp	.+1252   	; 0x400e <__divdi3+0xf42>
    3b2a:	6e 14       	cp	r6, r14
    3b2c:	7f 04       	cpc	r7, r15
    3b2e:	80 06       	cpc	r8, r16
    3b30:	91 06       	cpc	r9, r17
    3b32:	08 f4       	brcc	.+2      	; 0x3b36 <__divdi3+0xa6a>
    3b34:	5f c2       	rjmp	.+1214   	; 0x3ff4 <__divdi3+0xf28>
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	e2 16       	cp	r14, r18
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	f2 06       	cpc	r15, r18
    3b3e:	21 e0       	ldi	r18, 0x01	; 1
    3b40:	02 07       	cpc	r16, r18
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	12 07       	cpc	r17, r18
    3b46:	88 f4       	brcc	.+34     	; 0x3b6a <__divdi3+0xa9e>
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	e3 16       	cp	r14, r19
    3b4c:	f1 04       	cpc	r15, r1
    3b4e:	01 05       	cpc	r16, r1
    3b50:	11 05       	cpc	r17, r1
    3b52:	31 f0       	breq	.+12     	; 0x3b60 <__divdi3+0xa94>
    3b54:	28 f0       	brcs	.+10     	; 0x3b60 <__divdi3+0xa94>
    3b56:	48 e0       	ldi	r20, 0x08	; 8
    3b58:	50 e0       	ldi	r21, 0x00	; 0
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	17 c0       	rjmp	.+46     	; 0x3b8e <__divdi3+0xac2>
    3b60:	40 e0       	ldi	r20, 0x00	; 0
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	60 e0       	ldi	r22, 0x00	; 0
    3b66:	70 e0       	ldi	r23, 0x00	; 0
    3b68:	12 c0       	rjmp	.+36     	; 0x3b8e <__divdi3+0xac2>
    3b6a:	40 e0       	ldi	r20, 0x00	; 0
    3b6c:	e4 16       	cp	r14, r20
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	f4 06       	cpc	r15, r20
    3b72:	40 e0       	ldi	r20, 0x00	; 0
    3b74:	04 07       	cpc	r16, r20
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	14 07       	cpc	r17, r20
    3b7a:	28 f0       	brcs	.+10     	; 0x3b86 <__divdi3+0xaba>
    3b7c:	48 e1       	ldi	r20, 0x18	; 24
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	04 c0       	rjmp	.+8      	; 0x3b8e <__divdi3+0xac2>
    3b86:	40 e1       	ldi	r20, 0x10	; 16
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	70 e0       	ldi	r23, 0x00	; 0
    3b8e:	d8 01       	movw	r26, r16
    3b90:	c7 01       	movw	r24, r14
    3b92:	04 2e       	mov	r0, r20
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <__divdi3+0xad2>
    3b96:	b6 95       	lsr	r27
    3b98:	a7 95       	ror	r26
    3b9a:	97 95       	ror	r25
    3b9c:	87 95       	ror	r24
    3b9e:	0a 94       	dec	r0
    3ba0:	d2 f7       	brpl	.-12     	; 0x3b96 <__divdi3+0xaca>
    3ba2:	8d 5f       	subi	r24, 0xFD	; 253
    3ba4:	9f 4d       	sbci	r25, 0xDF	; 223
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	2c 91       	ld	r18, X
    3baa:	30 e2       	ldi	r19, 0x20	; 32
    3bac:	a3 2e       	mov	r10, r19
    3bae:	b1 2c       	mov	r11, r1
    3bb0:	c1 2c       	mov	r12, r1
    3bb2:	d1 2c       	mov	r13, r1
    3bb4:	d6 01       	movw	r26, r12
    3bb6:	c5 01       	movw	r24, r10
    3bb8:	84 1b       	sub	r24, r20
    3bba:	95 0b       	sbc	r25, r21
    3bbc:	a6 0b       	sbc	r26, r22
    3bbe:	b7 0b       	sbc	r27, r23
    3bc0:	82 1b       	sub	r24, r18
    3bc2:	91 09       	sbc	r25, r1
    3bc4:	a1 09       	sbc	r26, r1
    3bc6:	b1 09       	sbc	r27, r1
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	a1 05       	cpc	r26, r1
    3bcc:	b1 05       	cpc	r27, r1
    3bce:	99 f4       	brne	.+38     	; 0x3bf6 <__divdi3+0xb2a>
    3bd0:	e6 14       	cp	r14, r6
    3bd2:	f7 04       	cpc	r15, r7
    3bd4:	08 05       	cpc	r16, r8
    3bd6:	19 05       	cpc	r17, r9
    3bd8:	08 f4       	brcc	.+2      	; 0x3bdc <__divdi3+0xb10>
    3bda:	fe c1       	rjmp	.+1020   	; 0x3fd8 <__divdi3+0xf0c>
    3bdc:	21 96       	adiw	r28, 0x01	; 1
    3bde:	6c ac       	ldd	r6, Y+60	; 0x3c
    3be0:	7d ac       	ldd	r7, Y+61	; 0x3d
    3be2:	8e ac       	ldd	r8, Y+62	; 0x3e
    3be4:	9f ac       	ldd	r9, Y+63	; 0x3f
    3be6:	21 97       	sbiw	r28, 0x01	; 1
    3be8:	62 14       	cp	r6, r2
    3bea:	73 04       	cpc	r7, r3
    3bec:	84 04       	cpc	r8, r4
    3bee:	95 04       	cpc	r9, r5
    3bf0:	08 f0       	brcs	.+2      	; 0x3bf4 <__divdi3+0xb28>
    3bf2:	f2 c1       	rjmp	.+996    	; 0x3fd8 <__divdi3+0xf0c>
    3bf4:	ff c1       	rjmp	.+1022   	; 0x3ff4 <__divdi3+0xf28>
    3bf6:	e2 96       	adiw	r28, 0x32	; 50
    3bf8:	8f af       	std	Y+63, r24	; 0x3f
    3bfa:	e2 97       	sbiw	r28, 0x32	; 50
    3bfc:	08 2e       	mov	r0, r24
    3bfe:	04 c0       	rjmp	.+8      	; 0x3c08 <__divdi3+0xb3c>
    3c00:	ee 0c       	add	r14, r14
    3c02:	ff 1c       	adc	r15, r15
    3c04:	00 1f       	adc	r16, r16
    3c06:	11 1f       	adc	r17, r17
    3c08:	0a 94       	dec	r0
    3c0a:	d2 f7       	brpl	.-12     	; 0x3c00 <__divdi3+0xb34>
    3c0c:	6a 2d       	mov	r22, r10
    3c0e:	68 1b       	sub	r22, r24
    3c10:	d2 01       	movw	r26, r4
    3c12:	c1 01       	movw	r24, r2
    3c14:	06 2e       	mov	r0, r22
    3c16:	04 c0       	rjmp	.+8      	; 0x3c20 <__divdi3+0xb54>
    3c18:	b6 95       	lsr	r27
    3c1a:	a7 95       	ror	r26
    3c1c:	97 95       	ror	r25
    3c1e:	87 95       	ror	r24
    3c20:	0a 94       	dec	r0
    3c22:	d2 f7       	brpl	.-12     	; 0x3c18 <__divdi3+0xb4c>
    3c24:	5c 01       	movw	r10, r24
    3c26:	6d 01       	movw	r12, r26
    3c28:	ae 28       	or	r10, r14
    3c2a:	bf 28       	or	r11, r15
    3c2c:	c0 2a       	or	r12, r16
    3c2e:	d1 2a       	or	r13, r17
    3c30:	ad aa       	std	Y+53, r10	; 0x35
    3c32:	be aa       	std	Y+54, r11	; 0x36
    3c34:	cf aa       	std	Y+55, r12	; 0x37
    3c36:	d8 ae       	std	Y+56, r13	; 0x38
    3c38:	72 01       	movw	r14, r4
    3c3a:	61 01       	movw	r12, r2
    3c3c:	e2 96       	adiw	r28, 0x32	; 50
    3c3e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c40:	e2 97       	sbiw	r28, 0x32	; 50
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <__divdi3+0xb80>
    3c44:	cc 0c       	add	r12, r12
    3c46:	dd 1c       	adc	r13, r13
    3c48:	ee 1c       	adc	r14, r14
    3c4a:	ff 1c       	adc	r15, r15
    3c4c:	0a 94       	dec	r0
    3c4e:	d2 f7       	brpl	.-12     	; 0x3c44 <__divdi3+0xb78>
    3c50:	c9 aa       	std	Y+49, r12	; 0x31
    3c52:	da aa       	std	Y+50, r13	; 0x32
    3c54:	eb aa       	std	Y+51, r14	; 0x33
    3c56:	fc aa       	std	Y+52, r15	; 0x34
    3c58:	64 01       	movw	r12, r8
    3c5a:	53 01       	movw	r10, r6
    3c5c:	06 2e       	mov	r0, r22
    3c5e:	04 c0       	rjmp	.+8      	; 0x3c68 <__divdi3+0xb9c>
    3c60:	d6 94       	lsr	r13
    3c62:	c7 94       	ror	r12
    3c64:	b7 94       	ror	r11
    3c66:	a7 94       	ror	r10
    3c68:	0a 94       	dec	r0
    3c6a:	d2 f7       	brpl	.-12     	; 0x3c60 <__divdi3+0xb94>
    3c6c:	d4 01       	movw	r26, r8
    3c6e:	c3 01       	movw	r24, r6
    3c70:	e2 96       	adiw	r28, 0x32	; 50
    3c72:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c74:	e2 97       	sbiw	r28, 0x32	; 50
    3c76:	04 c0       	rjmp	.+8      	; 0x3c80 <__divdi3+0xbb4>
    3c78:	88 0f       	add	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	aa 1f       	adc	r26, r26
    3c7e:	bb 1f       	adc	r27, r27
    3c80:	0a 94       	dec	r0
    3c82:	d2 f7       	brpl	.-12     	; 0x3c78 <__divdi3+0xbac>
    3c84:	21 96       	adiw	r28, 0x01	; 1
    3c86:	ec ac       	ldd	r14, Y+60	; 0x3c
    3c88:	fd ac       	ldd	r15, Y+61	; 0x3d
    3c8a:	0e ad       	ldd	r16, Y+62	; 0x3e
    3c8c:	1f ad       	ldd	r17, Y+63	; 0x3f
    3c8e:	21 97       	sbiw	r28, 0x01	; 1
    3c90:	04 c0       	rjmp	.+8      	; 0x3c9a <__divdi3+0xbce>
    3c92:	16 95       	lsr	r17
    3c94:	07 95       	ror	r16
    3c96:	f7 94       	ror	r15
    3c98:	e7 94       	ror	r14
    3c9a:	6a 95       	dec	r22
    3c9c:	d2 f7       	brpl	.-12     	; 0x3c92 <__divdi3+0xbc6>
    3c9e:	37 01       	movw	r6, r14
    3ca0:	48 01       	movw	r8, r16
    3ca2:	68 2a       	or	r6, r24
    3ca4:	79 2a       	or	r7, r25
    3ca6:	8a 2a       	or	r8, r26
    3ca8:	9b 2a       	or	r9, r27
    3caa:	6d a6       	std	Y+45, r6	; 0x2d
    3cac:	7e a6       	std	Y+46, r7	; 0x2e
    3cae:	8f a6       	std	Y+47, r8	; 0x2f
    3cb0:	98 aa       	std	Y+48, r9	; 0x30
    3cb2:	ed a8       	ldd	r14, Y+53	; 0x35
    3cb4:	fe a8       	ldd	r15, Y+54	; 0x36
    3cb6:	0f a9       	ldd	r16, Y+55	; 0x37
    3cb8:	18 ad       	ldd	r17, Y+56	; 0x38
    3cba:	38 01       	movw	r6, r16
    3cbc:	88 24       	eor	r8, r8
    3cbe:	99 24       	eor	r9, r9
    3cc0:	98 01       	movw	r18, r16
    3cc2:	87 01       	movw	r16, r14
    3cc4:	20 70       	andi	r18, 0x00	; 0
    3cc6:	30 70       	andi	r19, 0x00	; 0
    3cc8:	a5 96       	adiw	r28, 0x25	; 37
    3cca:	0c af       	std	Y+60, r16	; 0x3c
    3ccc:	1d af       	std	Y+61, r17	; 0x3d
    3cce:	2e af       	std	Y+62, r18	; 0x3e
    3cd0:	3f af       	std	Y+63, r19	; 0x3f
    3cd2:	a5 97       	sbiw	r28, 0x25	; 37
    3cd4:	c6 01       	movw	r24, r12
    3cd6:	b5 01       	movw	r22, r10
    3cd8:	a4 01       	movw	r20, r8
    3cda:	93 01       	movw	r18, r6
    3cdc:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3ce0:	7b 01       	movw	r14, r22
    3ce2:	8c 01       	movw	r16, r24
    3ce4:	c6 01       	movw	r24, r12
    3ce6:	b5 01       	movw	r22, r10
    3ce8:	a4 01       	movw	r20, r8
    3cea:	93 01       	movw	r18, r6
    3cec:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3cf0:	c9 01       	movw	r24, r18
    3cf2:	da 01       	movw	r26, r20
    3cf4:	1c 01       	movw	r2, r24
    3cf6:	2d 01       	movw	r4, r26
    3cf8:	c2 01       	movw	r24, r4
    3cfa:	b1 01       	movw	r22, r2
    3cfc:	a5 96       	adiw	r28, 0x25	; 37
    3cfe:	2c ad       	ldd	r18, Y+60	; 0x3c
    3d00:	3d ad       	ldd	r19, Y+61	; 0x3d
    3d02:	4e ad       	ldd	r20, Y+62	; 0x3e
    3d04:	5f ad       	ldd	r21, Y+63	; 0x3f
    3d06:	a5 97       	sbiw	r28, 0x25	; 37
    3d08:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	ac 01       	movw	r20, r24
    3d10:	87 01       	movw	r16, r14
    3d12:	ff 24       	eor	r15, r15
    3d14:	ee 24       	eor	r14, r14
    3d16:	ad a4       	ldd	r10, Y+45	; 0x2d
    3d18:	be a4       	ldd	r11, Y+46	; 0x2e
    3d1a:	cf a4       	ldd	r12, Y+47	; 0x2f
    3d1c:	d8 a8       	ldd	r13, Y+48	; 0x30
    3d1e:	c6 01       	movw	r24, r12
    3d20:	aa 27       	eor	r26, r26
    3d22:	bb 27       	eor	r27, r27
    3d24:	57 01       	movw	r10, r14
    3d26:	68 01       	movw	r12, r16
    3d28:	a8 2a       	or	r10, r24
    3d2a:	b9 2a       	or	r11, r25
    3d2c:	ca 2a       	or	r12, r26
    3d2e:	db 2a       	or	r13, r27
    3d30:	a2 16       	cp	r10, r18
    3d32:	b3 06       	cpc	r11, r19
    3d34:	c4 06       	cpc	r12, r20
    3d36:	d5 06       	cpc	r13, r21
    3d38:	00 f5       	brcc	.+64     	; 0x3d7a <__divdi3+0xcae>
    3d3a:	08 94       	sec
    3d3c:	21 08       	sbc	r2, r1
    3d3e:	31 08       	sbc	r3, r1
    3d40:	41 08       	sbc	r4, r1
    3d42:	51 08       	sbc	r5, r1
    3d44:	ed a8       	ldd	r14, Y+53	; 0x35
    3d46:	fe a8       	ldd	r15, Y+54	; 0x36
    3d48:	0f a9       	ldd	r16, Y+55	; 0x37
    3d4a:	18 ad       	ldd	r17, Y+56	; 0x38
    3d4c:	ae 0c       	add	r10, r14
    3d4e:	bf 1c       	adc	r11, r15
    3d50:	c0 1e       	adc	r12, r16
    3d52:	d1 1e       	adc	r13, r17
    3d54:	ae 14       	cp	r10, r14
    3d56:	bf 04       	cpc	r11, r15
    3d58:	c0 06       	cpc	r12, r16
    3d5a:	d1 06       	cpc	r13, r17
    3d5c:	70 f0       	brcs	.+28     	; 0x3d7a <__divdi3+0xcae>
    3d5e:	a2 16       	cp	r10, r18
    3d60:	b3 06       	cpc	r11, r19
    3d62:	c4 06       	cpc	r12, r20
    3d64:	d5 06       	cpc	r13, r21
    3d66:	48 f4       	brcc	.+18     	; 0x3d7a <__divdi3+0xcae>
    3d68:	08 94       	sec
    3d6a:	21 08       	sbc	r2, r1
    3d6c:	31 08       	sbc	r3, r1
    3d6e:	41 08       	sbc	r4, r1
    3d70:	51 08       	sbc	r5, r1
    3d72:	ae 0c       	add	r10, r14
    3d74:	bf 1c       	adc	r11, r15
    3d76:	c0 1e       	adc	r12, r16
    3d78:	d1 1e       	adc	r13, r17
    3d7a:	a2 1a       	sub	r10, r18
    3d7c:	b3 0a       	sbc	r11, r19
    3d7e:	c4 0a       	sbc	r12, r20
    3d80:	d5 0a       	sbc	r13, r21
    3d82:	c6 01       	movw	r24, r12
    3d84:	b5 01       	movw	r22, r10
    3d86:	a4 01       	movw	r20, r8
    3d88:	93 01       	movw	r18, r6
    3d8a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3d8e:	7b 01       	movw	r14, r22
    3d90:	8c 01       	movw	r16, r24
    3d92:	c6 01       	movw	r24, r12
    3d94:	b5 01       	movw	r22, r10
    3d96:	a4 01       	movw	r20, r8
    3d98:	93 01       	movw	r18, r6
    3d9a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__udivmodsi4>
    3d9e:	c9 01       	movw	r24, r18
    3da0:	da 01       	movw	r26, r20
    3da2:	3c 01       	movw	r6, r24
    3da4:	4d 01       	movw	r8, r26
    3da6:	c4 01       	movw	r24, r8
    3da8:	b3 01       	movw	r22, r6
    3daa:	a5 96       	adiw	r28, 0x25	; 37
    3dac:	2c ad       	ldd	r18, Y+60	; 0x3c
    3dae:	3d ad       	ldd	r19, Y+61	; 0x3d
    3db0:	4e ad       	ldd	r20, Y+62	; 0x3e
    3db2:	5f ad       	ldd	r21, Y+63	; 0x3f
    3db4:	a5 97       	sbiw	r28, 0x25	; 37
    3db6:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3dba:	9b 01       	movw	r18, r22
    3dbc:	ac 01       	movw	r20, r24
    3dbe:	87 01       	movw	r16, r14
    3dc0:	ff 24       	eor	r15, r15
    3dc2:	ee 24       	eor	r14, r14
    3dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dc8:	af a5       	ldd	r26, Y+47	; 0x2f
    3dca:	b8 a9       	ldd	r27, Y+48	; 0x30
    3dcc:	a0 70       	andi	r26, 0x00	; 0
    3dce:	b0 70       	andi	r27, 0x00	; 0
    3dd0:	57 01       	movw	r10, r14
    3dd2:	68 01       	movw	r12, r16
    3dd4:	a8 2a       	or	r10, r24
    3dd6:	b9 2a       	or	r11, r25
    3dd8:	ca 2a       	or	r12, r26
    3dda:	db 2a       	or	r13, r27
    3ddc:	a2 16       	cp	r10, r18
    3dde:	b3 06       	cpc	r11, r19
    3de0:	c4 06       	cpc	r12, r20
    3de2:	d5 06       	cpc	r13, r21
    3de4:	00 f5       	brcc	.+64     	; 0x3e26 <__divdi3+0xd5a>
    3de6:	08 94       	sec
    3de8:	61 08       	sbc	r6, r1
    3dea:	71 08       	sbc	r7, r1
    3dec:	81 08       	sbc	r8, r1
    3dee:	91 08       	sbc	r9, r1
    3df0:	6d a9       	ldd	r22, Y+53	; 0x35
    3df2:	7e a9       	ldd	r23, Y+54	; 0x36
    3df4:	8f a9       	ldd	r24, Y+55	; 0x37
    3df6:	98 ad       	ldd	r25, Y+56	; 0x38
    3df8:	a6 0e       	add	r10, r22
    3dfa:	b7 1e       	adc	r11, r23
    3dfc:	c8 1e       	adc	r12, r24
    3dfe:	d9 1e       	adc	r13, r25
    3e00:	a6 16       	cp	r10, r22
    3e02:	b7 06       	cpc	r11, r23
    3e04:	c8 06       	cpc	r12, r24
    3e06:	d9 06       	cpc	r13, r25
    3e08:	70 f0       	brcs	.+28     	; 0x3e26 <__divdi3+0xd5a>
    3e0a:	a2 16       	cp	r10, r18
    3e0c:	b3 06       	cpc	r11, r19
    3e0e:	c4 06       	cpc	r12, r20
    3e10:	d5 06       	cpc	r13, r21
    3e12:	48 f4       	brcc	.+18     	; 0x3e26 <__divdi3+0xd5a>
    3e14:	08 94       	sec
    3e16:	61 08       	sbc	r6, r1
    3e18:	71 08       	sbc	r7, r1
    3e1a:	81 08       	sbc	r8, r1
    3e1c:	91 08       	sbc	r9, r1
    3e1e:	a6 0e       	add	r10, r22
    3e20:	b7 1e       	adc	r11, r23
    3e22:	c8 1e       	adc	r12, r24
    3e24:	d9 1e       	adc	r13, r25
    3e26:	d6 01       	movw	r26, r12
    3e28:	c5 01       	movw	r24, r10
    3e2a:	82 1b       	sub	r24, r18
    3e2c:	93 0b       	sbc	r25, r19
    3e2e:	a4 0b       	sbc	r26, r20
    3e30:	b5 0b       	sbc	r27, r21
    3e32:	89 a7       	std	Y+41, r24	; 0x29
    3e34:	9a a7       	std	Y+42, r25	; 0x2a
    3e36:	ab a7       	std	Y+43, r26	; 0x2b
    3e38:	bc a7       	std	Y+44, r27	; 0x2c
    3e3a:	d1 01       	movw	r26, r2
    3e3c:	99 27       	eor	r25, r25
    3e3e:	88 27       	eor	r24, r24
    3e40:	64 01       	movw	r12, r8
    3e42:	53 01       	movw	r10, r6
    3e44:	a8 2a       	or	r10, r24
    3e46:	b9 2a       	or	r11, r25
    3e48:	ca 2a       	or	r12, r26
    3e4a:	db 2a       	or	r13, r27
    3e4c:	25 96       	adiw	r28, 0x05	; 5
    3e4e:	ac ae       	std	Y+60, r10	; 0x3c
    3e50:	bd ae       	std	Y+61, r11	; 0x3d
    3e52:	ce ae       	std	Y+62, r12	; 0x3e
    3e54:	df ae       	std	Y+63, r13	; 0x3f
    3e56:	25 97       	sbiw	r28, 0x05	; 5
    3e58:	86 01       	movw	r16, r12
    3e5a:	75 01       	movw	r14, r10
    3e5c:	2f ef       	ldi	r18, 0xFF	; 255
    3e5e:	3f ef       	ldi	r19, 0xFF	; 255
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	e2 22       	and	r14, r18
    3e66:	f3 22       	and	r15, r19
    3e68:	04 23       	and	r16, r20
    3e6a:	15 23       	and	r17, r21
    3e6c:	a6 01       	movw	r20, r12
    3e6e:	66 27       	eor	r22, r22
    3e70:	77 27       	eor	r23, r23
    3e72:	ad 96       	adiw	r28, 0x2d	; 45
    3e74:	4c af       	std	Y+60, r20	; 0x3c
    3e76:	5d af       	std	Y+61, r21	; 0x3d
    3e78:	6e af       	std	Y+62, r22	; 0x3e
    3e7a:	7f af       	std	Y+63, r23	; 0x3f
    3e7c:	ad 97       	sbiw	r28, 0x2d	; 45
    3e7e:	a9 a8       	ldd	r10, Y+49	; 0x31
    3e80:	ba a8       	ldd	r11, Y+50	; 0x32
    3e82:	cb a8       	ldd	r12, Y+51	; 0x33
    3e84:	dc a8       	ldd	r13, Y+52	; 0x34
    3e86:	6f ef       	ldi	r22, 0xFF	; 255
    3e88:	7f ef       	ldi	r23, 0xFF	; 255
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	a6 22       	and	r10, r22
    3e90:	b7 22       	and	r11, r23
    3e92:	c8 22       	and	r12, r24
    3e94:	d9 22       	and	r13, r25
    3e96:	89 a9       	ldd	r24, Y+49	; 0x31
    3e98:	9a a9       	ldd	r25, Y+50	; 0x32
    3e9a:	ab a9       	ldd	r26, Y+51	; 0x33
    3e9c:	bc a9       	ldd	r27, Y+52	; 0x34
    3e9e:	1d 01       	movw	r2, r26
    3ea0:	44 24       	eor	r4, r4
    3ea2:	55 24       	eor	r5, r5
    3ea4:	c8 01       	movw	r24, r16
    3ea6:	b7 01       	movw	r22, r14
    3ea8:	a6 01       	movw	r20, r12
    3eaa:	95 01       	movw	r18, r10
    3eac:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3eb0:	a9 96       	adiw	r28, 0x29	; 41
    3eb2:	6c af       	std	Y+60, r22	; 0x3c
    3eb4:	7d af       	std	Y+61, r23	; 0x3d
    3eb6:	8e af       	std	Y+62, r24	; 0x3e
    3eb8:	9f af       	std	Y+63, r25	; 0x3f
    3eba:	a9 97       	sbiw	r28, 0x29	; 41
    3ebc:	c8 01       	movw	r24, r16
    3ebe:	b7 01       	movw	r22, r14
    3ec0:	a2 01       	movw	r20, r4
    3ec2:	91 01       	movw	r18, r2
    3ec4:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3ec8:	3b 01       	movw	r6, r22
    3eca:	4c 01       	movw	r8, r24
    3ecc:	ad 96       	adiw	r28, 0x2d	; 45
    3ece:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ed0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed6:	ad 97       	sbiw	r28, 0x2d	; 45
    3ed8:	a6 01       	movw	r20, r12
    3eda:	95 01       	movw	r18, r10
    3edc:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3ee0:	7b 01       	movw	r14, r22
    3ee2:	8c 01       	movw	r16, r24
    3ee4:	ad 96       	adiw	r28, 0x2d	; 45
    3ee6:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ee8:	7d ad       	ldd	r23, Y+61	; 0x3d
    3eea:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eec:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eee:	ad 97       	sbiw	r28, 0x2d	; 45
    3ef0:	a2 01       	movw	r20, r4
    3ef2:	91 01       	movw	r18, r2
    3ef4:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    3ef8:	5b 01       	movw	r10, r22
    3efa:	6c 01       	movw	r12, r24
    3efc:	a8 01       	movw	r20, r16
    3efe:	97 01       	movw	r18, r14
    3f00:	26 0d       	add	r18, r6
    3f02:	37 1d       	adc	r19, r7
    3f04:	48 1d       	adc	r20, r8
    3f06:	59 1d       	adc	r21, r9
    3f08:	a9 96       	adiw	r28, 0x29	; 41
    3f0a:	6c ac       	ldd	r6, Y+60	; 0x3c
    3f0c:	7d ac       	ldd	r7, Y+61	; 0x3d
    3f0e:	8e ac       	ldd	r8, Y+62	; 0x3e
    3f10:	9f ac       	ldd	r9, Y+63	; 0x3f
    3f12:	a9 97       	sbiw	r28, 0x29	; 41
    3f14:	c4 01       	movw	r24, r8
    3f16:	aa 27       	eor	r26, r26
    3f18:	bb 27       	eor	r27, r27
    3f1a:	28 0f       	add	r18, r24
    3f1c:	39 1f       	adc	r19, r25
    3f1e:	4a 1f       	adc	r20, r26
    3f20:	5b 1f       	adc	r21, r27
    3f22:	2e 15       	cp	r18, r14
    3f24:	3f 05       	cpc	r19, r15
    3f26:	40 07       	cpc	r20, r16
    3f28:	51 07       	cpc	r21, r17
    3f2a:	48 f4       	brcc	.+18     	; 0x3f3e <__divdi3+0xe72>
    3f2c:	e1 2c       	mov	r14, r1
    3f2e:	f1 2c       	mov	r15, r1
    3f30:	61 e0       	ldi	r22, 0x01	; 1
    3f32:	06 2f       	mov	r16, r22
    3f34:	11 2d       	mov	r17, r1
    3f36:	ae 0c       	add	r10, r14
    3f38:	bf 1c       	adc	r11, r15
    3f3a:	c0 1e       	adc	r12, r16
    3f3c:	d1 1e       	adc	r13, r17
    3f3e:	ca 01       	movw	r24, r20
    3f40:	aa 27       	eor	r26, r26
    3f42:	bb 27       	eor	r27, r27
    3f44:	bc 01       	movw	r22, r24
    3f46:	cd 01       	movw	r24, r26
    3f48:	6a 0d       	add	r22, r10
    3f4a:	7b 1d       	adc	r23, r11
    3f4c:	8c 1d       	adc	r24, r12
    3f4e:	9d 1d       	adc	r25, r13
    3f50:	69 a4       	ldd	r6, Y+41	; 0x29
    3f52:	7a a4       	ldd	r7, Y+42	; 0x2a
    3f54:	8b a4       	ldd	r8, Y+43	; 0x2b
    3f56:	9c a4       	ldd	r9, Y+44	; 0x2c
    3f58:	66 16       	cp	r6, r22
    3f5a:	77 06       	cpc	r7, r23
    3f5c:	88 06       	cpc	r8, r24
    3f5e:	99 06       	cpc	r9, r25
    3f60:	50 f1       	brcs	.+84     	; 0x3fb6 <__divdi3+0xeea>
    3f62:	66 15       	cp	r22, r6
    3f64:	77 05       	cpc	r23, r7
    3f66:	88 05       	cpc	r24, r8
    3f68:	99 05       	cpc	r25, r9
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <__divdi3+0xea2>
    3f6c:	4d c0       	rjmp	.+154    	; 0x4008 <__divdi3+0xf3c>
    3f6e:	d9 01       	movw	r26, r18
    3f70:	99 27       	eor	r25, r25
    3f72:	88 27       	eor	r24, r24
    3f74:	a9 96       	adiw	r28, 0x29	; 41
    3f76:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f78:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f7e:	a9 97       	sbiw	r28, 0x29	; 41
    3f80:	40 70       	andi	r20, 0x00	; 0
    3f82:	50 70       	andi	r21, 0x00	; 0
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	a4 1f       	adc	r26, r20
    3f8a:	b5 1f       	adc	r27, r21
    3f8c:	21 96       	adiw	r28, 0x01	; 1
    3f8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f90:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f92:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f94:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f96:	21 97       	sbiw	r28, 0x01	; 1
    3f98:	e2 96       	adiw	r28, 0x32	; 50
    3f9a:	0f ac       	ldd	r0, Y+63	; 0x3f
    3f9c:	e2 97       	sbiw	r28, 0x32	; 50
    3f9e:	04 c0       	rjmp	.+8      	; 0x3fa8 <__divdi3+0xedc>
    3fa0:	22 0f       	add	r18, r18
    3fa2:	33 1f       	adc	r19, r19
    3fa4:	44 1f       	adc	r20, r20
    3fa6:	55 1f       	adc	r21, r21
    3fa8:	0a 94       	dec	r0
    3faa:	d2 f7       	brpl	.-12     	; 0x3fa0 <__divdi3+0xed4>
    3fac:	28 17       	cp	r18, r24
    3fae:	39 07       	cpc	r19, r25
    3fb0:	4a 07       	cpc	r20, r26
    3fb2:	5b 07       	cpc	r21, r27
    3fb4:	48 f5       	brcc	.+82     	; 0x4008 <__divdi3+0xf3c>
    3fb6:	25 96       	adiw	r28, 0x05	; 5
    3fb8:	0c ad       	ldd	r16, Y+60	; 0x3c
    3fba:	1d ad       	ldd	r17, Y+61	; 0x3d
    3fbc:	2e ad       	ldd	r18, Y+62	; 0x3e
    3fbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    3fc0:	25 97       	sbiw	r28, 0x05	; 5
    3fc2:	01 50       	subi	r16, 0x01	; 1
    3fc4:	10 40       	sbci	r17, 0x00	; 0
    3fc6:	20 40       	sbci	r18, 0x00	; 0
    3fc8:	30 40       	sbci	r19, 0x00	; 0
    3fca:	25 96       	adiw	r28, 0x05	; 5
    3fcc:	0c af       	std	Y+60, r16	; 0x3c
    3fce:	1d af       	std	Y+61, r17	; 0x3d
    3fd0:	2e af       	std	Y+62, r18	; 0x3e
    3fd2:	3f af       	std	Y+63, r19	; 0x3f
    3fd4:	25 97       	sbiw	r28, 0x05	; 5
    3fd6:	18 c0       	rjmp	.+48     	; 0x4008 <__divdi3+0xf3c>
    3fd8:	66 24       	eor	r6, r6
    3fda:	77 24       	eor	r7, r7
    3fdc:	43 01       	movw	r8, r6
    3fde:	21 e0       	ldi	r18, 0x01	; 1
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	40 e0       	ldi	r20, 0x00	; 0
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	25 96       	adiw	r28, 0x05	; 5
    3fe8:	2c af       	std	Y+60, r18	; 0x3c
    3fea:	3d af       	std	Y+61, r19	; 0x3d
    3fec:	4e af       	std	Y+62, r20	; 0x3e
    3fee:	5f af       	std	Y+63, r21	; 0x3f
    3ff0:	25 97       	sbiw	r28, 0x05	; 5
    3ff2:	0d c0       	rjmp	.+26     	; 0x400e <__divdi3+0xf42>
    3ff4:	66 24       	eor	r6, r6
    3ff6:	77 24       	eor	r7, r7
    3ff8:	43 01       	movw	r8, r6
    3ffa:	25 96       	adiw	r28, 0x05	; 5
    3ffc:	1c ae       	std	Y+60, r1	; 0x3c
    3ffe:	1d ae       	std	Y+61, r1	; 0x3d
    4000:	1e ae       	std	Y+62, r1	; 0x3e
    4002:	1f ae       	std	Y+63, r1	; 0x3f
    4004:	25 97       	sbiw	r28, 0x05	; 5
    4006:	03 c0       	rjmp	.+6      	; 0x400e <__divdi3+0xf42>
    4008:	66 24       	eor	r6, r6
    400a:	77 24       	eor	r7, r7
    400c:	43 01       	movw	r8, r6
    400e:	fe 01       	movw	r30, r28
    4010:	b1 96       	adiw	r30, 0x21	; 33
    4012:	88 e0       	ldi	r24, 0x08	; 8
    4014:	df 01       	movw	r26, r30
    4016:	1d 92       	st	X+, r1
    4018:	8a 95       	dec	r24
    401a:	e9 f7       	brne	.-6      	; 0x4016 <__divdi3+0xf4a>
    401c:	25 96       	adiw	r28, 0x05	; 5
    401e:	ac ac       	ldd	r10, Y+60	; 0x3c
    4020:	bd ac       	ldd	r11, Y+61	; 0x3d
    4022:	ce ac       	ldd	r12, Y+62	; 0x3e
    4024:	df ac       	ldd	r13, Y+63	; 0x3f
    4026:	25 97       	sbiw	r28, 0x05	; 5
    4028:	a9 a2       	std	Y+33, r10	; 0x21
    402a:	ba a2       	std	Y+34, r11	; 0x22
    402c:	cb a2       	std	Y+35, r12	; 0x23
    402e:	dc a2       	std	Y+36, r13	; 0x24
    4030:	6d a2       	std	Y+37, r6	; 0x25
    4032:	7e a2       	std	Y+38, r7	; 0x26
    4034:	8f a2       	std	Y+39, r8	; 0x27
    4036:	98 a6       	std	Y+40, r9	; 0x28
    4038:	22 96       	adiw	r28, 0x02	; 2
    403a:	2f ad       	ldd	r18, Y+63	; 0x3f
    403c:	22 97       	sbiw	r28, 0x02	; 2
    403e:	3a a1       	ldd	r19, Y+34	; 0x22
    4040:	4b a1       	ldd	r20, Y+35	; 0x23
    4042:	5c a1       	ldd	r21, Y+36	; 0x24
    4044:	66 2d       	mov	r22, r6
    4046:	7e a1       	ldd	r23, Y+38	; 0x26
    4048:	df a0       	ldd	r13, Y+39	; 0x27
    404a:	98 a5       	ldd	r25, Y+40	; 0x28
    404c:	e1 96       	adiw	r28, 0x31	; 49
    404e:	ec ac       	ldd	r14, Y+60	; 0x3c
    4050:	fd ac       	ldd	r15, Y+61	; 0x3d
    4052:	0e ad       	ldd	r16, Y+62	; 0x3e
    4054:	1f ad       	ldd	r17, Y+63	; 0x3f
    4056:	e1 97       	sbiw	r28, 0x31	; 49
    4058:	e1 14       	cp	r14, r1
    405a:	f1 04       	cpc	r15, r1
    405c:	01 05       	cpc	r16, r1
    405e:	11 05       	cpc	r17, r1
    4060:	09 f4       	brne	.+2      	; 0x4064 <__divdi3+0xf98>
    4062:	56 c0       	rjmp	.+172    	; 0x4110 <__divdi3+0x1044>
    4064:	21 95       	neg	r18
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	12 16       	cp	r1, r18
    406a:	08 f0       	brcs	.+2      	; 0x406e <__divdi3+0xfa2>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	31 95       	neg	r19
    4070:	e1 e0       	ldi	r30, 0x01	; 1
    4072:	13 16       	cp	r1, r19
    4074:	08 f0       	brcs	.+2      	; 0x4078 <__divdi3+0xfac>
    4076:	e0 e0       	ldi	r30, 0x00	; 0
    4078:	93 2e       	mov	r9, r19
    407a:	98 1a       	sub	r9, r24
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	39 15       	cp	r19, r9
    4080:	08 f0       	brcs	.+2      	; 0x4084 <__divdi3+0xfb8>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	e8 2b       	or	r30, r24
    4086:	41 95       	neg	r20
    4088:	f1 e0       	ldi	r31, 0x01	; 1
    408a:	14 16       	cp	r1, r20
    408c:	08 f0       	brcs	.+2      	; 0x4090 <__divdi3+0xfc4>
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	a4 2e       	mov	r10, r20
    4092:	ae 1a       	sub	r10, r30
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	4a 15       	cp	r20, r10
    4098:	08 f0       	brcs	.+2      	; 0x409c <__divdi3+0xfd0>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	f8 2b       	or	r31, r24
    409e:	51 95       	neg	r21
    40a0:	e1 e0       	ldi	r30, 0x01	; 1
    40a2:	15 16       	cp	r1, r21
    40a4:	08 f0       	brcs	.+2      	; 0x40a8 <__divdi3+0xfdc>
    40a6:	e0 e0       	ldi	r30, 0x00	; 0
    40a8:	b5 2e       	mov	r11, r21
    40aa:	bf 1a       	sub	r11, r31
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	5b 15       	cp	r21, r11
    40b0:	08 f0       	brcs	.+2      	; 0x40b4 <__divdi3+0xfe8>
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	e8 2b       	or	r30, r24
    40b6:	61 95       	neg	r22
    40b8:	f1 e0       	ldi	r31, 0x01	; 1
    40ba:	16 16       	cp	r1, r22
    40bc:	08 f0       	brcs	.+2      	; 0x40c0 <__divdi3+0xff4>
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	a6 2f       	mov	r26, r22
    40c2:	ae 1b       	sub	r26, r30
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	6a 17       	cp	r22, r26
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <__divdi3+0x1000>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	f8 2b       	or	r31, r24
    40ce:	71 95       	neg	r23
    40d0:	e1 e0       	ldi	r30, 0x01	; 1
    40d2:	17 16       	cp	r1, r23
    40d4:	08 f0       	brcs	.+2      	; 0x40d8 <__divdi3+0x100c>
    40d6:	e0 e0       	ldi	r30, 0x00	; 0
    40d8:	c7 2e       	mov	r12, r23
    40da:	cf 1a       	sub	r12, r31
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	7c 15       	cp	r23, r12
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <__divdi3+0x1018>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	e8 2b       	or	r30, r24
    40e6:	8d 2d       	mov	r24, r13
    40e8:	81 95       	neg	r24
    40ea:	f1 e0       	ldi	r31, 0x01	; 1
    40ec:	18 16       	cp	r1, r24
    40ee:	08 f0       	brcs	.+2      	; 0x40f2 <__divdi3+0x1026>
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	d8 2e       	mov	r13, r24
    40f4:	de 1a       	sub	r13, r30
    40f6:	e1 e0       	ldi	r30, 0x01	; 1
    40f8:	8d 15       	cp	r24, r13
    40fa:	08 f0       	brcs	.+2      	; 0x40fe <__divdi3+0x1032>
    40fc:	e0 e0       	ldi	r30, 0x00	; 0
    40fe:	fe 2b       	or	r31, r30
    4100:	89 2f       	mov	r24, r25
    4102:	81 95       	neg	r24
    4104:	39 2d       	mov	r19, r9
    4106:	a5 01       	movw	r20, r10
    4108:	6a 2f       	mov	r22, r26
    410a:	7c 2d       	mov	r23, r12
    410c:	98 2f       	mov	r25, r24
    410e:	9f 1b       	sub	r25, r31
    4110:	8d 2d       	mov	r24, r13
    4112:	ce 58       	subi	r28, 0x8E	; 142
    4114:	df 4f       	sbci	r29, 0xFF	; 255
    4116:	e2 e1       	ldi	r30, 0x12	; 18
    4118:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__epilogue_restores__>

0000411c <__mulsi3>:
    411c:	62 9f       	mul	r22, r18
    411e:	d0 01       	movw	r26, r0
    4120:	73 9f       	mul	r23, r19
    4122:	f0 01       	movw	r30, r0
    4124:	82 9f       	mul	r24, r18
    4126:	e0 0d       	add	r30, r0
    4128:	f1 1d       	adc	r31, r1
    412a:	64 9f       	mul	r22, r20
    412c:	e0 0d       	add	r30, r0
    412e:	f1 1d       	adc	r31, r1
    4130:	92 9f       	mul	r25, r18
    4132:	f0 0d       	add	r31, r0
    4134:	83 9f       	mul	r24, r19
    4136:	f0 0d       	add	r31, r0
    4138:	74 9f       	mul	r23, r20
    413a:	f0 0d       	add	r31, r0
    413c:	65 9f       	mul	r22, r21
    413e:	f0 0d       	add	r31, r0
    4140:	99 27       	eor	r25, r25
    4142:	72 9f       	mul	r23, r18
    4144:	b0 0d       	add	r27, r0
    4146:	e1 1d       	adc	r30, r1
    4148:	f9 1f       	adc	r31, r25
    414a:	63 9f       	mul	r22, r19
    414c:	b0 0d       	add	r27, r0
    414e:	e1 1d       	adc	r30, r1
    4150:	f9 1f       	adc	r31, r25
    4152:	bd 01       	movw	r22, r26
    4154:	cf 01       	movw	r24, r30
    4156:	11 24       	eor	r1, r1
    4158:	08 95       	ret

0000415a <__udivmodhi4>:
    415a:	aa 1b       	sub	r26, r26
    415c:	bb 1b       	sub	r27, r27
    415e:	51 e1       	ldi	r21, 0x11	; 17
    4160:	07 c0       	rjmp	.+14     	; 0x4170 <__udivmodhi4_ep>

00004162 <__udivmodhi4_loop>:
    4162:	aa 1f       	adc	r26, r26
    4164:	bb 1f       	adc	r27, r27
    4166:	a6 17       	cp	r26, r22
    4168:	b7 07       	cpc	r27, r23
    416a:	10 f0       	brcs	.+4      	; 0x4170 <__udivmodhi4_ep>
    416c:	a6 1b       	sub	r26, r22
    416e:	b7 0b       	sbc	r27, r23

00004170 <__udivmodhi4_ep>:
    4170:	88 1f       	adc	r24, r24
    4172:	99 1f       	adc	r25, r25
    4174:	5a 95       	dec	r21
    4176:	a9 f7       	brne	.-22     	; 0x4162 <__udivmodhi4_loop>
    4178:	80 95       	com	r24
    417a:	90 95       	com	r25
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	08 95       	ret

00004182 <__divmodhi4>:
    4182:	97 fb       	bst	r25, 7
    4184:	09 2e       	mov	r0, r25
    4186:	07 26       	eor	r0, r23
    4188:	0a d0       	rcall	.+20     	; 0x419e <__divmodhi4_neg1>
    418a:	77 fd       	sbrc	r23, 7
    418c:	04 d0       	rcall	.+8      	; 0x4196 <__divmodhi4_neg2>
    418e:	e5 df       	rcall	.-54     	; 0x415a <__udivmodhi4>
    4190:	06 d0       	rcall	.+12     	; 0x419e <__divmodhi4_neg1>
    4192:	00 20       	and	r0, r0
    4194:	1a f4       	brpl	.+6      	; 0x419c <__divmodhi4_exit>

00004196 <__divmodhi4_neg2>:
    4196:	70 95       	com	r23
    4198:	61 95       	neg	r22
    419a:	7f 4f       	sbci	r23, 0xFF	; 255

0000419c <__divmodhi4_exit>:
    419c:	08 95       	ret

0000419e <__divmodhi4_neg1>:
    419e:	f6 f7       	brtc	.-4      	; 0x419c <__divmodhi4_exit>
    41a0:	90 95       	com	r25
    41a2:	81 95       	neg	r24
    41a4:	9f 4f       	sbci	r25, 0xFF	; 255
    41a6:	08 95       	ret

000041a8 <__udivmodsi4>:
    41a8:	a1 e2       	ldi	r26, 0x21	; 33
    41aa:	1a 2e       	mov	r1, r26
    41ac:	aa 1b       	sub	r26, r26
    41ae:	bb 1b       	sub	r27, r27
    41b0:	fd 01       	movw	r30, r26
    41b2:	0d c0       	rjmp	.+26     	; 0x41ce <__udivmodsi4_ep>

000041b4 <__udivmodsi4_loop>:
    41b4:	aa 1f       	adc	r26, r26
    41b6:	bb 1f       	adc	r27, r27
    41b8:	ee 1f       	adc	r30, r30
    41ba:	ff 1f       	adc	r31, r31
    41bc:	a2 17       	cp	r26, r18
    41be:	b3 07       	cpc	r27, r19
    41c0:	e4 07       	cpc	r30, r20
    41c2:	f5 07       	cpc	r31, r21
    41c4:	20 f0       	brcs	.+8      	; 0x41ce <__udivmodsi4_ep>
    41c6:	a2 1b       	sub	r26, r18
    41c8:	b3 0b       	sbc	r27, r19
    41ca:	e4 0b       	sbc	r30, r20
    41cc:	f5 0b       	sbc	r31, r21

000041ce <__udivmodsi4_ep>:
    41ce:	66 1f       	adc	r22, r22
    41d0:	77 1f       	adc	r23, r23
    41d2:	88 1f       	adc	r24, r24
    41d4:	99 1f       	adc	r25, r25
    41d6:	1a 94       	dec	r1
    41d8:	69 f7       	brne	.-38     	; 0x41b4 <__udivmodsi4_loop>
    41da:	60 95       	com	r22
    41dc:	70 95       	com	r23
    41de:	80 95       	com	r24
    41e0:	90 95       	com	r25
    41e2:	9b 01       	movw	r18, r22
    41e4:	ac 01       	movw	r20, r24
    41e6:	bd 01       	movw	r22, r26
    41e8:	cf 01       	movw	r24, r30
    41ea:	08 95       	ret

000041ec <__divmodsi4>:
    41ec:	97 fb       	bst	r25, 7
    41ee:	09 2e       	mov	r0, r25
    41f0:	05 26       	eor	r0, r21
    41f2:	0e d0       	rcall	.+28     	; 0x4210 <__divmodsi4_neg1>
    41f4:	57 fd       	sbrc	r21, 7
    41f6:	04 d0       	rcall	.+8      	; 0x4200 <__divmodsi4_neg2>
    41f8:	d7 df       	rcall	.-82     	; 0x41a8 <__udivmodsi4>
    41fa:	0a d0       	rcall	.+20     	; 0x4210 <__divmodsi4_neg1>
    41fc:	00 1c       	adc	r0, r0
    41fe:	38 f4       	brcc	.+14     	; 0x420e <__divmodsi4_exit>

00004200 <__divmodsi4_neg2>:
    4200:	50 95       	com	r21
    4202:	40 95       	com	r20
    4204:	30 95       	com	r19
    4206:	21 95       	neg	r18
    4208:	3f 4f       	sbci	r19, 0xFF	; 255
    420a:	4f 4f       	sbci	r20, 0xFF	; 255
    420c:	5f 4f       	sbci	r21, 0xFF	; 255

0000420e <__divmodsi4_exit>:
    420e:	08 95       	ret

00004210 <__divmodsi4_neg1>:
    4210:	f6 f7       	brtc	.-4      	; 0x420e <__divmodsi4_exit>
    4212:	90 95       	com	r25
    4214:	80 95       	com	r24
    4216:	70 95       	com	r23
    4218:	61 95       	neg	r22
    421a:	7f 4f       	sbci	r23, 0xFF	; 255
    421c:	8f 4f       	sbci	r24, 0xFF	; 255
    421e:	9f 4f       	sbci	r25, 0xFF	; 255
    4220:	08 95       	ret

00004222 <__prologue_saves__>:
    4222:	2f 92       	push	r2
    4224:	3f 92       	push	r3
    4226:	4f 92       	push	r4
    4228:	5f 92       	push	r5
    422a:	6f 92       	push	r6
    422c:	7f 92       	push	r7
    422e:	8f 92       	push	r8
    4230:	9f 92       	push	r9
    4232:	af 92       	push	r10
    4234:	bf 92       	push	r11
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	ca 1b       	sub	r28, r26
    424c:	db 0b       	sbc	r29, r27
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	19 94       	eijmp

0000425a <__epilogue_restores__>:
    425a:	2a 88       	ldd	r2, Y+18	; 0x12
    425c:	39 88       	ldd	r3, Y+17	; 0x11
    425e:	48 88       	ldd	r4, Y+16	; 0x10
    4260:	5f 84       	ldd	r5, Y+15	; 0x0f
    4262:	6e 84       	ldd	r6, Y+14	; 0x0e
    4264:	7d 84       	ldd	r7, Y+13	; 0x0d
    4266:	8c 84       	ldd	r8, Y+12	; 0x0c
    4268:	9b 84       	ldd	r9, Y+11	; 0x0b
    426a:	aa 84       	ldd	r10, Y+10	; 0x0a
    426c:	b9 84       	ldd	r11, Y+9	; 0x09
    426e:	c8 84       	ldd	r12, Y+8	; 0x08
    4270:	df 80       	ldd	r13, Y+7	; 0x07
    4272:	ee 80       	ldd	r14, Y+6	; 0x06
    4274:	fd 80       	ldd	r15, Y+5	; 0x05
    4276:	0c 81       	ldd	r16, Y+4	; 0x04
    4278:	1b 81       	ldd	r17, Y+3	; 0x03
    427a:	aa 81       	ldd	r26, Y+2	; 0x02
    427c:	b9 81       	ldd	r27, Y+1	; 0x01
    427e:	ce 0f       	add	r28, r30
    4280:	d1 1d       	adc	r29, r1
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	ed 01       	movw	r28, r26
    428e:	08 95       	ret

00004290 <_exit>:
    4290:	f8 94       	cli

00004292 <__stop_program>:
    4292:	ff cf       	rjmp	.-2      	; 0x4292 <__stop_program>
